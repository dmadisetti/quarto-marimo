---
title: Layout
marimo-version: 0.5.2
format: html
filters:
  - marimo/quarto
---

# Layout

`marimo` provides functions to help you lay out your output, such as
in rows and columns, accordions, tabs, and callouts.
<!---->
## Rows and columns

Arrange objects into rows and columns with `mo.hstack` and `mo.vstack`.

```{.python.marimo}
mo.hstack(
    [mo.ui.text(label="hello"), mo.ui.slider(1, 10, label="slider")],
    justify="start",
)
```

```{.python.marimo}
mo.vstack([mo.ui.text(label="world"), mo.ui.number(1, 10, label="number")])
```

```{.python.marimo}
grid = mo.vstack(
    [
        mo.hstack(
            [mo.ui.text(label="hello"), mo.ui.slider(1, 10, label="slider")],
        ),
        mo.hstack(
            [mo.ui.text(label="world"), mo.ui.number(1, 10, label="number")],
        ),
    ],
).center()

mo.md(
    f"""
    Combine `mo.hstack` with `mo.vstack` to make grids:

    {grid}

    You can pass anything to `mo.hstack` to `mo.vstack` (including
    plots!).
    """
)
```

**Customization.**
The presentation of stacked elements can be customized with some arguments
that are best understood by example.

```{.python.marimo}
justify = mo.ui.dropdown(
    ["start", "center", "end", "space-between", "space-around"],
    value="space-between",
    label="justify",
)
align = mo.ui.dropdown(
    ["start", "center", "end", "stretch"], value="center", label="align"
)
gap = mo.ui.number(start=0, step=0.25, stop=2, value=0.5, label="gap")
wrap = mo.ui.checkbox(label="wrap")

mo.hstack([justify, align, gap, wrap], justify="center")
```

```{.python.marimo}
size = mo.ui.slider(label="box size", start=60, stop=500)
mo.hstack([size], justify="center")
```

```{.python.marimo}
mo.hstack(
    boxes,
    align=align.value,
    justify=justify.value,
    gap=gap.value,
    wrap=wrap.value,
)
```

```{.python.marimo}
mo.vstack(
    boxes,
    align=align.value,
    gap=gap.value,
)
```

```{.python.marimo}
def create_box(num=1):
    box_size = size.value + num * 10
    return mo.Html(
        f"<div style='min-width: {box_size}px; min-height: {box_size}px; background-color: orange; text-align: center; line-height: {box_size}px'>{str(num)}</div>"
    )


boxes = [create_box(i) for i in range(1, 5)]
```

```{.python.marimo hide_code="true"}
mo.accordion(
    {
        "Documentation: `mo.hstack`": mo.doc(mo.hstack),
        "Documentation: `mo.vstack`": mo.doc(mo.vstack),
    }
)
```

**Justifying `Html`.** While you can center or right-justify any object
using `mo.hstack`, `Html` objects (returned by most marimo
functions, and subclassed by most marimo classes) have a shortcut using
via their `center`, `right`, and `left` methods.
<!---->
This markdown is left-justified.

```{.python.marimo}
mo.md("This markdown is centered.").center()
```

```{.python.marimo}
mo.md("This markdown is right-justified.").right()
```

```{.python.marimo hide_code="true"}
mo.accordion(
    {
        "Documentation: `Html.center`": mo.doc(mo.Html.center),
        "Documentation: `Html.right`": mo.doc(mo.Html.right),
        "Documentation: `Html.left`": mo.doc(mo.Html.left),
    }
)
```

## Accordion

Create expandable shelves of content using `mo.accordion`:
<!---->
An accordion can contain multiple items:

```{.python.marimo}
mo.accordion(
    {
        "Multiple items": "By default, only one item can be open at a time",
        "Allow multiple items to be open": (
            """
            Use the keyword argument `multiple=True` to allow multiple items
            to be open at the same time
            """
        ),
    }
)
```

## Tabs

Use `mo.ui.tabs` to display multiple objects in a single tabbed output:

```{.python.marimo}
_settings = mo.vstack(
    [
        mo.md("**Edit User**"),
        mo.ui.text(label="First Name"),
        mo.ui.text(label="Last Name"),
    ]
)

_organization = mo.vstack(
    [
        mo.md("**Edit Organization**"),
        mo.ui.text(label="Organization Name"),
        mo.ui.number(label="Number of employees", start=0, stop=1000),
    ]
)

mo.ui.tabs(
    {
        "üßô‚Äç‚ôÄ User": _settings,
        "üè¢ Organization": _organization,
    }
)
```

```{.python.marimo hide_code="true"}
mo.accordion({"Documentation: `mo.ui.tabs`": mo.doc(mo.ui.tabs)})
```

```{.python.marimo}
_t = [
    mo.md("**Hello!**"),
    mo.md(r"$f(x)$"),
    {"c": mo.ui.slider(1, 10), "d": (mo.ui.checkbox(), mo.ui.switch())},
]

mo.md(
    f"""
    ## Tree

    Display a nested structure of lists, dictionaries, and tuples with
    `mo.tree`:

    {mo.tree(_t)}
    """
)
```

```{.python.marimo hide_code="true"}
mo.accordion({"Documentation: `mo.tree`": mo.doc(mo.tree)})
```

## Callout

Turn any markdown or HTML into an emphasized callout with the `callout`
method:

```{.python.marimo}
callout_kind = mo.ui.dropdown(
    ["neutral", "warn", "success", "info", "danger"], value="neutral"
)
```

```{.python.marimo}
mo.md(
    f"""
    **This is a callout!**

    You can turn any HTML or markdown into an emphasized callout.
    You can choose from a variety of different callout kind. This one is:
    {callout_kind}
    """
).callout(kind=callout_kind.value)
```

```{.python.marimo hide_code="true"}
mo.accordion({"Documentation: `mo.callout`": mo.doc(mo.callout)})
```

```{.python.marimo}
import marimo as mo
```
