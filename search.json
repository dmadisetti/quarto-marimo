[
  {
    "objectID": "plots.html",
    "href": "plots.html",
    "title": "Plots",
    "section": "",
    "text": "check_dependencies()\n    \n\nmarimo supports several popular plotting libraries, including matplotlib, plotly, seaborn, and altair.\nThis tutorial gives examples using matplotlib; other libraries are used similarly.\n\n\nTo show a plot, include it in the last expression of a cell (just like any other output).\n# create the plot in the last line of the cell\nimport matplotlib.pyplot as plt\nplt.plot([1, 2])\n\n    \n    \n    \n    \n    plt.plot(%5B1%2C%202%5D)%0Aplt.gca()\n    \n\n# create a plot\nplt.plot([1, 2])\n# ... do some work ...\n# make plt.gca() the last line of the cell\nplt.gca()\n\n    \n    \n    \n    \n    plt.plot(%5B1%2C%202%5D)%0A%23%20...%20do%20some%20work%20...%0A%23%20make%20plt.gca()%20the%20last%20line%20of%20the%20cell\n    \n\n\n            \n            You can use plt.show() or figure.show() to display\nplots in the console area of a cell. Keep in mind that console\noutputs are not shown in the app view.\n            \n            \n            mo.accordion(plt_show_explainer)\n            \n        \nA new figure every cell. Every cell starts with an empty figure for the imperative pyplot API.\n\n    \n    \n    \n    x%20%3D%20np.linspace(start%3D-4%2C%20stop%3D4%2C%20num%3D100%2C%20dtype%3Dfloat)\n    \n\n\n    \n    \n    \n    \n    plt.plot(x%2C%20x)%0Aplt.plot(x%2C%20x**2)%0Aplt.gca()\n    \n\n\n    \n    \n    \n    \n    plt.plot(x%2C%20x**3)\n    \n\nTo build a figure over multiple cells, use the object-oriented API and create your own axis:\n\n    \n    \n    \n    \n    _%2C%20axis%20%3D%20plt.subplots()%0Aaxis.plot(x%2C%20x)%0Aaxis.plot(x%2C%20x**2)%0Aaxis\n    \n\n\n    \n    \n    \n    \n    axis.plot(x%2C%20x**3)%0Aaxis\n    \n\n\n\nDraw plots interactively by parametrizing them with UI elements.\n\n            \n            Visualizing powers.\n\n            \n            \n            exponent%20%3D%20mo.ui.slider(1%2C%205%2C%20value%3D1%2C%20step%3D1%2C%20label%3D'exponent')%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20**Visualizing%20powers.**%0A%0A%20%20%20%20%7Bexponent%7D%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n    \n    ||[f(x) = x||]\n    \n    \n    import%20functools%0A%0A%0A%40functools.cache%0Adef%20_plot(exponent)%3A%0A%20%20%20%20plt.plot(x%2C%20x**exponent)%0A%20%20%20%20return%20plt.gca()%0A%0A%0A_tex%20%3D%20(%0A%20%20%20%20f%22%24%24f(x)%20%3D%20x%5E%7Bexponent.value%7D%24%24%22%20if%20exponent.value%20%3E%201%20else%20%22%24%24f(x)%20%3D%20x%24%24%22%0A)%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%0A%20%20%20%20%7B_tex%7D%0A%0A%20%20%20%20%7Bmo.as_html(_plot(exponent.value))%7D%0A%20%20%20%20%22%22%22%0A)\n    \n\n\n\n\n\nmarimo also supports these other plotting libraries:\n\nPlotly\nSeaborn\nAltair\n\nJust output their figure objects as the last expression of a cell, or embed them in markdown with mo.as_html.\nIf you would like another library to be integrated into marimo, please get in touch.\n\n    \n    \n    \n    module_not_found_explainer%20%3D%20mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20%23%23%20Oops!%0A%0A%20%20%20%20It%20looks%20like%20you're%20missing%20a%20package%20that%20this%20tutorial%0A%20%20%20%20requires.%0A%0A%20%20%20%20Close%20marimo%2C%20install%20**%60numpy%60**%20and%20**%60matplotlib%60**%2C%20then%0A%20%20%20%20open%20this%20tutorial%20once%20more.%0A%0A%20%20%20%20If%20you%20use%20%60pip%60%2C%20run%0A%0A%20%20%20%20%60%60%60%0A%0A%0A%20%20%20%20pip%20install%20numpy%20matplotlib%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20at%20your%20command%20line.%0A%20%20%20%20%22%22%22%0A).callout(kind%3D'warn')%0A%0Adef%20check_dependencies()%3A%0A%20%20%20%20if%20missing_packages%3A%0A%20%20%20%20%20%20%20%20return%20module_not_found_explainer\n    \n\n\n    \n    \n    \n    plt_show_explainer%20%3D%20%7B%0A%20%20%20%20%22Using%20%60plt.show()%60%22%3A%20%22%22%22%0A%20%20%20%20You%20can%20use%20%60plt.show()%60%20or%20%60figure.show()%60%20to%20display%0A%20%20%20%20plots%20in%20the%20console%20area%20of%20a%20cell.%20Keep%20in%20mind%20that%20console%0A%20%20%20%20outputs%20are%20not%20shown%20in%20the%20app%20view.%0A%20%20%20%20%22%22%22%0A%7D\n    \n\n\n    \n    \n    \n    try%3A%0A%20%20%20%20import%20matplotlib%0A%20%20%20%20import%20matplotlib.pyplot%20as%20plt%0A%20%20%20%20import%20numpy%20as%20np%0A%20%20%20%20missing_packages%20%3D%20False%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20missing_packages%20%3D%20True%0A%0Aif%20not%20missing_packages%3A%0A%20%20%20%20matplotlib.rcParams%5B'figure.figsize'%5D%20%3D%20(6%2C%202.4)\n    \n\n\n    \n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Plots"
    ]
  },
  {
    "objectID": "plots.html#matplotlib",
    "href": "plots.html#matplotlib",
    "title": "Plots",
    "section": "",
    "text": "To show a plot, include it in the last expression of a cell (just like any other output).\n# create the plot in the last line of the cell\nimport matplotlib.pyplot as plt\nplt.plot([1, 2])\n\n    \n    \n    \n    \n    plt.plot(%5B1%2C%202%5D)%0Aplt.gca()\n    \n\n# create a plot\nplt.plot([1, 2])\n# ... do some work ...\n# make plt.gca() the last line of the cell\nplt.gca()\n\n    \n    \n    \n    \n    plt.plot(%5B1%2C%202%5D)%0A%23%20...%20do%20some%20work%20...%0A%23%20make%20plt.gca()%20the%20last%20line%20of%20the%20cell\n    \n\n\n            \n            You can use plt.show() or figure.show() to display\nplots in the console area of a cell. Keep in mind that console\noutputs are not shown in the app view.\n            \n            \n            mo.accordion(plt_show_explainer)\n            \n        \nA new figure every cell. Every cell starts with an empty figure for the imperative pyplot API.\n\n    \n    \n    \n    x%20%3D%20np.linspace(start%3D-4%2C%20stop%3D4%2C%20num%3D100%2C%20dtype%3Dfloat)\n    \n\n\n    \n    \n    \n    \n    plt.plot(x%2C%20x)%0Aplt.plot(x%2C%20x**2)%0Aplt.gca()\n    \n\n\n    \n    \n    \n    \n    plt.plot(x%2C%20x**3)\n    \n\nTo build a figure over multiple cells, use the object-oriented API and create your own axis:\n\n    \n    \n    \n    \n    _%2C%20axis%20%3D%20plt.subplots()%0Aaxis.plot(x%2C%20x)%0Aaxis.plot(x%2C%20x**2)%0Aaxis\n    \n\n\n    \n    \n    \n    \n    axis.plot(x%2C%20x**3)%0Aaxis\n    \n\n\n\nDraw plots interactively by parametrizing them with UI elements.\n\n            \n            Visualizing powers.\n\n            \n            \n            exponent%20%3D%20mo.ui.slider(1%2C%205%2C%20value%3D1%2C%20step%3D1%2C%20label%3D'exponent')%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20**Visualizing%20powers.**%0A%0A%20%20%20%20%7Bexponent%7D%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n    \n    ||[f(x) = x||]\n    \n    \n    import%20functools%0A%0A%0A%40functools.cache%0Adef%20_plot(exponent)%3A%0A%20%20%20%20plt.plot(x%2C%20x**exponent)%0A%20%20%20%20return%20plt.gca()%0A%0A%0A_tex%20%3D%20(%0A%20%20%20%20f%22%24%24f(x)%20%3D%20x%5E%7Bexponent.value%7D%24%24%22%20if%20exponent.value%20%3E%201%20else%20%22%24%24f(x)%20%3D%20x%24%24%22%0A)%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%0A%20%20%20%20%7B_tex%7D%0A%0A%20%20%20%20%7Bmo.as_html(_plot(exponent.value))%7D%0A%20%20%20%20%22%22%22%0A)",
    "crumbs": [
      "Plots"
    ]
  },
  {
    "objectID": "plots.html#other-libraries",
    "href": "plots.html#other-libraries",
    "title": "Plots",
    "section": "",
    "text": "marimo also supports these other plotting libraries:\n\nPlotly\nSeaborn\nAltair\n\nJust output their figure objects as the last expression of a cell, or embed them in markdown with mo.as_html.\nIf you would like another library to be integrated into marimo, please get in touch.\n\n    \n    \n    \n    module_not_found_explainer%20%3D%20mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20%23%23%20Oops!%0A%0A%20%20%20%20It%20looks%20like%20you're%20missing%20a%20package%20that%20this%20tutorial%0A%20%20%20%20requires.%0A%0A%20%20%20%20Close%20marimo%2C%20install%20**%60numpy%60**%20and%20**%60matplotlib%60**%2C%20then%0A%20%20%20%20open%20this%20tutorial%20once%20more.%0A%0A%20%20%20%20If%20you%20use%20%60pip%60%2C%20run%0A%0A%20%20%20%20%60%60%60%0A%0A%0A%20%20%20%20pip%20install%20numpy%20matplotlib%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20at%20your%20command%20line.%0A%20%20%20%20%22%22%22%0A).callout(kind%3D'warn')%0A%0Adef%20check_dependencies()%3A%0A%20%20%20%20if%20missing_packages%3A%0A%20%20%20%20%20%20%20%20return%20module_not_found_explainer\n    \n\n\n    \n    \n    \n    plt_show_explainer%20%3D%20%7B%0A%20%20%20%20%22Using%20%60plt.show()%60%22%3A%20%22%22%22%0A%20%20%20%20You%20can%20use%20%60plt.show()%60%20or%20%60figure.show()%60%20to%20display%0A%20%20%20%20plots%20in%20the%20console%20area%20of%20a%20cell.%20Keep%20in%20mind%20that%20console%0A%20%20%20%20outputs%20are%20not%20shown%20in%20the%20app%20view.%0A%20%20%20%20%22%22%22%0A%7D\n    \n\n\n    \n    \n    \n    try%3A%0A%20%20%20%20import%20matplotlib%0A%20%20%20%20import%20matplotlib.pyplot%20as%20plt%0A%20%20%20%20import%20numpy%20as%20np%0A%20%20%20%20missing_packages%20%3D%20False%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20missing_packages%20%3D%20True%0A%0Aif%20not%20missing_packages%3A%0A%20%20%20%20matplotlib.rcParams%5B'figure.figsize'%5D%20%3D%20(6%2C%202.4)\n    \n\n\n    \n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Plots"
    ]
  },
  {
    "objectID": "island.html",
    "href": "island.html",
    "title": "Islands",
    "section": "",
    "text": "Islands\nIslands are a place of mystery and wonder. They are a place of isolation and beauty. They are a place of danger and adventure. They are a place of peace and tranquility. They are a place of life and death. They are a place of hope and despair. They are a place of love and hate. They are a place of light and darkness. They are a place of joy and sorrow. They are a place of truth and lies. They are a place of freedom and captivity. They are a place of dreams and nightmares. They are a place of reality and fantasy. They are a place of the past and the future. They are a place of the present and the eternal. They are a place of the known and the unknown. They are a place of the seen and the unseen. They are a place of the heard and the unheard. They are a place of the felt and the unfelt. They are a place of the tasted and the untasted. They are a place of the smelled and the unsmelled. They are a place of the touched and the untouched. They are a place of the loved and the unloved\n\n\nTODO\n\n\nhttps://quarto.org/docs/computations/execution-options.html\n\n    \n    \n    \n    %23%7C%20echo%3A%20true%0Aprint(%22Hello%2C%20World!%22)\n    \n\n\n    \n    \n    \n    print(%22Hello%2C%20World!%22)\n    \n\n\n    \n    Hello, World!\n    \n    \n    print(%22Hello%2C%20World!%22)%0A%22Hello%2C%20World!%22\n    \n\n\n\nBug with output in intro\n\n\nDo mimetypes\n\n\nFix dedent\n\n\nFix header\n\n\n\n\n\nOnce in\n\n\nintermediate\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Marimo Tutorial",
    "section": "",
    "text": "marimo is a reactive Python notebook.\n\n    \n    \n    \n    slider%20%3D%20mo.ui.slider(1%2C%2022)\n    \n\n\n            \n            This means that unlike traditional notebooks, marimo notebooks run\nautomatically when you modify them or\ninteract with UI elements, like this slider: .\n\n            \n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20This%20means%20that%20unlike%20traditional%20notebooks%2C%20marimo%20notebooks%20**run%0A%20%20%20%20automatically**%20when%20you%20modify%20them%20or%0A%20%20%20%20interact%20with%20UI%20elements%2C%20like%20this%20slider%3A%20%7Bslider%7D.%0A%0A%20%20%20%20%7B%22%23%23%22%20%2B%20%22%F0%9F%8D%83%22%20*%20slider.value%7D%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n    \n    \n    \n    \n    mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20Tip%3A%20This%20is%20a%20tutorial%20notebook.%20You%20can%20create%20your%20own%20notebooks%0A%20%20%20%20by%20entering%20%60marimo%20edit%60%20at%20the%20command%20line.%0A%20%20%20%20%22%22%22%0A).callout()\n    \n\n\n\nA marimo notebook is made up of small blocks of Python code called cells.\nmarimo reads your cells and models the dependencies among them: whenever a cell that defines a global variable is run, marimo automatically runs all cells that reference that variable.\nReactivity keeps your program state and outputs in sync with your code, making for a dynamic programming environment that prevents bugs before they happen.\n\n            \n            🌊 See it in action. In the next cell, change the value of the\nvariable  changed to True, then click the run button.\n            \n            \n            (%0A%20%20%20%20mo.md(%0A%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20**%E2%9C%A8%20Nice!**%20The%20value%20of%20%60changed%60%20is%20now%20%7Bchanged%7D.%0A%0A%20%20%20%20%20%20%20%20When%20you%20updated%20the%20value%20of%20the%20variable%20%60changed%60%2C%20marimo%0A%20%20%20%20%20%20%20%20**reacted**%20by%20running%20this%20cell%20automatically%2C%20because%20this%20cell%0A%20%20%20%20%20%20%20%20references%20the%20global%20variable%20%60changed%60.%0A%0A%20%20%20%20%20%20%20%20Reactivity%20ensures%20that%20your%20notebook%20state%20is%20always%0A%20%20%20%20%20%20%20%20consistent%2C%20which%20is%20crucial%20for%20doing%20good%20science%3B%20it's%20also%20what%0A%20%20%20%20%20%20%20%20enables%20marimo%20notebooks%20to%20double%20as%20tools%20and%20%20apps.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%0A%20%20%20%20if%20changed%0A%20%20%20%20else%20mo.md(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20**%F0%9F%8C%8A%20See%20it%20in%20action.**%20In%20the%20next%20cell%2C%20change%20the%20value%20of%20the%0A%20%20%20%20%20%20%20%20variable%20%20%60changed%60%20to%20%60True%60%2C%20then%20click%20the%20run%20button.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%0A)\n            \n        \n\n    \n    \n    \n    changed%20%3D%20False\n    \n\n\n            \n            The order of cells on the page has no bearing on\nthe order in which cells are executed: marimo knows that a cell\nreading a variable must run after the cell that  defines it. This\nfrees you to organize your code in the way that makes the most\nsense for you.\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20execution%20order%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20order%20of%20cells%20on%20the%20page%20has%20no%20bearing%20on%0A%20%20%20%20%20%20%20%20%20%20%20%20the%20order%20in%20which%20cells%20are%20executed%3A%20marimo%20knows%20that%20a%20cell%0A%20%20%20%20%20%20%20%20%20%20%20%20reading%20a%20variable%20must%20run%20after%20the%20cell%20that%20%20defines%20it.%20This%0A%20%20%20%20%20%20%20%20%20%20%20%20frees%20you%20to%20organize%20your%20code%20in%20the%20way%20that%20makes%20the%20most%0A%20%20%20%20%20%20%20%20%20%20%20%20sense%20for%20you.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \nGlobal names must be unique. To enable reactivity, marimo imposes a constraint on how names appear in cells: no two cells may define the same variable.\n\n            \n            By encapsulating logic in functions, classes, or Python modules,\nyou can minimize the number of global variables in your notebook.\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20encapsulation%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20By%20encapsulating%20logic%20in%20functions%2C%20classes%2C%20or%20Python%20modules%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20you%20can%20minimize%20the%20number%20of%20global%20variables%20in%20your%20notebook.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \n\n            \n            Variables prefixed with an underscore are \"private\" to a cell, so\nthey can be defined by multiple cells.\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20private%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Variables%20prefixed%20with%20an%20underscore%20are%20%22private%22%20to%20a%20cell%2C%20so%0A%20%20%20%20%20%20%20%20%20%20%20%20they%20can%20be%20defined%20by%20multiple%20cells.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \n\n\n\nCells can output interactive UI elements. Interacting with a UI element automatically triggers notebook execution: when you interact with a UI element, its value is sent back to Python, and every cell that references that element is re-run.\nmarimo provides a library of UI elements to choose from under marimo.ui.\n🌊 Some UI elements.** Try interacting with the below elements.\n\n    \n    \n    \n    icon%20%3D%20mo.ui.dropdown(%5B%22%F0%9F%8D%83%22%2C%20%22%F0%9F%8C%8A%22%2C%20%22%E2%9C%A8%22%5D%2C%20value%3D%22%F0%9F%8D%83%22)\n    \n\n\n    \n    \n    \n    repetitions%20%3D%20mo.ui.slider(1%2C%2016%2C%20label%3Df%22number%20of%20%7Bicon.value%7D%3A%20%22)\n    \n\n\n    \n    \n    \n    \n    icon%2C%20repetitions%2C%20icon\n    \n\n\n    \n    \n    \n    \n    icon%2Cicon\n    \n\n\n    \n    \n    \n    \n    repetitions\n    \n\n\n    \n    \n    \n    \n    mo.md(%22%23%20%22%20%2B%20icon.value%20*%20repetitions.value)\n    \n\n\n\n\nmarimo cells parse Python (and only Python), and marimo notebooks are stored as pure Python files — outputs are not included. There’s no magical syntax.\nThe Python files generated by marimo are:\n\neasily versioned with git, yielding minimal diffs\nlegible for both humans and machines\nformattable using your tool of choice,\nusable as Python scripts, with UI elements taking their default values, and\nimportable by other modules (more on that in the future).\n\n\n\n\nmarimo notebooks can double as apps. Click the app window icon in the bottom-left to see this notebook in “app view.”\nServe a notebook as an app with marimo run at the command-line. Of course, you can use marimo just to level-up your notebooking, without ever making apps.\n\n\n\nCreating and editing notebooks. Use\nmarimo edit\nin a terminal to create a new marimo notebook, or\nmarimo edit notebook.py\nto create/edit a notebook called notebook.py.\nRunning as apps. Use\nmarimo run notebook.py\nto start a webserver that serves your notebook as an app in read-only mode, with code cells hidden.\nConvert a Jupyter notebook. Convert a Jupyter notebook to a marimo notebook using marimo convert:\nmarimo convert your_notebook.ipynb &gt; your_app.py\nTutorials. marimo comes packaged with tutorials:\n\ndataflow: more on marimo’s automatic execution\nui: how to use UI elements\nmarkdown: how to write markdown, with interpolated values and LaTeX\nplots: how plotting works in marimo\nfileformat: how marimo’s file format works\n\nStart a tutorial with marimo tutorial; for example,\nmarimo tutorial dataflow\nIn addition to tutorials, we have examples in our our GitHub repo.\n\n\n\nHere are some tips to help you get started with the marimo editor.\n\n            \n            Saving\n\n\nName your app using the box at the top of the screen, or\n  with Ctrl/Cmd+s. You can also create a named app at the\n  command line, e.g., marimo edit app_name.py.\n\n\nSave by clicking the save icon on the bottom left, or by\n  inputting Ctrl/Cmd+s. By default marimo is configured\n  to autosave.\n\n\n\nRun a cell by clicking the play ( ▷ ) button on the bottom\nright of a cell, or by inputting Ctrl/Cmd+Enter.\n\n\nRun a stale cell  by clicking the yellow run button to the\nright of the cell, or by inputting Ctrl/Cmd+Enter. A cell is\nstale when its code has been modified but not run.\n\n\nRun all stale cells by clicking the play ( ▷ ) button on\nthe bottom right of the screen, or input Ctrl/Cmd+Shift+r.\n\nConsole output (e.g., print() statements) is shown below a\ncell.\n\nCreate a new cell above or below a given one by clicking\n    the plus button to the left of the cell, which appears on\n    mouse hover.\n\n\nMove a cell up or down by dragging on the handle to the\n    right of the cell, which appears on mouse hover.\n\n\nDelete a cell by clicking the trash bin icon. Bring it\n    back by clicking the undo button on the bottom right of the\n    screen, or with Ctrl/Cmd+Shift+z.\n\nYou can disable a cell via the cell context menu (open it\nby clicking the icon to the right of a cell). marimo will\nnever run a disabled cell or any cells that depend on it. This\ncan help prevent accidental execution of expensive computations\nwhen editing a notebook.You can collapse or fold the code in a cell by clicking the arrow\nicons in the line number column to the left, or by using keyboard\nshortcuts.\nUse the command palette (Ctrl/Cmd+k) or a keyboard shortcut to\nquickly fold or unfold all cells.If you have black installed, you can format a cell with\nthe keyboard shortcut Ctrl/Cmd+b.Use Ctrl/Cmd+k to open the command palette.Click the keyboard button on the bottom left of the screen (or\ninput Ctrl/Cmd+Shift+h) to view a list of all keyboard\nshortcuts.Configure the editor by clicking the gears icon near the top-right\nof the screen.\n            \n            \n            mo.accordion(tips)\n            \n        \n\n\n\nThe name “marimo” is a reference to a type of algae that, under the right conditions, clumps together to form a small sphere called a “marimo moss ball”. Made of just strands of algae, these beloved assemblages are greater than the sum of their parts.\n\n    \n    \n    \n    tips%20%3D%20%7B%0A%20%20%20%20%22Saving%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20**Saving**%0A%0A%20%20%20%20%20%20%20%20-%20_Name_%20your%20app%20using%20the%20box%20at%20the%20top%20of%20the%20screen%2C%20or%0A%20%20%20%20%20%20%20%20%20%20with%20%60Ctrl%2FCmd%2Bs%60.%20You%20can%20also%20create%20a%20named%20app%20at%20the%0A%20%20%20%20%20%20%20%20%20%20command%20line%2C%20e.g.%2C%20%60marimo%20edit%20app_name.py%60.%0A%0A%20%20%20%20%20%20%20%20-%20_Save_%20by%20clicking%20the%20save%20icon%20on%20the%20bottom%20left%2C%20or%20by%0A%20%20%20%20%20%20%20%20%20%20inputting%20%60Ctrl%2FCmd%2Bs%60.%20By%20default%20marimo%20is%20configured%0A%20%20%20%20%20%20%20%20%20%20to%20autosave.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Running%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%201.%20_Run%20a%20cell_%20by%20clicking%20the%20play%20(%20%E2%96%B7%20)%20button%20on%20the%20bottom%0A%20%20%20%20%20%20%20%20right%20of%20a%20cell%2C%20or%20by%20inputting%20%60Ctrl%2FCmd%2BEnter%60.%0A%0A%20%20%20%20%20%20%20%202.%20_Run%20a%20stale%20cell_%20%20by%20clicking%20the%20yellow%20run%20button%20to%20the%0A%20%20%20%20%20%20%20%20right%20of%20the%20cell%2C%20or%20by%20inputting%20%60Ctrl%2FCmd%2BEnter%60.%20A%20cell%20is%0A%20%20%20%20%20%20%20%20stale%20when%20its%20code%20has%20been%20modified%20but%20not%20run.%0A%0A%20%20%20%20%20%20%20%203.%20_Run%20all%20stale%20cells_%20by%20clicking%20the%20play%20(%20%E2%96%B7%20)%20button%20on%0A%20%20%20%20%20%20%20%20the%20bottom%20right%20of%20the%20screen%2C%20or%20input%20%60Ctrl%2FCmd%2BShift%2Br%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Console%20Output%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Console%20output%20(e.g.%2C%20%60print()%60%20statements)%20is%20shown%20below%20a%0A%20%20%20%20%20%20%20%20cell.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Creating%2C%20Moving%2C%20and%20Deleting%20Cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%201.%20_Create_%20a%20new%20cell%20above%20or%20below%20a%20given%20one%20by%20clicking%0A%20%20%20%20%20%20%20%20%20%20%20%20the%20plus%20button%20to%20the%20left%20of%20the%20cell%2C%20which%20appears%20on%0A%20%20%20%20%20%20%20%20%20%20%20%20mouse%20hover.%0A%0A%20%20%20%20%20%20%20%202.%20_Move_%20a%20cell%20up%20or%20down%20by%20dragging%20on%20the%20handle%20to%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20right%20of%20the%20cell%2C%20which%20appears%20on%20mouse%20hover.%0A%0A%20%20%20%20%20%20%20%203.%20_Delete_%20a%20cell%20by%20clicking%20the%20trash%20bin%20icon.%20Bring%20it%0A%20%20%20%20%20%20%20%20%20%20%20%20back%20by%20clicking%20the%20undo%20button%20on%20the%20bottom%20right%20of%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20screen%2C%20or%20with%20%60Ctrl%2FCmd%2BShift%2Bz%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Disabling%20Cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20disable%20a%20cell%20via%20the%20cell%20context%20menu%20(open%20it%0A%20%20%20%20%20%20%20%20by%20clicking%20the%20icon%20to%20the%20right%20of%20a%20cell).%20marimo%20will%0A%20%20%20%20%20%20%20%20never%20run%20a%20disabled%20cell%20or%20any%20cells%20that%20depend%20on%20it.%20This%0A%20%20%20%20%20%20%20%20can%20help%20prevent%20accidental%20execution%20of%20expensive%20computations%0A%20%20%20%20%20%20%20%20when%20editing%20a%20notebook.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Code%20Folding%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20collapse%20or%20fold%20the%20code%20in%20a%20cell%20by%20clicking%20the%20arrow%0A%20%20%20%20%20%20%20%20icons%20in%20the%20line%20number%20column%20to%20the%20left%2C%20or%20by%20using%20keyboard%0A%20%20%20%20%20%20%20%20shortcuts.%0A%0A%20%20%20%20%20%20%20%20Use%20the%20command%20palette%20(%60Ctrl%2FCmd%2Bk%60)%20or%20a%20keyboard%20shortcut%20to%0A%20%20%20%20%20%20%20%20quickly%20fold%20or%20unfold%20all%20cells.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Code%20Formatting%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20If%20you%20have%20%5Bblack%5D(https%3A%2F%2Fgithub.com%2Fpsf%2Fblack)%20installed%2C%20you%20can%20format%20a%20cell%20with%0A%20%20%20%20%20%20%20%20the%20keyboard%20shortcut%20%60Ctrl%2FCmd%2Bb%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Command%20Palette%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Use%20%60Ctrl%2FCmd%2Bk%60%20to%20open%20the%20command%20palette.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Keyboard%20Shortcuts%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Click%20the%20keyboard%20button%20on%20the%20bottom%20left%20of%20the%20screen%20(or%0A%20%20%20%20%20%20%20%20input%20%60Ctrl%2FCmd%2BShift%2Bh%60)%20to%20view%20a%20list%20of%20all%20keyboard%0A%20%20%20%20%20%20%20%20shortcuts.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Configuration%22%3A%20(%0A%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20Configure%20the%20editor%20by%20clicking%20the%20gears%20icon%20near%20the%20top-right%0A%20%20%20%20%20%20%20of%20the%20screen.%0A%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%7D\n    \n\n\n    \n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Marimo Tutorial"
    ]
  },
  {
    "objectID": "intro.html#reactive-execution",
    "href": "intro.html#reactive-execution",
    "title": "Marimo Tutorial",
    "section": "",
    "text": "A marimo notebook is made up of small blocks of Python code called cells.\nmarimo reads your cells and models the dependencies among them: whenever a cell that defines a global variable is run, marimo automatically runs all cells that reference that variable.\nReactivity keeps your program state and outputs in sync with your code, making for a dynamic programming environment that prevents bugs before they happen.\n\n            \n            🌊 See it in action. In the next cell, change the value of the\nvariable  changed to True, then click the run button.\n            \n            \n            (%0A%20%20%20%20mo.md(%0A%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20**%E2%9C%A8%20Nice!**%20The%20value%20of%20%60changed%60%20is%20now%20%7Bchanged%7D.%0A%0A%20%20%20%20%20%20%20%20When%20you%20updated%20the%20value%20of%20the%20variable%20%60changed%60%2C%20marimo%0A%20%20%20%20%20%20%20%20**reacted**%20by%20running%20this%20cell%20automatically%2C%20because%20this%20cell%0A%20%20%20%20%20%20%20%20references%20the%20global%20variable%20%60changed%60.%0A%0A%20%20%20%20%20%20%20%20Reactivity%20ensures%20that%20your%20notebook%20state%20is%20always%0A%20%20%20%20%20%20%20%20consistent%2C%20which%20is%20crucial%20for%20doing%20good%20science%3B%20it's%20also%20what%0A%20%20%20%20%20%20%20%20enables%20marimo%20notebooks%20to%20double%20as%20tools%20and%20%20apps.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%0A%20%20%20%20if%20changed%0A%20%20%20%20else%20mo.md(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20**%F0%9F%8C%8A%20See%20it%20in%20action.**%20In%20the%20next%20cell%2C%20change%20the%20value%20of%20the%0A%20%20%20%20%20%20%20%20variable%20%20%60changed%60%20to%20%60True%60%2C%20then%20click%20the%20run%20button.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%0A)\n            \n        \n\n    \n    \n    \n    changed%20%3D%20False\n    \n\n\n            \n            The order of cells on the page has no bearing on\nthe order in which cells are executed: marimo knows that a cell\nreading a variable must run after the cell that  defines it. This\nfrees you to organize your code in the way that makes the most\nsense for you.\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20execution%20order%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20order%20of%20cells%20on%20the%20page%20has%20no%20bearing%20on%0A%20%20%20%20%20%20%20%20%20%20%20%20the%20order%20in%20which%20cells%20are%20executed%3A%20marimo%20knows%20that%20a%20cell%0A%20%20%20%20%20%20%20%20%20%20%20%20reading%20a%20variable%20must%20run%20after%20the%20cell%20that%20%20defines%20it.%20This%0A%20%20%20%20%20%20%20%20%20%20%20%20frees%20you%20to%20organize%20your%20code%20in%20the%20way%20that%20makes%20the%20most%0A%20%20%20%20%20%20%20%20%20%20%20%20sense%20for%20you.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \nGlobal names must be unique. To enable reactivity, marimo imposes a constraint on how names appear in cells: no two cells may define the same variable.\n\n            \n            By encapsulating logic in functions, classes, or Python modules,\nyou can minimize the number of global variables in your notebook.\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20encapsulation%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20By%20encapsulating%20logic%20in%20functions%2C%20classes%2C%20or%20Python%20modules%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20you%20can%20minimize%20the%20number%20of%20global%20variables%20in%20your%20notebook.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \n\n            \n            Variables prefixed with an underscore are \"private\" to a cell, so\nthey can be defined by multiple cells.\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20private%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Variables%20prefixed%20with%20an%20underscore%20are%20%22private%22%20to%20a%20cell%2C%20so%0A%20%20%20%20%20%20%20%20%20%20%20%20they%20can%20be%20defined%20by%20multiple%20cells.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)",
    "crumbs": [
      "Marimo Tutorial"
    ]
  },
  {
    "objectID": "intro.html#ui-elements",
    "href": "intro.html#ui-elements",
    "title": "Marimo Tutorial",
    "section": "",
    "text": "Cells can output interactive UI elements. Interacting with a UI element automatically triggers notebook execution: when you interact with a UI element, its value is sent back to Python, and every cell that references that element is re-run.\nmarimo provides a library of UI elements to choose from under marimo.ui.\n🌊 Some UI elements.** Try interacting with the below elements.\n\n    \n    \n    \n    icon%20%3D%20mo.ui.dropdown(%5B%22%F0%9F%8D%83%22%2C%20%22%F0%9F%8C%8A%22%2C%20%22%E2%9C%A8%22%5D%2C%20value%3D%22%F0%9F%8D%83%22)\n    \n\n\n    \n    \n    \n    repetitions%20%3D%20mo.ui.slider(1%2C%2016%2C%20label%3Df%22number%20of%20%7Bicon.value%7D%3A%20%22)\n    \n\n\n    \n    \n    \n    \n    icon%2C%20repetitions%2C%20icon\n    \n\n\n    \n    \n    \n    \n    icon%2Cicon\n    \n\n\n    \n    \n    \n    \n    repetitions\n    \n\n\n    \n    \n    \n    \n    mo.md(%22%23%20%22%20%2B%20icon.value%20*%20repetitions.value)",
    "crumbs": [
      "Marimo Tutorial"
    ]
  },
  {
    "objectID": "intro.html#marimo-is-just-python",
    "href": "intro.html#marimo-is-just-python",
    "title": "Marimo Tutorial",
    "section": "",
    "text": "marimo cells parse Python (and only Python), and marimo notebooks are stored as pure Python files — outputs are not included. There’s no magical syntax.\nThe Python files generated by marimo are:\n\neasily versioned with git, yielding minimal diffs\nlegible for both humans and machines\nformattable using your tool of choice,\nusable as Python scripts, with UI elements taking their default values, and\nimportable by other modules (more on that in the future).",
    "crumbs": [
      "Marimo Tutorial"
    ]
  },
  {
    "objectID": "intro.html#running-notebooks-as-apps",
    "href": "intro.html#running-notebooks-as-apps",
    "title": "Marimo Tutorial",
    "section": "",
    "text": "marimo notebooks can double as apps. Click the app window icon in the bottom-left to see this notebook in “app view.”\nServe a notebook as an app with marimo run at the command-line. Of course, you can use marimo just to level-up your notebooking, without ever making apps.",
    "crumbs": [
      "Marimo Tutorial"
    ]
  },
  {
    "objectID": "intro.html#the-marimo-command-line-tool",
    "href": "intro.html#the-marimo-command-line-tool",
    "title": "Marimo Tutorial",
    "section": "",
    "text": "Creating and editing notebooks. Use\nmarimo edit\nin a terminal to create a new marimo notebook, or\nmarimo edit notebook.py\nto create/edit a notebook called notebook.py.\nRunning as apps. Use\nmarimo run notebook.py\nto start a webserver that serves your notebook as an app in read-only mode, with code cells hidden.\nConvert a Jupyter notebook. Convert a Jupyter notebook to a marimo notebook using marimo convert:\nmarimo convert your_notebook.ipynb &gt; your_app.py\nTutorials. marimo comes packaged with tutorials:\n\ndataflow: more on marimo’s automatic execution\nui: how to use UI elements\nmarkdown: how to write markdown, with interpolated values and LaTeX\nplots: how plotting works in marimo\nfileformat: how marimo’s file format works\n\nStart a tutorial with marimo tutorial; for example,\nmarimo tutorial dataflow\nIn addition to tutorials, we have examples in our our GitHub repo.",
    "crumbs": [
      "Marimo Tutorial"
    ]
  },
  {
    "objectID": "intro.html#the-marimo-editor",
    "href": "intro.html#the-marimo-editor",
    "title": "Marimo Tutorial",
    "section": "",
    "text": "Here are some tips to help you get started with the marimo editor.\n\n            \n            Saving\n\n\nName your app using the box at the top of the screen, or\n  with Ctrl/Cmd+s. You can also create a named app at the\n  command line, e.g., marimo edit app_name.py.\n\n\nSave by clicking the save icon on the bottom left, or by\n  inputting Ctrl/Cmd+s. By default marimo is configured\n  to autosave.\n\n\n\nRun a cell by clicking the play ( ▷ ) button on the bottom\nright of a cell, or by inputting Ctrl/Cmd+Enter.\n\n\nRun a stale cell  by clicking the yellow run button to the\nright of the cell, or by inputting Ctrl/Cmd+Enter. A cell is\nstale when its code has been modified but not run.\n\n\nRun all stale cells by clicking the play ( ▷ ) button on\nthe bottom right of the screen, or input Ctrl/Cmd+Shift+r.\n\nConsole output (e.g., print() statements) is shown below a\ncell.\n\nCreate a new cell above or below a given one by clicking\n    the plus button to the left of the cell, which appears on\n    mouse hover.\n\n\nMove a cell up or down by dragging on the handle to the\n    right of the cell, which appears on mouse hover.\n\n\nDelete a cell by clicking the trash bin icon. Bring it\n    back by clicking the undo button on the bottom right of the\n    screen, or with Ctrl/Cmd+Shift+z.\n\nYou can disable a cell via the cell context menu (open it\nby clicking the icon to the right of a cell). marimo will\nnever run a disabled cell or any cells that depend on it. This\ncan help prevent accidental execution of expensive computations\nwhen editing a notebook.You can collapse or fold the code in a cell by clicking the arrow\nicons in the line number column to the left, or by using keyboard\nshortcuts.\nUse the command palette (Ctrl/Cmd+k) or a keyboard shortcut to\nquickly fold or unfold all cells.If you have black installed, you can format a cell with\nthe keyboard shortcut Ctrl/Cmd+b.Use Ctrl/Cmd+k to open the command palette.Click the keyboard button on the bottom left of the screen (or\ninput Ctrl/Cmd+Shift+h) to view a list of all keyboard\nshortcuts.Configure the editor by clicking the gears icon near the top-right\nof the screen.\n            \n            \n            mo.accordion(tips)",
    "crumbs": [
      "Marimo Tutorial"
    ]
  },
  {
    "objectID": "intro.html#finally-a-fun-fact",
    "href": "intro.html#finally-a-fun-fact",
    "title": "Marimo Tutorial",
    "section": "",
    "text": "The name “marimo” is a reference to a type of algae that, under the right conditions, clumps together to form a small sphere called a “marimo moss ball”. Made of just strands of algae, these beloved assemblages are greater than the sum of their parts.\n\n    \n    \n    \n    tips%20%3D%20%7B%0A%20%20%20%20%22Saving%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20**Saving**%0A%0A%20%20%20%20%20%20%20%20-%20_Name_%20your%20app%20using%20the%20box%20at%20the%20top%20of%20the%20screen%2C%20or%0A%20%20%20%20%20%20%20%20%20%20with%20%60Ctrl%2FCmd%2Bs%60.%20You%20can%20also%20create%20a%20named%20app%20at%20the%0A%20%20%20%20%20%20%20%20%20%20command%20line%2C%20e.g.%2C%20%60marimo%20edit%20app_name.py%60.%0A%0A%20%20%20%20%20%20%20%20-%20_Save_%20by%20clicking%20the%20save%20icon%20on%20the%20bottom%20left%2C%20or%20by%0A%20%20%20%20%20%20%20%20%20%20inputting%20%60Ctrl%2FCmd%2Bs%60.%20By%20default%20marimo%20is%20configured%0A%20%20%20%20%20%20%20%20%20%20to%20autosave.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Running%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%201.%20_Run%20a%20cell_%20by%20clicking%20the%20play%20(%20%E2%96%B7%20)%20button%20on%20the%20bottom%0A%20%20%20%20%20%20%20%20right%20of%20a%20cell%2C%20or%20by%20inputting%20%60Ctrl%2FCmd%2BEnter%60.%0A%0A%20%20%20%20%20%20%20%202.%20_Run%20a%20stale%20cell_%20%20by%20clicking%20the%20yellow%20run%20button%20to%20the%0A%20%20%20%20%20%20%20%20right%20of%20the%20cell%2C%20or%20by%20inputting%20%60Ctrl%2FCmd%2BEnter%60.%20A%20cell%20is%0A%20%20%20%20%20%20%20%20stale%20when%20its%20code%20has%20been%20modified%20but%20not%20run.%0A%0A%20%20%20%20%20%20%20%203.%20_Run%20all%20stale%20cells_%20by%20clicking%20the%20play%20(%20%E2%96%B7%20)%20button%20on%0A%20%20%20%20%20%20%20%20the%20bottom%20right%20of%20the%20screen%2C%20or%20input%20%60Ctrl%2FCmd%2BShift%2Br%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Console%20Output%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Console%20output%20(e.g.%2C%20%60print()%60%20statements)%20is%20shown%20below%20a%0A%20%20%20%20%20%20%20%20cell.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Creating%2C%20Moving%2C%20and%20Deleting%20Cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%201.%20_Create_%20a%20new%20cell%20above%20or%20below%20a%20given%20one%20by%20clicking%0A%20%20%20%20%20%20%20%20%20%20%20%20the%20plus%20button%20to%20the%20left%20of%20the%20cell%2C%20which%20appears%20on%0A%20%20%20%20%20%20%20%20%20%20%20%20mouse%20hover.%0A%0A%20%20%20%20%20%20%20%202.%20_Move_%20a%20cell%20up%20or%20down%20by%20dragging%20on%20the%20handle%20to%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20right%20of%20the%20cell%2C%20which%20appears%20on%20mouse%20hover.%0A%0A%20%20%20%20%20%20%20%203.%20_Delete_%20a%20cell%20by%20clicking%20the%20trash%20bin%20icon.%20Bring%20it%0A%20%20%20%20%20%20%20%20%20%20%20%20back%20by%20clicking%20the%20undo%20button%20on%20the%20bottom%20right%20of%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20screen%2C%20or%20with%20%60Ctrl%2FCmd%2BShift%2Bz%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Disabling%20Cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20disable%20a%20cell%20via%20the%20cell%20context%20menu%20(open%20it%0A%20%20%20%20%20%20%20%20by%20clicking%20the%20icon%20to%20the%20right%20of%20a%20cell).%20marimo%20will%0A%20%20%20%20%20%20%20%20never%20run%20a%20disabled%20cell%20or%20any%20cells%20that%20depend%20on%20it.%20This%0A%20%20%20%20%20%20%20%20can%20help%20prevent%20accidental%20execution%20of%20expensive%20computations%0A%20%20%20%20%20%20%20%20when%20editing%20a%20notebook.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Code%20Folding%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20collapse%20or%20fold%20the%20code%20in%20a%20cell%20by%20clicking%20the%20arrow%0A%20%20%20%20%20%20%20%20icons%20in%20the%20line%20number%20column%20to%20the%20left%2C%20or%20by%20using%20keyboard%0A%20%20%20%20%20%20%20%20shortcuts.%0A%0A%20%20%20%20%20%20%20%20Use%20the%20command%20palette%20(%60Ctrl%2FCmd%2Bk%60)%20or%20a%20keyboard%20shortcut%20to%0A%20%20%20%20%20%20%20%20quickly%20fold%20or%20unfold%20all%20cells.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Code%20Formatting%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20If%20you%20have%20%5Bblack%5D(https%3A%2F%2Fgithub.com%2Fpsf%2Fblack)%20installed%2C%20you%20can%20format%20a%20cell%20with%0A%20%20%20%20%20%20%20%20the%20keyboard%20shortcut%20%60Ctrl%2FCmd%2Bb%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Command%20Palette%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Use%20%60Ctrl%2FCmd%2Bk%60%20to%20open%20the%20command%20palette.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Keyboard%20Shortcuts%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Click%20the%20keyboard%20button%20on%20the%20bottom%20left%20of%20the%20screen%20(or%0A%20%20%20%20%20%20%20%20input%20%60Ctrl%2FCmd%2BShift%2Bh%60)%20to%20view%20a%20list%20of%20all%20keyboard%0A%20%20%20%20%20%20%20%20shortcuts.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Configuration%22%3A%20(%0A%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20Configure%20the%20editor%20by%20clicking%20the%20gears%20icon%20near%20the%20top-right%0A%20%20%20%20%20%20%20of%20the%20screen.%0A%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%7D\n    \n\n\n    \n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Marimo Tutorial"
    ]
  },
  {
    "objectID": "ui.html",
    "href": "ui.html",
    "title": "UI Elements",
    "section": "",
    "text": "One of marimo’s most powerful features is its first-class support for interactive user interface (UI) elements: interacting with a UI element will automatically run cells that reference it.\n\n\n\n            \n            The marimo.ui module has a library of pre-built elements.\nFor example, here's a slider: \n            \n            \n            slider%20%3D%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D1)%0Aslider%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20%60marimo.ui%60%20module%20has%20a%20library%20of%20pre-built%20elements.%0A%0A%20%20%20%20For%20example%2C%20here's%20a%20%60slider%60%3A%20%7Bslider%7D%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n    \n    and here's its value: 1.\n    \n    \n    mo.md(f%22and%20here's%20its%20value%3A%20**%7Bslider.value%7D**.%22)\n    \n\n\n\nWhenever you interact with a UI element, its value is sent back to Python. When this happens, all cells that reference the global variable bound to the UI element, but don’t define it, will run.\nThis simple rule lets you use UI elements to drive the execution of your program, letting you build interactive notebooks and tools for yourselves and others.\n\n            \n            Interacting with a displayed UI element will only \ntrigger reactive execution if the UI element is assigned\nto a global variable.Every UI element has a value attribute that you can access in \nPython.You can embed UI elements in markdown using f-strings.\nFor example, we can render the slider here: \n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20assign%20UI%20elements%20to%20global%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Interacting%20with%20a%20displayed%20UI%20element%20will%20only%20%0A%20%20%20%20%20%20%20%20%20%20%20%20trigger%20reactive%20execution%20if%20the%20UI%20element%20is%20assigned%0A%20%20%20%20%20%20%20%20%20%20%20%20to%20a%20global%20variable.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20accessing%20an%20element's%20value%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Every%20UI%20element%20has%20a%20value%20attribute%20that%20you%20can%20access%20in%20%0A%20%20%20%20%20%20%20%20%20%20%20%20Python.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20embed%20UI%20elements%20in%20markdown%22%3A%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20You%20can%20embed%20UI%20elements%20in%20markdown%20using%20f-strings.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20For%20example%2C%20we%20can%20render%20the%20slider%20here%3A%20%7Bslider%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n            \n        \n\n\n\n\n    \n    marimo has a large library of simple UI elements: \n    \n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20marimo%20has%20a%20large%20library%20of%20simple%20UI%20elements%3A%20%7Bbasic_ui_elements%7D%0A%20%20%20%20%22%22%22%0A)\n    \n\n\n    \n    \n    \n    selected_element%20%3D%20construct_element(basic_ui_elements.value)%0Ashow_element(selected_element)\n    \n\n\n    \n    \n    \n    value(selected_element)\n    \n\n\n    \n    \n    \n    documentation(basic_ui_elements.value)\n    \n\n\n            \n            \nComposite elements are advanced elements \nlet you build UI elements out of other UI elements.\nUse these powerful elements to logically group together related elements, \ncreate a dynamic set of UI elements, or reduce the number of global \nvariables in your program.\nSelect a composite element: \n            \n            \n            mo.md(%0A%20%20%20%20f%22%22%22%23%23%23%20Composite%20elements%0A%0A%20%20%20%20Composite%20elements%20are%20advanced%20elements%20%0A%20%20%20%20let%20you%20build%20UI%20elements%20out%20of%20other%20UI%20elements.%0A%20%20%20%20Use%20these%20powerful%20elements%20to%20logically%20group%20together%20related%20elements%2C%20%0A%20%20%20%20create%20a%20dynamic%20set%20of%20UI%20elements%2C%20or%20reduce%20the%20number%20of%20global%20%0A%20%20%20%20variables%20in%20your%20program.%0A%0A%20%20%20%20Select%20a%20composite%20element%3A%20%7Bcomposite_elements%7D%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n    \n    \n    \n    composite_element%20%3D%20construct_element(composite_elements.value)%0Ashow_element(composite_element)\n    \n\n\n    \n    \n    \n    value(composite_element)\n    \n\n\n    \n    \n    \n    documentation(composite_elements.value)\n    \n\n\n\n\n\n\n    \n    \n    \n    \n    mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20**Heads%20up!**%0A%0A%20%20%20%20The%20rest%20of%20this%20tutorial%20covers%20state%2C%20an%20advanced%20topic.%20Feel%20free%0A%20%20%20%20to%20return%20here%20later%2C%20if%20or%20when%20you%20find%20yourself%0A%20%20%20%20limited%20in%20building%20interactive%20stateful%20apps.%0A%20%20%20%20%22%22%22%0A).callout(%22warn%22)\n    \n\nYou can build powerful interactive notebooks and apps using just mo.ui and reactivity.\nSometimes, however, you might want interactions to mutate state. Maybe you’re building a checklist, and you want to maintain a list of action items. Or maybe you want to tie two different UI elements, so that updating one updates the other.\nFor these and other cases, marimo provides the function mo.state, which creates state returns a getter function and a setter function. When you call the setter function in one cell, all other cells that reference the getter via a global variable are automatically run (similar to UI elements).\n\n            \n            def state(value: T, allow_self_loops: bool = False) -&gt; tuple[State[T],\n  Callable[[T], None]]: \n\nMutable reactive state\nThis function takes an initial value and returns:\n\na getter function that reads the state value\na setter function to set the state's value\n\nWhen you call the setter function and update the state value in one cell,\nall other cells that read any global variables assigned to the getter\nwill automatically run. By default, the cell that called the setter\nfunction won't be re-run, even if it references the getter; to allow a\nstate setter to possibly run the caller cell, use the keyword argument\nallow_self_loops=True.\nYou can use this function in conjunction with UIElement on_change\nhandlers to trigger side-effects when an element's value is updated. For\nexample, you can tie multiple UI elements to derive their values from\nshared state.\nBasic Usage.\nCreate state:\nget_count, set_count = mo.state(0)\n\nRead the value:\nget_count()\n\nUpdate the state:\nset_count(1)\n\nUpdate the state based on the current value:\nset_count(lambda value: value + 1)\n\nNote: Never mutate the state directly. You should only change its\nvalue through its setter.\nSynchronizing multiple UI elements.\nget_state, set_state = mo.state(0)\n\n# updating the state through the slider will recreate the number (below)\nslider = mo.ui.slider(0, 100, value=get_state(), on_change=set_state)\n\n# updating the state through the number will recreate the slider (above)\nnumber = mo.ui.number(0, 100, value=get_state(), on_change=set_state)\n\n# slider and number are synchronized to have the same value (try it!)\n[slider, number]\n\nWarning. Do not store marimo.ui elements in state; doing so can\nlead to hard-to-diagnose bugs.\nArgs:\n\nvalue: initial value of the state\nallow_self_loops: if True, if a cell calls a state setter\n  and also references its getter, the caller cell will be re-run;\n  defaults to False.\n\nReturns:\n\ngetter function that retrieves the state value\nsetter function that takes a new value, or a function taking the current\n  value as its argument and returning a new value\n\n            \n            \n            mo.accordion(%7B%22Documentation%20on%20%60mo.state%60%22%3A%20mo.doc(mo.state)%7D)\n            \n        \n\n\nmo.state takes an initial state value as its argument, and returns\n\na function that returns the state value;\na function that updates the state value.\n\nFor exaxmple,\nget_counter, set_counter = mo.state(0)\n\n    \n    \n    \n    get_counter%2C%20set_counter%20%3D%20mo.state(0)\n    \n\n\n            \n            Calling a state's setter function will only \ntrigger reactive execution if the corresponding getter is \nassigned to and referenced via a global variable.You can get far using just mo.ui, without state. That said,\njudiciously using state can simplify the implementation of highly \ninteractive notebooks/apps, and also enables new use cases.\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20assign%20state%20getters%20to%20global%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Calling%20a%20state's%20setter%20function%20will%20only%20%0A%20%20%20%20%20%20%20%20%20%20%20%20trigger%20reactive%20execution%20if%20the%20corresponding%20getter%20is%20%0A%20%20%20%20%20%20%20%20%20%20%20%20assigned%20to%20and%20referenced%20via%20a%20global%20variable.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20use%20state%20sparingly%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20You%20can%20get%20far%20using%20just%20%60mo.ui%60%2C%20without%20state.%20That%20said%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20judiciously%20using%20state%20can%20simplify%20the%20implementation%20of%20highly%20%0A%20%20%20%20%20%20%20%20%20%20%20%20interactive%20notebooks%2Fapps%2C%20and%20also%20enables%20new%20use%20cases.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n            \n        \n\n            \n            Access the value of the state via its getter: get_counter() \nreturned 0\n            \n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20Access%20the%20value%20of%20the%20state%20via%20its%20getter%3A%20%60get_counter()%60%20%0A%20%20%20%20returned%20**%7Bget_counter()%7D**%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n\n\nSet an element’s state by calling its setter function.\n\nCall it with a new value: set_counter(1)\nCall it with a function that takes the current value and returns a new one: set_counter(lambda count: count + 1)\n\nState updates are reactive. When you call a state’s setter in one cell, all other cells that reference the state getter via a global variable are automatically run with the new state value. This is similar to how interacting with a UI element automatically runs all cells that use the element.\nThe on_change callback. Every UI element takes an optional on_change callback, a function that takes the new value of the element and does anything with it. You can use the setter function in an on_change callback to mutate state.\n🌊 Try it! Click the button below and watch what happens.\n\n    \n    \n    \n    \n    increment%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22increment%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20set_counter(lambda%20v%3A%20v%20%2B%201)%2C%0A)%0A%0Adecrement%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22decrement%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20set_counter(lambda%20v%3A%20v%20-%201)%2C%0A)%0A%0Amo.hstack(%5Bincrement%2C%20decrement%5D%2C%20justify%3D%22center%22)\n    \n\n\n            \n            The counter's current value is 0!\nThis cell runs automatically on button click, even though it \ndoesn't reference either button. \n            \n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20counter's%20current%20value%20is%20**%7Bget_counter()%7D**!%0A%0A%20%20%20%20This%20cell%20runs%20automatically%20on%20button%20click%2C%20even%20though%20it%20%0A%20%20%20%20doesn't%20reference%20either%20button.%20%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n            \n            Calling a state's setter in one cell won't ever cause that same\ncell to re-execute, even if it reads that state getter. This \nprevents accidental infinite loops and makes some things, like\ntying elements, easier.\"\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20no%20self-loops%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Calling%20a%20state's%20setter%20in%20one%20cell%20won't%20ever%20cause%20that%20same%0A%20%20%20%20%20%20%20%20%20%20%20%20cell%20to%20re-execute%2C%20even%20if%20it%20reads%20that%20state%20getter.%20This%20%0A%20%20%20%20%20%20%20%20%20%20%20%20prevents%20accidental%20infinite%20loops%20and%20makes%20some%20things%2C%20like%0A%20%20%20%20%20%20%20%20%20%20%20%20tying%20elements%2C%20easier.%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \n\n\n\nUse state to tie two UI elements to the same value.\n\n    \n    \n    \n    get_shared_state%2C%20set_shared_state%20%3D%20mo.state(0)\n    \n\n\n    \n    \n    \n    x%20%3D%20mo.ui.slider(%0A%20%20%20%200%2C%0A%20%20%20%2010%2C%0A%20%20%20%20value%3Dget_shared_state()%2C%0A%20%20%20%20on_change%3Dset_shared_state%2C%0A%20%20%20%20label%3D%22%24x%24%3A%22%2C%0A)\n    \n\n\n    \n    \n    \n    x_plus_one%20%3D%20mo.ui.number(%0A%20%20%20%201%2C%0A%20%20%20%2011%2C%0A%20%20%20%20value%3Dget_shared_state()%20%2B%201%2C%0A%20%20%20%20on_change%3Dlambda%20v%3A%20set_shared_state(v%20-%201)%2C%0A%20%20%20%20label%3D%22%24x%20%2B%201%24%3A%22%2C%0A)\n    \n\n\n    \n    \n    \n    \n    %5Bx%2C%20x_plus_one%5D\n    \n\n\n            \n            To tie elements, you must mo.state, and the tied elements\nmust be created in different cells (since self-loops with state\nare not allowed).\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20tying%20elements%20and%20cycles%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20To%20tie%20elements%2C%20you%20must%20%60mo.state%60%2C%20and%20the%20tied%20elements%0A%20%20%20%20%20%20%20%20%20%20%20%20must%20be%20created%20in%20different%20cells%20(since%20self-loops%20with%20state%0A%20%20%20%20%20%20%20%20%20%20%20%20are%20not%20allowed).%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \n\n\n\n\n    \n    \n    \n    %40dataclass%0Aclass%20Task%3A%0A%20%20%20%20name%3A%20str%0A%20%20%20%20done%3A%20bool%20%3D%20False%0A%0Aget_tasks%2C%20set_tasks%20%3D%20mo.state(%5B%5D)%0Atask_list_mutated%2C%20set_task_list_mutated%20%3D%20mo.state(False)\n    \n\n\n    \n    \n    \n    task_list_mutated%0A%0Atask_entry_box%20%3D%20mo.ui.text(placeholder%3D%22a%20task%20...%22)\n    \n\n\n    \n    \n    \n    def%20add_task()%3A%0A%20%20%20%20if%20task_entry_box.value%3A%0A%20%20%20%20%20%20%20%20set_tasks(lambda%20v%3A%20v%20%2B%20%5BTask(task_entry_box.value)%5D)%0A%20%20%20%20%20%20%20%20set_task_list_mutated(True)%0A%0Adef%20clear_tasks()%3A%0A%20%20%20%20set_tasks(lambda%20v%3A%20%5Btask%20for%20task%20in%20v%20if%20not%20task.done%5D)%0A%20%20%20%20set_task_list_mutated(True)%0A%0Aadd_task_button%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22add%20task%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20add_task()%2C%0A)%0A%0Aclear_tasks_button%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22clear%20completed%20tasks%22%2C%20on_change%3Dlambda%20_%3A%20clear_tasks()%0A)\n    \n\n\n    \n    \n    \n    task_list%20%3D%20mo.ui.array(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.ui.checkbox(value%3Dtask.done%2C%20label%3Dtask.name)%0A%20%20%20%20%20%20%20%20for%20task%20in%20get_tasks()%0A%20%20%20%20%5D%2C%0A%20%20%20%20label%3D%22tasks%22%2C%0A%20%20%20%20on_change%3Dlambda%20v%3A%20set_tasks(%0A%20%20%20%20%20%20%20%20lambda%20tasks%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20Task(task.name%2C%20done%3Dv%5Bi%5D)%20for%20i%2C%20task%20in%20enumerate(tasks)%0A%20%20%20%20%20%20%20%20%5D%0A%20%20%20%20)%2C%0A)\n    \n\n\n    \n    \n    \n    \n    mo.hstack(%0A%20%20%20%20%5Btask_entry_box%2C%20add_task_button%2C%20clear_tasks_button%5D%2C%20justify%3D%22start%22%0A)\n    \n\n\n    \n    No tasks! 🎉\n    \n    \n    mo.as_html(task_list)%20if%20task_list.value%20else%20mo.md(%22No%20tasks!%20%F0%9F%8E%89%22)\n    \n\n\n\n\n\nThe remaining cells are helper data structures and functions. You can look at their code if you’re curious how certain parts of this tutorial were implemented.\n\n    \n    \n    \n    composite_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22batch%22%3A%20mo.ui.batch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dictionary%22%3A%20mo.ui.dictionary%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22form%22%3A%20mo.ui.form%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n    \n\n\n    \n    \n    \n    basic_ui_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22button%22%3A%20mo.ui.button%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22checkbox%22%3A%20mo.ui.checkbox%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22date%22%3A%20mo.ui.date%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dropdown%22%3A%20mo.ui.dropdown%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22file%22%3A%20mo.ui.file%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22multiselect%22%3A%20mo.ui.multiselect%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22number%22%3A%20mo.ui.number%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22radio%22%3A%20mo.ui.radio%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22switch%22%3A%20mo.ui.switch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22tabs%22%3A%20mo.ui.tabs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22table%22%3A%20mo.ui.table%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text_area%22%3A%20mo.ui.text_area%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n    \n\n\n    \n    \n    \n    %23force%20dedent%0A%0Adef%20construct_element(value)%3A%0A%20%20%20%20if%20value%20%3D%3D%20mo.ui.array%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text()%2C%20mo.ui.slider(1%2C%2010)%2C%20mo.ui.date()%5D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.batch%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Name%3A%20%7Bname%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Date%3A%20%7Bdate%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20).batch(name%3Dmo.ui.text()%2C%20date%3Dmo.ui.date())%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.button%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.button(%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3D0%2C%20label%3D%22click%20me%22%2C%20on_click%3Dlambda%20value%3A%20value%20%2B%201%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.checkbox%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.checkbox(label%3D%22check%20me%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.date%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.date()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dictionary%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dictionary(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider(1%2C%2010)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text(%22type%20something!%22)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mo.ui.button(value%3D0%2C%20on_click%3Dlambda%20v%3A%20v%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20_%20in%20range(3)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22buttons%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dropdown%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dropdown(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.file%3A%0A%20%20%20%20%20%20%20%20return%20%5Bmo.ui.file(kind%3D%22button%22)%2C%20mo.ui.file(kind%3D%22area%22)%5D%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.form%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area(placeholder%3D%22...%22).form()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.multiselect%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.multiselect(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.number%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.number(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.radio%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.radio(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D%2C%20value%3D%22a%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.slider%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.switch%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.switch()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.tabs%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.tabs(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%231%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Michael%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Scott%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%232%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Dwight%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Schrute%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.table%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.table(%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3D%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Michael%22%2C%20%22last_name%22%3A%20%22Scott%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Dwight%22%2C%20%22last_name%22%3A%20%22Schrute%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22Employees%22%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text_area%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area()%0A%20%20%20%20return%20None\n    \n\n\n    \n    \n    \n    %23%20Blash%0Adef%20show_element(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.hstack(%5Belement%5D%2C%20%22center%22)\n    \n\n\n    \n    \n    \n    %23%20Blash%0Adef%20value(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20v%20%3D%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20element.value%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20not%20isinstance(element%2C%20mo.ui.file)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%20element.name()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20element's%20current%20value%20is%20%7Bmo.as_html(element.value)%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)\n    \n\n\n    \n    \n    \n    %23%20Blash%0Adef%20documentation(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.accordion(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20f%22Documentation%20on%20%60mo.ui.%7Belement.__name__%7D%60%22%3A%20mo.doc(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)\n    \n\n\n    \n    \n    \n    from%20dataclasses%20import%20dataclass\n    \n\n\n    \n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "UI Elements"
    ]
  },
  {
    "objectID": "ui.html#marimo.ui",
    "href": "ui.html#marimo.ui",
    "title": "UI Elements",
    "section": "",
    "text": "The marimo.ui module has a library of pre-built elements.\nFor example, here's a slider: \n            \n            \n            slider%20%3D%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D1)%0Aslider%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20%60marimo.ui%60%20module%20has%20a%20library%20of%20pre-built%20elements.%0A%0A%20%20%20%20For%20example%2C%20here's%20a%20%60slider%60%3A%20%7Bslider%7D%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n    \n    and here's its value: 1.\n    \n    \n    mo.md(f%22and%20here's%20its%20value%3A%20**%7Bslider.value%7D**.%22)\n    \n\n\n\nWhenever you interact with a UI element, its value is sent back to Python. When this happens, all cells that reference the global variable bound to the UI element, but don’t define it, will run.\nThis simple rule lets you use UI elements to drive the execution of your program, letting you build interactive notebooks and tools for yourselves and others.\n\n            \n            Interacting with a displayed UI element will only \ntrigger reactive execution if the UI element is assigned\nto a global variable.Every UI element has a value attribute that you can access in \nPython.You can embed UI elements in markdown using f-strings.\nFor example, we can render the slider here: \n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20assign%20UI%20elements%20to%20global%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Interacting%20with%20a%20displayed%20UI%20element%20will%20only%20%0A%20%20%20%20%20%20%20%20%20%20%20%20trigger%20reactive%20execution%20if%20the%20UI%20element%20is%20assigned%0A%20%20%20%20%20%20%20%20%20%20%20%20to%20a%20global%20variable.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20accessing%20an%20element's%20value%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Every%20UI%20element%20has%20a%20value%20attribute%20that%20you%20can%20access%20in%20%0A%20%20%20%20%20%20%20%20%20%20%20%20Python.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20embed%20UI%20elements%20in%20markdown%22%3A%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20You%20can%20embed%20UI%20elements%20in%20markdown%20using%20f-strings.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20For%20example%2C%20we%20can%20render%20the%20slider%20here%3A%20%7Bslider%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n            \n        \n\n\n\n\n    \n    marimo has a large library of simple UI elements: \n    \n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20marimo%20has%20a%20large%20library%20of%20simple%20UI%20elements%3A%20%7Bbasic_ui_elements%7D%0A%20%20%20%20%22%22%22%0A)\n    \n\n\n    \n    \n    \n    selected_element%20%3D%20construct_element(basic_ui_elements.value)%0Ashow_element(selected_element)\n    \n\n\n    \n    \n    \n    value(selected_element)\n    \n\n\n    \n    \n    \n    documentation(basic_ui_elements.value)\n    \n\n\n            \n            \nComposite elements are advanced elements \nlet you build UI elements out of other UI elements.\nUse these powerful elements to logically group together related elements, \ncreate a dynamic set of UI elements, or reduce the number of global \nvariables in your program.\nSelect a composite element: \n            \n            \n            mo.md(%0A%20%20%20%20f%22%22%22%23%23%23%20Composite%20elements%0A%0A%20%20%20%20Composite%20elements%20are%20advanced%20elements%20%0A%20%20%20%20let%20you%20build%20UI%20elements%20out%20of%20other%20UI%20elements.%0A%20%20%20%20Use%20these%20powerful%20elements%20to%20logically%20group%20together%20related%20elements%2C%20%0A%20%20%20%20create%20a%20dynamic%20set%20of%20UI%20elements%2C%20or%20reduce%20the%20number%20of%20global%20%0A%20%20%20%20variables%20in%20your%20program.%0A%0A%20%20%20%20Select%20a%20composite%20element%3A%20%7Bcomposite_elements%7D%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n    \n    \n    \n    composite_element%20%3D%20construct_element(composite_elements.value)%0Ashow_element(composite_element)\n    \n\n\n    \n    \n    \n    value(composite_element)\n    \n\n\n    \n    \n    \n    documentation(composite_elements.value)",
    "crumbs": [
      "UI Elements"
    ]
  },
  {
    "objectID": "ui.html#state",
    "href": "ui.html#state",
    "title": "UI Elements",
    "section": "",
    "text": "mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20**Heads%20up!**%0A%0A%20%20%20%20The%20rest%20of%20this%20tutorial%20covers%20state%2C%20an%20advanced%20topic.%20Feel%20free%0A%20%20%20%20to%20return%20here%20later%2C%20if%20or%20when%20you%20find%20yourself%0A%20%20%20%20limited%20in%20building%20interactive%20stateful%20apps.%0A%20%20%20%20%22%22%22%0A).callout(%22warn%22)\n    \n\nYou can build powerful interactive notebooks and apps using just mo.ui and reactivity.\nSometimes, however, you might want interactions to mutate state. Maybe you’re building a checklist, and you want to maintain a list of action items. Or maybe you want to tie two different UI elements, so that updating one updates the other.\nFor these and other cases, marimo provides the function mo.state, which creates state returns a getter function and a setter function. When you call the setter function in one cell, all other cells that reference the getter via a global variable are automatically run (similar to UI elements).\n\n            \n            def state(value: T, allow_self_loops: bool = False) -&gt; tuple[State[T],\n  Callable[[T], None]]: \n\nMutable reactive state\nThis function takes an initial value and returns:\n\na getter function that reads the state value\na setter function to set the state's value\n\nWhen you call the setter function and update the state value in one cell,\nall other cells that read any global variables assigned to the getter\nwill automatically run. By default, the cell that called the setter\nfunction won't be re-run, even if it references the getter; to allow a\nstate setter to possibly run the caller cell, use the keyword argument\nallow_self_loops=True.\nYou can use this function in conjunction with UIElement on_change\nhandlers to trigger side-effects when an element's value is updated. For\nexample, you can tie multiple UI elements to derive their values from\nshared state.\nBasic Usage.\nCreate state:\nget_count, set_count = mo.state(0)\n\nRead the value:\nget_count()\n\nUpdate the state:\nset_count(1)\n\nUpdate the state based on the current value:\nset_count(lambda value: value + 1)\n\nNote: Never mutate the state directly. You should only change its\nvalue through its setter.\nSynchronizing multiple UI elements.\nget_state, set_state = mo.state(0)\n\n# updating the state through the slider will recreate the number (below)\nslider = mo.ui.slider(0, 100, value=get_state(), on_change=set_state)\n\n# updating the state through the number will recreate the slider (above)\nnumber = mo.ui.number(0, 100, value=get_state(), on_change=set_state)\n\n# slider and number are synchronized to have the same value (try it!)\n[slider, number]\n\nWarning. Do not store marimo.ui elements in state; doing so can\nlead to hard-to-diagnose bugs.\nArgs:\n\nvalue: initial value of the state\nallow_self_loops: if True, if a cell calls a state setter\n  and also references its getter, the caller cell will be re-run;\n  defaults to False.\n\nReturns:\n\ngetter function that retrieves the state value\nsetter function that takes a new value, or a function taking the current\n  value as its argument and returning a new value\n\n            \n            \n            mo.accordion(%7B%22Documentation%20on%20%60mo.state%60%22%3A%20mo.doc(mo.state)%7D)\n            \n        \n\n\nmo.state takes an initial state value as its argument, and returns\n\na function that returns the state value;\na function that updates the state value.\n\nFor exaxmple,\nget_counter, set_counter = mo.state(0)\n\n    \n    \n    \n    get_counter%2C%20set_counter%20%3D%20mo.state(0)\n    \n\n\n            \n            Calling a state's setter function will only \ntrigger reactive execution if the corresponding getter is \nassigned to and referenced via a global variable.You can get far using just mo.ui, without state. That said,\njudiciously using state can simplify the implementation of highly \ninteractive notebooks/apps, and also enables new use cases.\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20assign%20state%20getters%20to%20global%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Calling%20a%20state's%20setter%20function%20will%20only%20%0A%20%20%20%20%20%20%20%20%20%20%20%20trigger%20reactive%20execution%20if%20the%20corresponding%20getter%20is%20%0A%20%20%20%20%20%20%20%20%20%20%20%20assigned%20to%20and%20referenced%20via%20a%20global%20variable.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20use%20state%20sparingly%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20You%20can%20get%20far%20using%20just%20%60mo.ui%60%2C%20without%20state.%20That%20said%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20judiciously%20using%20state%20can%20simplify%20the%20implementation%20of%20highly%20%0A%20%20%20%20%20%20%20%20%20%20%20%20interactive%20notebooks%2Fapps%2C%20and%20also%20enables%20new%20use%20cases.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n            \n        \n\n            \n            Access the value of the state via its getter: get_counter() \nreturned 0\n            \n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20Access%20the%20value%20of%20the%20state%20via%20its%20getter%3A%20%60get_counter()%60%20%0A%20%20%20%20returned%20**%7Bget_counter()%7D**%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n\n\nSet an element’s state by calling its setter function.\n\nCall it with a new value: set_counter(1)\nCall it with a function that takes the current value and returns a new one: set_counter(lambda count: count + 1)\n\nState updates are reactive. When you call a state’s setter in one cell, all other cells that reference the state getter via a global variable are automatically run with the new state value. This is similar to how interacting with a UI element automatically runs all cells that use the element.\nThe on_change callback. Every UI element takes an optional on_change callback, a function that takes the new value of the element and does anything with it. You can use the setter function in an on_change callback to mutate state.\n🌊 Try it! Click the button below and watch what happens.\n\n    \n    \n    \n    \n    increment%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22increment%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20set_counter(lambda%20v%3A%20v%20%2B%201)%2C%0A)%0A%0Adecrement%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22decrement%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20set_counter(lambda%20v%3A%20v%20-%201)%2C%0A)%0A%0Amo.hstack(%5Bincrement%2C%20decrement%5D%2C%20justify%3D%22center%22)\n    \n\n\n            \n            The counter's current value is 0!\nThis cell runs automatically on button click, even though it \ndoesn't reference either button. \n            \n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20counter's%20current%20value%20is%20**%7Bget_counter()%7D**!%0A%0A%20%20%20%20This%20cell%20runs%20automatically%20on%20button%20click%2C%20even%20though%20it%20%0A%20%20%20%20doesn't%20reference%20either%20button.%20%0A%20%20%20%20%22%22%22%0A)\n            \n        \n\n            \n            Calling a state's setter in one cell won't ever cause that same\ncell to re-execute, even if it reads that state getter. This \nprevents accidental infinite loops and makes some things, like\ntying elements, easier.\"\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20no%20self-loops%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Calling%20a%20state's%20setter%20in%20one%20cell%20won't%20ever%20cause%20that%20same%0A%20%20%20%20%20%20%20%20%20%20%20%20cell%20to%20re-execute%2C%20even%20if%20it%20reads%20that%20state%20getter.%20This%20%0A%20%20%20%20%20%20%20%20%20%20%20%20prevents%20accidental%20infinite%20loops%20and%20makes%20some%20things%2C%20like%0A%20%20%20%20%20%20%20%20%20%20%20%20tying%20elements%2C%20easier.%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \n\n\n\nUse state to tie two UI elements to the same value.\n\n    \n    \n    \n    get_shared_state%2C%20set_shared_state%20%3D%20mo.state(0)\n    \n\n\n    \n    \n    \n    x%20%3D%20mo.ui.slider(%0A%20%20%20%200%2C%0A%20%20%20%2010%2C%0A%20%20%20%20value%3Dget_shared_state()%2C%0A%20%20%20%20on_change%3Dset_shared_state%2C%0A%20%20%20%20label%3D%22%24x%24%3A%22%2C%0A)\n    \n\n\n    \n    \n    \n    x_plus_one%20%3D%20mo.ui.number(%0A%20%20%20%201%2C%0A%20%20%20%2011%2C%0A%20%20%20%20value%3Dget_shared_state()%20%2B%201%2C%0A%20%20%20%20on_change%3Dlambda%20v%3A%20set_shared_state(v%20-%201)%2C%0A%20%20%20%20label%3D%22%24x%20%2B%201%24%3A%22%2C%0A)\n    \n\n\n    \n    \n    \n    \n    %5Bx%2C%20x_plus_one%5D\n    \n\n\n            \n            To tie elements, you must mo.state, and the tied elements\nmust be created in different cells (since self-loops with state\nare not allowed).\n            \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20tying%20elements%20and%20cycles%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20To%20tie%20elements%2C%20you%20must%20%60mo.state%60%2C%20and%20the%20tied%20elements%0A%20%20%20%20%20%20%20%20%20%20%20%20must%20be%20created%20in%20different%20cells%20(since%20self-loops%20with%20state%0A%20%20%20%20%20%20%20%20%20%20%20%20are%20not%20allowed).%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n            \n        \n\n\n\n\n    \n    \n    \n    %40dataclass%0Aclass%20Task%3A%0A%20%20%20%20name%3A%20str%0A%20%20%20%20done%3A%20bool%20%3D%20False%0A%0Aget_tasks%2C%20set_tasks%20%3D%20mo.state(%5B%5D)%0Atask_list_mutated%2C%20set_task_list_mutated%20%3D%20mo.state(False)\n    \n\n\n    \n    \n    \n    task_list_mutated%0A%0Atask_entry_box%20%3D%20mo.ui.text(placeholder%3D%22a%20task%20...%22)\n    \n\n\n    \n    \n    \n    def%20add_task()%3A%0A%20%20%20%20if%20task_entry_box.value%3A%0A%20%20%20%20%20%20%20%20set_tasks(lambda%20v%3A%20v%20%2B%20%5BTask(task_entry_box.value)%5D)%0A%20%20%20%20%20%20%20%20set_task_list_mutated(True)%0A%0Adef%20clear_tasks()%3A%0A%20%20%20%20set_tasks(lambda%20v%3A%20%5Btask%20for%20task%20in%20v%20if%20not%20task.done%5D)%0A%20%20%20%20set_task_list_mutated(True)%0A%0Aadd_task_button%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22add%20task%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20add_task()%2C%0A)%0A%0Aclear_tasks_button%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22clear%20completed%20tasks%22%2C%20on_change%3Dlambda%20_%3A%20clear_tasks()%0A)\n    \n\n\n    \n    \n    \n    task_list%20%3D%20mo.ui.array(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.ui.checkbox(value%3Dtask.done%2C%20label%3Dtask.name)%0A%20%20%20%20%20%20%20%20for%20task%20in%20get_tasks()%0A%20%20%20%20%5D%2C%0A%20%20%20%20label%3D%22tasks%22%2C%0A%20%20%20%20on_change%3Dlambda%20v%3A%20set_tasks(%0A%20%20%20%20%20%20%20%20lambda%20tasks%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20Task(task.name%2C%20done%3Dv%5Bi%5D)%20for%20i%2C%20task%20in%20enumerate(tasks)%0A%20%20%20%20%20%20%20%20%5D%0A%20%20%20%20)%2C%0A)\n    \n\n\n    \n    \n    \n    \n    mo.hstack(%0A%20%20%20%20%5Btask_entry_box%2C%20add_task_button%2C%20clear_tasks_button%5D%2C%20justify%3D%22start%22%0A)\n    \n\n\n    \n    No tasks! 🎉\n    \n    \n    mo.as_html(task_list)%20if%20task_list.value%20else%20mo.md(%22No%20tasks!%20%F0%9F%8E%89%22)",
    "crumbs": [
      "UI Elements"
    ]
  },
  {
    "objectID": "ui.html#appendix",
    "href": "ui.html#appendix",
    "title": "UI Elements",
    "section": "",
    "text": "The remaining cells are helper data structures and functions. You can look at their code if you’re curious how certain parts of this tutorial were implemented.\n\n    \n    \n    \n    composite_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22batch%22%3A%20mo.ui.batch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dictionary%22%3A%20mo.ui.dictionary%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22form%22%3A%20mo.ui.form%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n    \n\n\n    \n    \n    \n    basic_ui_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22button%22%3A%20mo.ui.button%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22checkbox%22%3A%20mo.ui.checkbox%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22date%22%3A%20mo.ui.date%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dropdown%22%3A%20mo.ui.dropdown%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22file%22%3A%20mo.ui.file%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22multiselect%22%3A%20mo.ui.multiselect%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22number%22%3A%20mo.ui.number%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22radio%22%3A%20mo.ui.radio%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22switch%22%3A%20mo.ui.switch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22tabs%22%3A%20mo.ui.tabs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22table%22%3A%20mo.ui.table%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text_area%22%3A%20mo.ui.text_area%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n    \n\n\n    \n    \n    \n    %23force%20dedent%0A%0Adef%20construct_element(value)%3A%0A%20%20%20%20if%20value%20%3D%3D%20mo.ui.array%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text()%2C%20mo.ui.slider(1%2C%2010)%2C%20mo.ui.date()%5D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.batch%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Name%3A%20%7Bname%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Date%3A%20%7Bdate%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20).batch(name%3Dmo.ui.text()%2C%20date%3Dmo.ui.date())%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.button%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.button(%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3D0%2C%20label%3D%22click%20me%22%2C%20on_click%3Dlambda%20value%3A%20value%20%2B%201%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.checkbox%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.checkbox(label%3D%22check%20me%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.date%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.date()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dictionary%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dictionary(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider(1%2C%2010)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text(%22type%20something!%22)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mo.ui.button(value%3D0%2C%20on_click%3Dlambda%20v%3A%20v%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20_%20in%20range(3)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22buttons%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dropdown%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dropdown(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.file%3A%0A%20%20%20%20%20%20%20%20return%20%5Bmo.ui.file(kind%3D%22button%22)%2C%20mo.ui.file(kind%3D%22area%22)%5D%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.form%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area(placeholder%3D%22...%22).form()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.multiselect%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.multiselect(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.number%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.number(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.radio%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.radio(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D%2C%20value%3D%22a%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.slider%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.switch%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.switch()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.tabs%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.tabs(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%231%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Michael%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Scott%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%232%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Dwight%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Schrute%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.table%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.table(%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3D%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Michael%22%2C%20%22last_name%22%3A%20%22Scott%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Dwight%22%2C%20%22last_name%22%3A%20%22Schrute%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22Employees%22%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text_area%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area()%0A%20%20%20%20return%20None\n    \n\n\n    \n    \n    \n    %23%20Blash%0Adef%20show_element(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.hstack(%5Belement%5D%2C%20%22center%22)\n    \n\n\n    \n    \n    \n    %23%20Blash%0Adef%20value(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20v%20%3D%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20element.value%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20not%20isinstance(element%2C%20mo.ui.file)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%20element.name()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20element's%20current%20value%20is%20%7Bmo.as_html(element.value)%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)\n    \n\n\n    \n    \n    \n    %23%20Blash%0Adef%20documentation(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.accordion(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20f%22Documentation%20on%20%60mo.ui.%7Belement.__name__%7D%60%22%3A%20mo.doc(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)\n    \n\n\n    \n    \n    \n    from%20dataclasses%20import%20dataclass\n    \n\n\n    \n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "UI Elements"
    ]
  }
]