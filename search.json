[
  {
    "objectID": "tutorials/for_jupyter_users.html",
    "href": "tutorials/for_jupyter_users.html",
    "title": "marimo for Jupyter users",
    "section": "",
    "text": "marimo for Jupyter users\nThis notebook explains important differences between Jupyter and marimo. If you‚Äôre familiar with Jupyter and are trying out marimo for the first time, read on!  ## Reactive execution\nThe biggest difference between marimo and Jupyter is reactive execution.\nTry updating the value of x in the next cell, then run it.\n\n    \n    0\n    \n    x%20%3D%200%3B%20x\n\n\n    \n    1\n    \n    y%20%3D%20x%20%2B%201%3B%20y\n\nmarimo ‚Äòreacts‚Äô to the change in x and automatically recalculates y!\nExplanation. marimo reads the code in your cells and understands the dependences between them, based on the variables that each cell declares and references. When you execute one cell, marimo automatically executes all other cells that depend on it, not unlike a spreadsheet.\nIn contrast, Jupyter requires you to manually run each cell.  ### Why?\nReactive execution frees you from the tedious task of manually re-running cells.\nIt also ensures that your code and outputs remain in sync:\n\nYou don‚Äôt have to worry about whether you forgot to re-run a cell.\nWhen you delete a cell, its variables are automatically removed from program memory. Affected cells are automatically invalidated.\n\nThis makes marimo notebooks as reproducible as regular Python scripts.  ## Interactive elements built-in\nmarimo comes with a large library of UI elements that are automatically synchronized with Python.\n\n    \n    \n    import%20marimo%20as%20mo\n\n\n    \n    \n    \n    slider%20%3D%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20label%3D%22%24x%24%22)%0Aslider\n\n\n    \n    1\n    \n    slider.value\n\nExplanation. marimo is both a notebook and a library. Import marimo as mo and use mo.ui to get access to powerful UI elements.\nUI elements assigned to variables are automatically plugged into marimo‚Äôs reactive execution model: interactions automatically trigger execution of cells that refer to them.\nIn contrast, Jupyter‚Äôs lack of reactivity makes IPyWidgets difficult to use.  ## Shareable as apps\nmarimo notebooks can be shared as read-only web apps: just serve it with\nmarimo run your_notebook.py\nat the command-line.\nNot every marimo notebook needs to be shared as an app, but marimo makes it seamless to do so if you want to. In this way, marimo works as a replacement for both Jupyter and Streamlit.  ## Cell order\nIn marimo, cells can be arranged in any order ‚Äî¬†marimo figures out the one true way to execute them based on variable declarations and references (in a ‚Äútopologically sorted‚Äù order)\n\n    \n    1\n    \n    z.value\n\n\n    \n    \n    \n    z%20%3D%20mo.ui.slider(1%2C%2010%2C%20label%3D%22%24z%24%22)%3B%20z\n\nThis lets you arrange your cells in the way that makes the most sense to you. For example, put helper functions and imports at the bottom of a notebook, like an appendix.\nIn contrast, Jupyter notebooks implicitly assume a top-to-bottom execution order.  ## Re-assigning variables\nmarimo disallows variable re-assignment. Here is something commonly done in Jupyter notebooks that cannot be done in marimo:\n\n    \n    ({'name': 'df', 'cells': ('BYtC',), 'type': 'multiple-defs'},)\n    \n    df%20%3D%200\n\n\n    \n    ({'name': 'df', 'cells': ('SFPL',), 'type': 'multiple-defs'},)\n    \n    df%20%3D%201\n\n\n    \n    [{'msg': \"This cell raised an exception: NameError('name 'df' is not defined')\", 'exception_type': 'NameError', 'raising_cell': None, 'type': 'exception'}]\n    \n    results%20%3D%20df.groupby(%5B%22my_column%22%5D).sum()\n\nExplanation. results depends on df, but which value of df should it use? Reactivity makes it impossible to answer this question in a sensible way, so marimo disallows variable reassignment.\nIf you run into this error, here are your options:\n\ncombine definitions into one cell\nprefix variables with an underscore (_df) to make them local to the cell\nwrap your code in functions, or give your variables more descriptive names  ## Markdown\n\nmarimo only has Python cells, but you can still write Markdown: import marimo as mo and use mo.md to write Markdown.\n\n    \n    The value of  is 1.\n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20value%20of%20%7Bslider%7D%20is%20%7Bslider.value%7D.%0A%20%20%20%20%22%22%22%0A)\n\nExplanation. By lifting Markdown into Python, marimo lets you construct dynamic Markdown parametrized by arbitrary Python elements. marimo knows how to render its own elements, and you can use mo.as_html to render other objects, like plots.\nTip: toggle a markdown view via Cmd/Ctrl-Shift-M in an empty cell.  ## Notebook files\nJupyter saves notebooks as JSON files, with outputs serialized in them. This is helpful as a record of your plots and other results, but makes notebooks difficult to version and reuse.\n\nmarimo notebooks are Python scripts\nmarimo notebooks are stored as pure Python scripts. This lets you version them with git, execute them with the command line, and re-use logic from one notebook in another.\n\n\nmarimo notebooks do not store outputs\nmarimo does not save your outputs in the file; if you want them saved, make sure to save them to disk with Python, or export to HTML via the notebook menu.\n\n\nmarimo notebooks are versionable with git\nmarimo is designed so that small changes in your code yield small git diffs!  ## Parting thoughts\nmarimo is a reinvention of the Python notebook as a reproducible, interactive, and shareable Python program, instead of an error-prone scratchpad.\nWe believe that the tools we use shape the way we think ‚Äî better tools, for better minds. With marimo, we hope to provide the Python community with a better programming environment to do research and communicate it; to experiment with code and share it; to learn computational science and teach it.\nThe marimo editor and library have many features not discussed here. Check out our docs to learn more!\nThis guide was adapted from Pluto for Jupyter users. We ‚ù§Ô∏è Pluto.jl!\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorials",
      "marimo for Jupyter users"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html",
    "href": "tutorials/markdown_format.html",
    "title": "Markdown",
    "section": "",
    "text": "Everything in marimo is pure Python, but sometimes, annotating your notebook in markdown can be a little cumbersome.  For example, here‚Äôs the code that rendered the above title and paragraph:\n```{.python.marimo}\nmo.md(\n    '''\n    # marimo in Markdown!\n\n    Everything in marimo is pure Python, but sometimes, annotating your notebook\n    in markdown can be a little cumbersome.\n    '''\n)\n```\nwith markdown notebook support for marimo, you can write and save markdown directly, and marimo will execute the necessary Python code for you behind the scenes. This allows you to focus on prose, and not formatting your text in a block string.  ## Python cells in markdown\nWhen you do need to create a Python cell in the markdown format, you can use a special code block:\n```{.python.marimo}\nimport matplotlib.pyplot as plt\nplt.plot([1, 2, 3, 4])\n```\nThis will create the following cell:\n\n    \n    \n    \n    import%20matplotlib.pyplot%20as%20plt%0Aplt.plot(%5B1%2C%202%2C%203%2C%204%5D)%0Aplt.gca()\n\nAs long as your code block contains the word python in a brace, like {.python.marimo}, or {.python note=\"Whatever you want\"}, marimo will treat it as a Python cell.  ## Exporting from Python\nDo you have a notebook that you think might better be suited for a markdown notebook? You can export your notebook to markdown by running the following code:\n$ marimo export md my_marimo.py &gt; my_marimo.md\nby default, marimo will extract your markdown cells, and wrap your Python cells in {.python.marimo} code blocks. Although {.python.marimo} might be more concise, this format is chosen such that code highlighting will work in your favourite IDE.  ## mo tricks and tips\nYou can break up markdown into multiple cells by using an empty html tag &lt;!----&gt;:  View the source of this notebook to see how this cell was created.  You can still hide and disable code cells in markdown notebooks:\n```{.python.marimo hide_code=\"true\"}\nimport pandas as pd\npd.DataFrame({'a': [1, 2, 3], 'b': [4, 5, 6]})\n```\n\n    \n    ab014125236\n    \n    import%20pandas%20as%20pd%0Apd.DataFrame(%7B'a'%3A%20%5B1%2C%202%2C%203%5D%2C%20'b'%3A%20%5B4%2C%205%2C%206%5D%7D)\n\n```{.python.marimo disabled=\"true\"}\nprint(\"This code cell is disabled, there should be no output!\")\n```\n\nAdditionally, marimo knows when your code has a syntax issue:\n```{.python.marimo}\nprint(\"This code cell has a syntax error\"\n```\nand on notebook save, will annotate the cell for you:\n```{.python.marimo unparseable=\"true\"}\nprint(\"This code cell has a syntax error\"\n```\n\n\n\nmarimo‚Äôs markdown support treats markdown as just plain old markdown. This means that trying to use string interpolation (like this f\"{'üçÉ' * 7}\") will just give you the raw string. This is a benefit, as you can clearly delineate what values are supposed to be computed, and what values are static;\nand there‚Äôs nothing stopping you from executing python to achieve the same effect,\n\n    \n    üçÉüçÉüçÉüçÉüçÉüçÉüçÉ\n    \n    '%F0%9F%8D%83'%20*%207\n\n\n\nWhenever you try to implement a cell block like this:\n```{.python.marimo}\nmo.md(\"This is a markdown cell\")\n```\nThe markdown format will know to automatically keep this as markdown. However, some ambiguous cases can‚Äôt be converted to markdown like this:\n\n            \n            This is a markdown cell with an execution block in it\n# To ambiguous to convert\n\n            \n            mo.md(%22%22%22%0A%20%20This%20is%20a%20markdown%20cell%20with%20an%20execution%20block%20in%20it%0A%20%20%60%60%60%7B.python.marimo%7D%0A%20%20%23%20To%20ambiguous%20to%20convert%0A%20%20%60%60%60%0A%20%20%22%22%22)\n        \nIt‚Äôs not likely that you‚Äôll run into this issue, but rest assured that marimo is working behind the scenes to keep your notebooks unambiguous and clean as possible.  ### More limitations\nSince the markdown notebook really is just markdown, you can‚Äôt import from a markdown notebook cells like you can in a python notebook; but you can still give your cells a name:\n```{.python.marimo name=\"maybe\"}\n# üéµ Hey, I just met you, and this is crazy\n```\n\n    \n    \n    %23%20But%20here's%20my%20%60cell_id%60%2C%20so%20call%20me%2C%20%60maybe%60%20%F0%9F%8E%B6\n\nyou can even run a notebook:\n$ marimo run my_marimo.md\nthe markdown format is supposed to lower the barrier for writing text heavy documents, it‚Äôs not meant to be a full replacement for the python notebook format. You can always convert back to a python notebook if you need to:\n$ marimo convert my_marimo.md &gt; my_marimo.py\n\n\n\n\n\nBe sure to checkout the markdown.py tutorial for more information on to type-set and render markdown in marimo.\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#limitations-of-the-markdown-format",
    "href": "tutorials/markdown_format.html#limitations-of-the-markdown-format",
    "title": "Markdown",
    "section": "",
    "text": "marimo‚Äôs markdown support treats markdown as just plain old markdown. This means that trying to use string interpolation (like this f\"{'üçÉ' * 7}\") will just give you the raw string. This is a benefit, as you can clearly delineate what values are supposed to be computed, and what values are static;\nand there‚Äôs nothing stopping you from executing python to achieve the same effect,\n\n    \n    üçÉüçÉüçÉüçÉüçÉüçÉüçÉ\n    \n    '%F0%9F%8D%83'%20*%207\n\n\n\nWhenever you try to implement a cell block like this:\n```{.python.marimo}\nmo.md(\"This is a markdown cell\")\n```\nThe markdown format will know to automatically keep this as markdown. However, some ambiguous cases can‚Äôt be converted to markdown like this:\n\n            \n            This is a markdown cell with an execution block in it\n# To ambiguous to convert\n\n            \n            mo.md(%22%22%22%0A%20%20This%20is%20a%20markdown%20cell%20with%20an%20execution%20block%20in%20it%0A%20%20%60%60%60%7B.python.marimo%7D%0A%20%20%23%20To%20ambiguous%20to%20convert%0A%20%20%60%60%60%0A%20%20%22%22%22)\n        \nIt‚Äôs not likely that you‚Äôll run into this issue, but rest assured that marimo is working behind the scenes to keep your notebooks unambiguous and clean as possible.  ### More limitations\nSince the markdown notebook really is just markdown, you can‚Äôt import from a markdown notebook cells like you can in a python notebook; but you can still give your cells a name:\n```{.python.marimo name=\"maybe\"}\n# üéµ Hey, I just met you, and this is crazy\n```\n\n    \n    \n    %23%20But%20here's%20my%20%60cell_id%60%2C%20so%20call%20me%2C%20%60maybe%60%20%F0%9F%8E%B6\n\nyou can even run a notebook:\n$ marimo run my_marimo.md\nthe markdown format is supposed to lower the barrier for writing text heavy documents, it‚Äôs not meant to be a full replacement for the python notebook format. You can always convert back to a python notebook if you need to:\n$ marimo convert my_marimo.md &gt; my_marimo.py",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown_format.html#more",
    "href": "tutorials/markdown_format.html#more",
    "title": "Markdown",
    "section": "",
    "text": "Be sure to checkout the markdown.py tutorial for more information on to type-set and render markdown in marimo.\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown.html",
    "href": "tutorials/markdown.html",
    "title": "Markdown",
    "section": "",
    "text": "Use marimo‚Äôs ‚Äúmd‚Äù function to embed rich text into your marimo apps. This function compiles Markdown into HTML that marimo can display.\nFor example, here‚Äôs the code that rendered the above title and paragraph:\nmo.md(\n    '''\n    # Hello, Markdown!\n\n    Use marimo's \"`md`\" function to embed rich text into your marimo\n    apps. This function compiles your Markdown into HTML that marimo\n    can display.\n    '''\n)\n\n\n\nYou can embed LaTeX in Markdown.\nFor example,\nmo.md(r'$f : \\mathbf{R} \\to \\mathbf{R}$')\nrenders \\(f : \\mathbf{R} \\to \\mathbf{R}\\), while\nmo.md(\n    r'''\n    \\[\n    f: \\mathbf{R} \\to \\mathbf{R}\n    \\]\n    '''\n)\nrenders the display math\n[ f: . ]\n\n    \n    Use r'' strings to remove the need to escape backslashes when writing LaTeX.\n    \n    mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20%60r''%60%20strings%22%3A%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22Use%20%60r''%60%20strings%20to%20remove%20the%20need%20to%20escape%20backslashes%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%20when%20writing%20LaTeX.%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n\n\n\n\nYou can interpolate Python values into markdown using f-strings and marimo‚Äôs as_html function. This lets you create markdown whose contents depend on data that changes at runtime.\nHere are some examples.\n\n            \n            \nA matplotlib figure:\n_x = np.linspace(start=0, stop=2*np.pi)\nsine_plot = plt.plot(_x, np.sin(_x))\nmo.md(f\"{mo.as_html(sine_plot)}\")\n\nyields\n\n            \n            def%20_sine_plot()%3A%0A%20%20%20%20if%20not%20numpy_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_numpy_msg%0A%20%20%20%20if%20not%20matplotlib_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_matplotlib_msg%0A%20%20%20%20_x%20%3D%20np.linspace(start%3D0%2C%20stop%3D2%20*%20np.pi)%0A%20%20%20%20plt.plot(_x%2C%20np.sin(_x))%0A%20%20%20%20return%20plt.gca()%0A%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%23%20Plots%0A%20%20%20%20A%20matplotlib%20figure%3A%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20_x%20%3D%20np.linspace(start%3D0%2C%20stop%3D2*np.pi)%0A%20%20%20%20sine_plot%20%3D%20plt.plot(_x%2C%20np.sin(_x))%0A%20%20%20%20mo.md(f%22%7B%7Bmo.as_html(sine_plot)%7D%7D%22)%0A%20%20%20%20%60%60%60%0A%20%20%20%20yields%0A%0A%20%20%20%20%7Bmo.as_html(_sine_plot())%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            \nA marimo.ui object:\nleaves = mo.ui.slider(1, 16, label=\"üçÉ: \")\nmo.md(f\"{leaves}\")\n\nyields\n\n            \n            leaves%20%3D%20mo.ui.slider(1%2C%2032%2C%20label%3D%22%F0%9F%8D%83%3A%20%22)%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%23%20UI%20elements%0A%0A%20%20%20%20A%20%60marimo.ui%60%20object%3A%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20leaves%20%3D%20mo.ui.slider(1%2C%2016%2C%20label%3D%22%F0%9F%8D%83%3A%20%22)%0A%20%20%20%20mo.md(f%22%7B%7Bleaves%7D%7D%22)%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20yields%0A%0A%20%20%20%20%7Bleaves%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    Your leaves: üçÉ\n    \n    mo.md(f%22Your%20leaves%3A%20%7B'%F0%9F%8D%83'%20*%20leaves.value%7D%22)\n\n\n            \n            marimo objects know how to format themselves, so you can omit the \ncall to as_html.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20UI%20elements%20can%20format%20themselves%22%3A%20%22%22%22%0A%20%20%20%20%20%20%20%20marimo%20objects%20know%20how%20to%20format%20themselves%2C%20so%20you%20can%20omit%20the%20%0A%20%20%20%20%20%20%20%20call%20to%20%60as_html%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%7D%0A)\n        \n\n            \n            \nUse mo.as_html to convert objects to HTML. This function\ngenerates rich HTML for many Python types, including:\n\nlists, dicts, and tuples,\npandas dataframes and series,\nseaborn figures,\nplotly figures, and\naltair figures.\n\nFor example, here's a pandas dataframe:\nxsin(x)00.0000000.000000e+0010.6981326.427876e-0121.3962639.848078e-0132.0943958.660254e-0142.7925273.420201e-0153.490659-3.420201e-0164.188790-8.660254e-0174.886922-9.848078e-0185.585054-6.427876e-0196.283185-2.449294e-16\n            \n            def%20make_dataframe()%3A%0A%20%20%20%20try%3A%0A%20%20%20%20%20%20%20%20import%20pandas%20as%20pd%0A%20%20%20%20except%20ModuleNotFoundError%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%22Oops!%20Looks%20like%20you%20don't%20have%20%60pandas%60%20installed.%22)%0A%0A%20%20%20%20if%20not%20numpy_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_numpy_msg%0A%0A%20%20%20%20x%20%3D%20np.linspace(0%2C%202%20*%20np.pi%2C%2010)%0A%20%20%20%20y%20%3D%20np.sin(x)%0A%20%20%20%20return%20pd.DataFrame(%7B%22x%22%3A%20x%2C%20%22sin(x)%22%3A%20y%7D)%0A%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%23%20Other%20objects%0A%0A%20%20%20%20Use%20%60mo.as_html%60%20to%20convert%20objects%20to%20HTML.%20This%20function%0A%20%20%20%20generates%20rich%20HTML%20for%20many%20Python%20types%2C%20including%3A%0A%0A%20%20%20%20-%20lists%2C%20dicts%2C%20and%20tuples%2C%0A%20%20%20%20-%20%60pandas%60%20dataframes%20and%20series%2C%0A%20%20%20%20-%20%60seaborn%60%20figures%2C%0A%20%20%20%20-%20%60plotly%60%20figures%2C%20and%0A%20%20%20%20-%20%60altair%60%20figures.%0A%0A%20%20%20%20For%20example%2C%20here's%20a%20pandas%20dataframe%3A%0A%0A%20%20%20%20%7Bmo.as_html(make_dataframe())%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            mo.as_html is only needed when interpolating objects into \nmarkdown; the last expression of a cell (its output) is \nconverted to HTML automatically.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20outputs%20are%20automatically%20converted%20to%20HTML%22%3A%20%22%22%22%0A%20%20%20%20%20%20%20%20%60mo.as_html%60%20is%20only%20needed%20when%20interpolating%20objects%20into%20%0A%20%20%20%20%20%20%20%20markdown%3B%20the%20last%20expression%20of%20a%20cell%20(its%20output)%20is%20%0A%20%20%20%20%20%20%20%20converted%20to%20HTML%20automatically.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%7D%0A)\n        \n\n\n\nHere‚Äôs a more interesting example that puts together everything we‚Äôve learned: rendering markdown with LaTeX that depends on the values of Python objects.\n\n    \n    \n    amplitude%20%3D%20mo.ui.slider(1%2C%202%2C%20step%3D0.1%2C%20label%3D%22amplitude%3A%20%22)%0Aperiod%20%3D%20mo.ui.slider(%0A%20%20%20%20math.pi%20%2F%204%2C%0A%20%20%20%204%20*%20math.pi%2C%0A%20%20%20%20value%3D2%20*%20math.pi%2C%0A%20%20%20%20step%3Dmath.pi%20%2F%208%2C%0A%20%20%20%20label%3D%22period%3A%20%22%2C%0A)\n\n\n    \n    \n    import%20functools%0A%0A%0A%40functools.cache%0Adef%20plotsin(amplitude%2C%20period)%3A%0A%20%20%20%20if%20not%20numpy_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_numpy_msg%0A%20%20%20%20elif%20not%20matplotlib_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_matplotlib_msg%0A%20%20%20%20x%20%3D%20np.linspace(0%2C%202%20*%20np.pi%2C%20256)%0A%20%20%20%20plt.plot(x%2C%20amplitude%20*%20np.sin(2%20*%20np.pi%20%2F%20period%20*%20x))%0A%20%20%20%20plt.ylim(-2.2%2C%202.2)%0A%20%20%20%20return%20plt.gca()\n\n\n            \n            A sin curve.\n\n\n\n\n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%0A%20%20%20%20%20%20**A%20sin%20curve.**%0A%0A%20%20%20%20%20%20-%20%7Bamplitude%7D%0A%20%20%20%20%20%20-%20%7Bperiod%7D%0A%20%20%20%20%20%20%22%22%22%0A)\n        \n\n            \n            You're viewing the graph of\n||[\nf(x) = 1.0\\sin((2\\pi/6.28)x),\n||]with ||(x||) ranging from ||(0||) to ||(2\\pi||).\n\n            \n            mo.md(%0A%20%20%20%20rf%22%22%22%0A%0A%20%20%20%20You're%20viewing%20the%20graph%20of%0A%0A%20%20%20%20%5C%5B%0A%20%20%20%20f(x)%20%3D%20%7Bamplitude.value%7D%5Csin((2%5Cpi%2F%7Bperiod.value%3A0.2f%7D)x)%2C%0A%20%20%20%20%5C%5D%0A%0A%20%20%20%20with%20%24x%24%20ranging%20from%20%240%24%20to%20%242%5Cpi%24.%0A%20%20%20%20%7Bmo.as_html(plotsin(amplitude.value%2C%20period.value))%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    \n    matplotlib_installed%20%3D%20False%0Anumpy_installed%20%3D%20False%0Amissing_numpy_msg%20%3D%20mo.md(%22Oops!%20Looks%20like%20you%20don't%20have%20%60numpy%60%20installed.%22)%0Amissing_matplotlib_msg%20%3D%20mo.md(%0A%20%20%20%20%22Oops!%20Looks%20like%20you%20don't%20have%20%60matplotlib%60%20installed.%22%0A)%0A%0Atry%3A%0A%20%20%20%20import%20matplotlib.pyplot%20as%20plt%0A%0A%20%20%20%20matplotlib_installed%20%3D%20True%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20pass%0A%0Atry%3A%0A%20%20%20%20import%20numpy%20as%20np%0A%0A%20%20%20%20numpy_installed%20%3D%20True%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20pass\n\n\n    \n    \n    import%20math%0A%0Aimport%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown.html#latex",
    "href": "tutorials/markdown.html#latex",
    "title": "Markdown",
    "section": "",
    "text": "You can embed LaTeX in Markdown.\nFor example,\nmo.md(r'$f : \\mathbf{R} \\to \\mathbf{R}$')\nrenders \\(f : \\mathbf{R} \\to \\mathbf{R}\\), while\nmo.md(\n    r'''\n    \\[\n    f: \\mathbf{R} \\to \\mathbf{R}\n    \\]\n    '''\n)\nrenders the display math\n[ f: . ]\n\n    \n    Use r'' strings to remove the need to escape backslashes when writing LaTeX.\n    \n    mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20%60r''%60%20strings%22%3A%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22Use%20%60r''%60%20strings%20to%20remove%20the%20need%20to%20escape%20backslashes%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%20when%20writing%20LaTeX.%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown.html#interpolating-python-values",
    "href": "tutorials/markdown.html#interpolating-python-values",
    "title": "Markdown",
    "section": "",
    "text": "You can interpolate Python values into markdown using f-strings and marimo‚Äôs as_html function. This lets you create markdown whose contents depend on data that changes at runtime.\nHere are some examples.\n\n            \n            \nA matplotlib figure:\n_x = np.linspace(start=0, stop=2*np.pi)\nsine_plot = plt.plot(_x, np.sin(_x))\nmo.md(f\"{mo.as_html(sine_plot)}\")\n\nyields\n\n            \n            def%20_sine_plot()%3A%0A%20%20%20%20if%20not%20numpy_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_numpy_msg%0A%20%20%20%20if%20not%20matplotlib_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_matplotlib_msg%0A%20%20%20%20_x%20%3D%20np.linspace(start%3D0%2C%20stop%3D2%20*%20np.pi)%0A%20%20%20%20plt.plot(_x%2C%20np.sin(_x))%0A%20%20%20%20return%20plt.gca()%0A%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%23%20Plots%0A%20%20%20%20A%20matplotlib%20figure%3A%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20_x%20%3D%20np.linspace(start%3D0%2C%20stop%3D2*np.pi)%0A%20%20%20%20sine_plot%20%3D%20plt.plot(_x%2C%20np.sin(_x))%0A%20%20%20%20mo.md(f%22%7B%7Bmo.as_html(sine_plot)%7D%7D%22)%0A%20%20%20%20%60%60%60%0A%20%20%20%20yields%0A%0A%20%20%20%20%7Bmo.as_html(_sine_plot())%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            \nA marimo.ui object:\nleaves = mo.ui.slider(1, 16, label=\"üçÉ: \")\nmo.md(f\"{leaves}\")\n\nyields\n\n            \n            leaves%20%3D%20mo.ui.slider(1%2C%2032%2C%20label%3D%22%F0%9F%8D%83%3A%20%22)%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%23%20UI%20elements%0A%0A%20%20%20%20A%20%60marimo.ui%60%20object%3A%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20leaves%20%3D%20mo.ui.slider(1%2C%2016%2C%20label%3D%22%F0%9F%8D%83%3A%20%22)%0A%20%20%20%20mo.md(f%22%7B%7Bleaves%7D%7D%22)%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20yields%0A%0A%20%20%20%20%7Bleaves%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    Your leaves: üçÉ\n    \n    mo.md(f%22Your%20leaves%3A%20%7B'%F0%9F%8D%83'%20*%20leaves.value%7D%22)\n\n\n            \n            marimo objects know how to format themselves, so you can omit the \ncall to as_html.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20UI%20elements%20can%20format%20themselves%22%3A%20%22%22%22%0A%20%20%20%20%20%20%20%20marimo%20objects%20know%20how%20to%20format%20themselves%2C%20so%20you%20can%20omit%20the%20%0A%20%20%20%20%20%20%20%20call%20to%20%60as_html%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%7D%0A)\n        \n\n            \n            \nUse mo.as_html to convert objects to HTML. This function\ngenerates rich HTML for many Python types, including:\n\nlists, dicts, and tuples,\npandas dataframes and series,\nseaborn figures,\nplotly figures, and\naltair figures.\n\nFor example, here's a pandas dataframe:\nxsin(x)00.0000000.000000e+0010.6981326.427876e-0121.3962639.848078e-0132.0943958.660254e-0142.7925273.420201e-0153.490659-3.420201e-0164.188790-8.660254e-0174.886922-9.848078e-0185.585054-6.427876e-0196.283185-2.449294e-16\n            \n            def%20make_dataframe()%3A%0A%20%20%20%20try%3A%0A%20%20%20%20%20%20%20%20import%20pandas%20as%20pd%0A%20%20%20%20except%20ModuleNotFoundError%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%22Oops!%20Looks%20like%20you%20don't%20have%20%60pandas%60%20installed.%22)%0A%0A%20%20%20%20if%20not%20numpy_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_numpy_msg%0A%0A%20%20%20%20x%20%3D%20np.linspace(0%2C%202%20*%20np.pi%2C%2010)%0A%20%20%20%20y%20%3D%20np.sin(x)%0A%20%20%20%20return%20pd.DataFrame(%7B%22x%22%3A%20x%2C%20%22sin(x)%22%3A%20y%7D)%0A%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%23%20Other%20objects%0A%0A%20%20%20%20Use%20%60mo.as_html%60%20to%20convert%20objects%20to%20HTML.%20This%20function%0A%20%20%20%20generates%20rich%20HTML%20for%20many%20Python%20types%2C%20including%3A%0A%0A%20%20%20%20-%20lists%2C%20dicts%2C%20and%20tuples%2C%0A%20%20%20%20-%20%60pandas%60%20dataframes%20and%20series%2C%0A%20%20%20%20-%20%60seaborn%60%20figures%2C%0A%20%20%20%20-%20%60plotly%60%20figures%2C%20and%0A%20%20%20%20-%20%60altair%60%20figures.%0A%0A%20%20%20%20For%20example%2C%20here's%20a%20pandas%20dataframe%3A%0A%0A%20%20%20%20%7Bmo.as_html(make_dataframe())%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            mo.as_html is only needed when interpolating objects into \nmarkdown; the last expression of a cell (its output) is \nconverted to HTML automatically.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20outputs%20are%20automatically%20converted%20to%20HTML%22%3A%20%22%22%22%0A%20%20%20%20%20%20%20%20%60mo.as_html%60%20is%20only%20needed%20when%20interpolating%20objects%20into%20%0A%20%20%20%20%20%20%20%20markdown%3B%20the%20last%20expression%20of%20a%20cell%20(its%20output)%20is%20%0A%20%20%20%20%20%20%20%20converted%20to%20HTML%20automatically.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%7D%0A)",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/markdown.html#putting-it-all-together",
    "href": "tutorials/markdown.html#putting-it-all-together",
    "title": "Markdown",
    "section": "",
    "text": "Here‚Äôs a more interesting example that puts together everything we‚Äôve learned: rendering markdown with LaTeX that depends on the values of Python objects.\n\n    \n    \n    amplitude%20%3D%20mo.ui.slider(1%2C%202%2C%20step%3D0.1%2C%20label%3D%22amplitude%3A%20%22)%0Aperiod%20%3D%20mo.ui.slider(%0A%20%20%20%20math.pi%20%2F%204%2C%0A%20%20%20%204%20*%20math.pi%2C%0A%20%20%20%20value%3D2%20*%20math.pi%2C%0A%20%20%20%20step%3Dmath.pi%20%2F%208%2C%0A%20%20%20%20label%3D%22period%3A%20%22%2C%0A)\n\n\n    \n    \n    import%20functools%0A%0A%0A%40functools.cache%0Adef%20plotsin(amplitude%2C%20period)%3A%0A%20%20%20%20if%20not%20numpy_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_numpy_msg%0A%20%20%20%20elif%20not%20matplotlib_installed%3A%0A%20%20%20%20%20%20%20%20return%20missing_matplotlib_msg%0A%20%20%20%20x%20%3D%20np.linspace(0%2C%202%20*%20np.pi%2C%20256)%0A%20%20%20%20plt.plot(x%2C%20amplitude%20*%20np.sin(2%20*%20np.pi%20%2F%20period%20*%20x))%0A%20%20%20%20plt.ylim(-2.2%2C%202.2)%0A%20%20%20%20return%20plt.gca()\n\n\n            \n            A sin curve.\n\n\n\n\n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%0A%20%20%20%20%20%20**A%20sin%20curve.**%0A%0A%20%20%20%20%20%20-%20%7Bamplitude%7D%0A%20%20%20%20%20%20-%20%7Bperiod%7D%0A%20%20%20%20%20%20%22%22%22%0A)\n        \n\n            \n            You're viewing the graph of\n||[\nf(x) = 1.0\\sin((2\\pi/6.28)x),\n||]with ||(x||) ranging from ||(0||) to ||(2\\pi||).\n\n            \n            mo.md(%0A%20%20%20%20rf%22%22%22%0A%0A%20%20%20%20You're%20viewing%20the%20graph%20of%0A%0A%20%20%20%20%5C%5B%0A%20%20%20%20f(x)%20%3D%20%7Bamplitude.value%7D%5Csin((2%5Cpi%2F%7Bperiod.value%3A0.2f%7D)x)%2C%0A%20%20%20%20%5C%5D%0A%0A%20%20%20%20with%20%24x%24%20ranging%20from%20%240%24%20to%20%242%5Cpi%24.%0A%20%20%20%20%7Bmo.as_html(plotsin(amplitude.value%2C%20period.value))%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    \n    matplotlib_installed%20%3D%20False%0Anumpy_installed%20%3D%20False%0Amissing_numpy_msg%20%3D%20mo.md(%22Oops!%20Looks%20like%20you%20don't%20have%20%60numpy%60%20installed.%22)%0Amissing_matplotlib_msg%20%3D%20mo.md(%0A%20%20%20%20%22Oops!%20Looks%20like%20you%20don't%20have%20%60matplotlib%60%20installed.%22%0A)%0A%0Atry%3A%0A%20%20%20%20import%20matplotlib.pyplot%20as%20plt%0A%0A%20%20%20%20matplotlib_installed%20%3D%20True%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20pass%0A%0Atry%3A%0A%20%20%20%20import%20numpy%20as%20np%0A%0A%20%20%20%20numpy_installed%20%3D%20True%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20pass\n\n\n    \n    \n    import%20math%0A%0Aimport%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Markdown"
    ]
  },
  {
    "objectID": "tutorials/fileformat.html",
    "href": "tutorials/fileformat.html",
    "title": "Fileformat",
    "section": "",
    "text": "marimo apps are stored as pure Python files.\nThese files are:\n\neasily versioned with git, producing small diffs\nlegible for both humans and machines\nformattable using your tool of choice\nusable as Python  scripts, with UI  elements taking their default values\n\n            \n            mo.md(intro)",
    "crumbs": [
      "Tutorials",
      "Fileformat"
    ]
  },
  {
    "objectID": "tutorials/fileformat.html#properties",
    "href": "tutorials/fileformat.html#properties",
    "title": "Fileformat",
    "section": "Properties",
    "text": "Properties\nmarimo‚Äôs file format was designed to be easy to read and easy to work with, while also serving the needs of the marimo library. You can even edit the generated file‚Äôs cells directly, using your favorite text editor, and format the file with your favorite code formatter.\nWe explain some properties of marimo‚Äôs file format below.\n\n            \n            In the dataflow tutorial, we saw that cells are like functions mapping \ntheir refs (the global  variables they uses but don't define) to their \ndefs (the global variables they define). The generated code makes this \nanalogy explicit.\nIn the generated code, there is a function for each cell. The arguments \nof  the function are the cell's refs , and its returned variables are \nits defs.\nFor example, the code\n@app.cell\ndef __(mo):\n    text = mo.ui.text(value=\"Hello, World!\")\n    text\n    return text,\n\nsays that the cell takes as input a variable called mo, and it creates\na global variable called text.\nIn contrast, the code\n@app.cell\ndef __():\n    import marimo as mo\n    return mo,\n\nsays that the cell doesn't depend on any other cells (its argument list \nis  empty), though it does create the variable mo which the previous \ncell requires as input.Cells are stored in the order that they are arranged in the marimo \neditor. So if you want to rearrange\nyour cells using your favorite text editor, just rearrange the\norder that they're defined in the file.marimo guarantees that however your source code was\nformatted in the marimo editor is exactly how it will be stored in\nthe generated code. For example, whitespace, line breaks, and so on are\nall preserved exactly. This means that you can touch up formatting in\nyour text editor, either manually or using automated formatters like \nBlack, and be confident that your changes will be preserved.If you want to, you can replace the default names for cell functions \nwith meaningful ones.\nFor example, change\n@app.cell\ndef __(text):\n    print(text.value)\n    return\n\nto \n@app.cell\ndef echo(text):\n    print(text.value)\n    return\n\nThis can make the generated code more readable.marimo's generated code is pure Python; no magical syntax.If when editing a cell, you forget to include all a cell's refs in its\nargument list, or all its defs in its returns, marimo will raise a \nhelpful error message the next time you try to open it in the marimo \neditor. So don't worry that you'll botch a cell's signature when editing \nit.At the top of the generated code, a variable named app is created. \nThis object collects the cells into a dataflow graph, using the cell \ndecorator. You can run marimo apps as scripts at the command line,\nusing Python. This will execute the cells in a\ntopologically sorted order, just as they would run if you opened the app \nwith marimo edit.\nFor example: running our example as a script would print Hello \nWorld! to the console.\n            \n            mo.accordion(properties)\n        \n\n    \n    \n    intro%20%3D%20%22%22%22%0A%23%20File%20Format%0A%0Amarimo%20apps%20are%20stored%20as%20pure%20Python%20files.%0A%0AThese%20files%20are%3A%0A%0A-%20easily%20versioned%20with%20git%2C%20producing%20small%20diffs%0A-%20legible%20for%20both%20humans%20and%20machines%0A-%20formattable%20using%20your%20tool%20of%20choice%0A-%20usable%20as%20Python%20%20scripts%2C%20with%20UI%20%20elements%20taking%20their%20default%20values%0A%22%22%22\n\n\n    \n    \n    file_contents%20%3D%20f%22%22%22%0A%20%20%20%20For%20the%20above%20example%2C%20marimo%20would%20generate%20the%20following%20file%20%0A%20%20%20%20contents%3A%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20import%20marimo%0A%0A%20%20%20%20__generated_with%20%3D%20%22%7Bmo.__version__%7D%22%0A%20%20%20%20app%20%3D%20marimo.App()%0A%0A%20%20%20%20%40app.cell%0A%20%20%20%20def%20__(text)%3A%0A%20%20%20%20%20%20%20%20print(text.value)%0A%20%20%20%20%20%20%20%20return%0A%0A%20%20%20%20%40app.cell%0A%20%20%20%20def%20__(mo)%3A%0A%20%20%20%20%20%20%20%20text%20%3D%20mo.ui.text(value%3D%22Hello%2C%20World!%22)%0A%20%20%20%20%20%20%20%20text%0A%20%20%20%20%20%20%20%20return%20text%2C%0A%0A%20%20%20%20%40app.cell%0A%20%20%20%20def%20__()%3A%0A%20%20%20%20%20%20%20%20import%20marimo%20as%20mo%0A%20%20%20%20%20%20%20%20return%20mo%2C%0A%0A%20%20%20%20if%20__name__%20%3D%3D%20%22__main__%22%3A%0A%20%20%20%20%20%20%20%20app.run()%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20As%20you%20can%20see%2C%20this%20is%20_pure%20Python_.%20This%20is%20part%20of%20the%20reason%20why%0A%20%20%20%20marimo's%20generated%20files%20are%20**git-friendly**%3A%20small%20changes%20made%20using%20%0A%20%20%20%20the%20marimo%20editor%20result%20in%20small%20changes%20to%20the%20file%20that%20marimo%20%0A%20%20%20%20generates.%0A%22%22%22\n\n\n    \n    \n    example_program%20%3D%20%22%22%22%0A%23%23%20Example%0A%0AConsider%20a%20marimo%20notebook%20with%20the%20following%20three%20cells.%0A%0AFirst%20cell%3A%0A%60%60%60python3%0Aprint(text.value)%0A%60%60%60%0A%0ASecond%20cell%3A%0A%60%60%60python3%0Atext%20%3D%20mo.ui.text(value%3D%22Hello%2C%20World!%22)%0Atext%0A%60%60%60%0A%0AThird%20cell%3A%0A%60%60%60python3%0Aimport%20marimo%20as%20mo%0A%60%60%60%0A%22%22%22\n\n\n    \n    \n    properties%20%3D%20%7B%0A%20%20%20%20%22Cells%20are%20functions%22%3A%20%22%22%22%0A%20%20%20%20In%20the%20%60dataflow%60%20tutorial%2C%20we%20saw%20that%20cells%20are%20like%20functions%20mapping%20%0A%20%20%20%20their%20refs%20(the%20global%20%20variables%20they%20uses%20but%20don't%20define)%20to%20their%20%0A%20%20%20%20defs%20(the%20global%20variables%20they%20define).%20The%20generated%20code%20makes%20this%20%0A%20%20%20%20analogy%20explicit.%0A%0A%20%20%20%20In%20the%20generated%20code%2C%20there%20is%20a%20function%20for%20each%20cell.%20The%20arguments%20%0A%20%20%20%20of%20%20the%20function%20are%20the%20cell's%20refs%20%2C%20and%20its%20returned%20variables%20are%20%0A%20%20%20%20its%20defs.%0A%0A%20%20%20%20For%20example%2C%20the%20code%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20%40app.cell%0A%20%20%20%20def%20__(mo)%3A%0A%20%20%20%20%20%20%20%20text%20%3D%20mo.ui.text(value%3D%22Hello%2C%20World!%22)%0A%20%20%20%20%20%20%20%20text%0A%20%20%20%20%20%20%20%20return%20text%2C%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20says%20that%20the%20cell%20takes%20as%20input%20a%20variable%20called%20%60mo%60%2C%20and%20it%20creates%0A%20%20%20%20a%20global%20variable%20called%20%60text%60.%0A%0A%20%20%20%20In%20contrast%2C%20the%20code%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20%40app.cell%0A%20%20%20%20def%20__()%3A%0A%20%20%20%20%20%20%20%20import%20marimo%20as%20mo%0A%20%20%20%20%20%20%20%20return%20mo%2C%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20says%20that%20the%20cell%20doesn't%20depend%20on%20any%20other%20cells%20(its%20argument%20list%20%0A%20%20%20%20is%20%20empty)%2C%20though%20it%20does%20create%20the%20variable%20%60mo%60%20which%20the%20previous%20%0A%20%20%20%20cell%20requires%20as%20input.%0A%20%20%20%20%22%22%22%2C%0A%20%20%20%20%22Cells%20are%20stored%20in%20presentation%20order%22%3A%20%22%22%22%0A%20%20%20%20Cells%20are%20stored%20in%20the%20order%20that%20they%20are%20arranged%20in%20the%20marimo%20%0A%20%20%20%20editor.%20So%20if%20you%20want%20to%20rearrange%0A%20%20%20%20your%20cells%20using%20your%20favorite%20text%20editor%2C%20just%20rearrange%20the%0A%20%20%20%20order%20that%20they're%20defined%20in%20the%20file.%0A%20%20%20%20%22%22%22%2C%0A%20%20%20%20%22Text%20formatting%20is%20preserved%22%3A%20%22%22%22%0A%20%20%20%20marimo%20guarantees%20that%20however%20your%20source%20code%20was%0A%20%20%20%20formatted%20in%20the%20marimo%20editor%20is%20exactly%20how%20it%20will%20be%20stored%20in%0A%20%20%20%20the%20generated%20code.%20For%20example%2C%20whitespace%2C%20line%20breaks%2C%20and%20so%20on%20are%0A%20%20%20%20all%20preserved%20exactly.%20This%20means%20that%20you%20can%20touch%20up%20formatting%20in%0A%20%20%20%20your%20text%20editor%2C%20either%20manually%20or%20using%20automated%20formatters%20like%20%0A%20%20%20%20Black%2C%20and%20be%20confident%20that%20your%20changes%20will%20be%20preserved.%0A%20%20%20%20%22%22%22%2C%0A%20%20%20%20%22Cell%20functions%20can%20have%20names%22%3A%20%22%22%22%0A%20%20%20%20If%20you%20want%20to%2C%20you%20can%20replace%20the%20default%20names%20for%20cell%20functions%20%0A%20%20%20%20with%20meaningful%20ones.%0A%0A%20%20%20%20For%20example%2C%20change%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20%40app.cell%0A%20%20%20%20def%20__(text)%3A%0A%20%20%20%20%20%20%20%20print(text.value)%0A%20%20%20%20%20%20%20%20return%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20to%20%0A%0A%20%20%20%20%60%60%60python3%0A%20%20%20%20%40app.cell%0A%20%20%20%20def%20echo(text)%3A%0A%20%20%20%20%20%20%20%20print(text.value)%0A%20%20%20%20%20%20%20%20return%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20This%20can%20make%20the%20generated%20code%20more%20readable.%0A%20%20%20%20%22%22%22%2C%0A%20%20%20%20%22No%20magical%20tokens%22%3A%20%22%22%22%0A%20%20%20%20marimo's%20generated%20code%20is%20pure%20Python%3B%20no%20magical%20syntax.%0A%20%20%20%20%22%22%22%2C%0A%20%20%20%20%22Helpful%20error%20messages%22%3A%20%22%22%22%0A%20%20%20%20If%20when%20editing%20a%20cell%2C%20you%20forget%20to%20include%20all%20a%20cell's%20refs%20in%20its%0A%20%20%20%20argument%20list%2C%20or%20all%20its%20defs%20in%20its%20returns%2C%20marimo%20will%20raise%20a%20%0A%20%20%20%20helpful%20error%20message%20the%20next%20time%20you%20try%20to%20open%20it%20in%20the%20marimo%20%0A%20%20%20%20editor.%20So%20don't%20worry%20that%20you'll%20botch%20a%20cell's%20signature%20when%20editing%20%0A%20%20%20%20it.%0A%20%20%20%20%22%22%22%2C%0A%20%20%20%20%22The%20%60app%60%20object%22%3A%20%22%22%22%0A%20%20%20%20At%20the%20top%20of%20the%20generated%20code%2C%20a%20variable%20named%20%60app%60%20is%20created.%20%0A%20%20%20%20This%20object%20collects%20the%20cells%20into%20a%20dataflow%20graph%2C%20using%20the%20%60cell%60%20%0A%20%20%20%20decorator.%20%0A%20%20%20%20%22%22%22%2C%0A%20%20%20%20%22Runnable%20as%20a%20script%22%3A%20%22%22%22%0A%20%20%20%20You%20can%20run%20marimo%20apps%20as%20scripts%20at%20the%20command%20line%2C%0A%20%20%20%20using%20Python.%20This%20will%20execute%20the%20cells%20in%20a%0A%20%20%20%20topologically%20sorted%20order%2C%20just%20as%20they%20would%20run%20if%20you%20opened%20the%20app%20%0A%20%20%20%20with%20%60marimo%20edit%60.%0A%0A%20%20%20%20For%20example%3A%20running%20our%20example%20as%20a%20script%20would%20print%20%60Hello%20%0A%20%20%20%20World!%60%20to%20the%20console.%0A%20%20%20%20%22%22%22%2C%0A%7D\n\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Fileformat"
    ]
  },
  {
    "objectID": "tutorials/index.html",
    "href": "tutorials/index.html",
    "title": "marimo tutorials",
    "section": "",
    "text": "Open a tutorial.\nmarimo is a powerful library for making reactive notebooks and apps. To get the most out of marimo, get started with a few tutorials, starting with the intro:\n    marimo tutorial intro\nRecommended sequence:\n\nintro\ndataflow\nui\nmarkdown\nplots\nlayout\nfileformat\nfor-jupyter-users\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "Tutorials"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "marimo + quarto",
    "section": "",
    "text": "This repository provides a framework for integrating Quarto with marimo, enabling markdown documents to be executed in a marimo environment, and reactive in page.\n\n    \n    \n    \n    \n\n\n\nFirst, aquaint yourself with the marimo! One you‚Äôve digested the basics, and maybe even written a few marimo notebooks, start to consider the possibilities of exporting marimo cells to be standalone, Web Assembly modules, embeddable anywhere.\nThat‚Äôs where Quarto comes in with the qmd format.\nqmd is a markdown format that allows for the extraction and execution of code cells in a markdown document. It‚Äôs a great way to maintain readable documents exportable to a variety of formats, while still being able to execute code.\nThis page, and the marimo tutorials in the sidebar are qmd documents, to get a sense of what‚Äôs possible, look at their source.\n\n\n\nWrite a qmd document with {marimo} cells.\nFor instance the following cell\n```{marimo}\nprint(\"remember that stdout is not shown\")\nresult = \"Only outputs!\"\nresult,\n```\nproduces the following output:\n\n    \n    \n    \n    print(%22remember%20that%20stdout%20is%20not%20shown%22)%0Aresult%20%3D%20%22Only%20outputs!%22%0Aresult%2C\n\n\nWe can make it editable:\n```{marimo}\n#| editor: true\neditor_result = \"Change me\" + (\"!\" * 3)\neditor_result,\n```\n\n    \n    \n    \n    \n\nbut the default is to show the output only.\n\n\n    \n    The value of editor_result in the previous cell: Change me!!!\n    \n    mo.md(%0A%20%20f%22The%20value%20of%20%60editor_result%60%20in%20the%20previous%20cell%3A%20**%7Beditor_result%7D**%22)\n\n\nHold ctrl to manually run a stale cell.\n\n\nUse the repo and do some reading! This documentation is TODO.",
    "crumbs": [
      "marimo + quarto"
    ]
  },
  {
    "objectID": "index.html#what",
    "href": "index.html#what",
    "title": "marimo + quarto",
    "section": "",
    "text": "First, aquaint yourself with the marimo! One you‚Äôve digested the basics, and maybe even written a few marimo notebooks, start to consider the possibilities of exporting marimo cells to be standalone, Web Assembly modules, embeddable anywhere.\nThat‚Äôs where Quarto comes in with the qmd format.\nqmd is a markdown format that allows for the extraction and execution of code cells in a markdown document. It‚Äôs a great way to maintain readable documents exportable to a variety of formats, while still being able to execute code.\nThis page, and the marimo tutorials in the sidebar are qmd documents, to get a sense of what‚Äôs possible, look at their source.",
    "crumbs": [
      "marimo + quarto"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "marimo + quarto",
    "section": "",
    "text": "Write a qmd document with {marimo} cells.\nFor instance the following cell\n```{marimo}\nprint(\"remember that stdout is not shown\")\nresult = \"Only outputs!\"\nresult,\n```\nproduces the following output:\n\n    \n    \n    \n    print(%22remember%20that%20stdout%20is%20not%20shown%22)%0Aresult%20%3D%20%22Only%20outputs!%22%0Aresult%2C\n\n\nWe can make it editable:\n```{marimo}\n#| editor: true\neditor_result = \"Change me\" + (\"!\" * 3)\neditor_result,\n```\n\n    \n    \n    \n    \n\nbut the default is to show the output only.\n\n\n    \n    The value of editor_result in the previous cell: Change me!!!\n    \n    mo.md(%0A%20%20f%22The%20value%20of%20%60editor_result%60%20in%20the%20previous%20cell%3A%20**%7Beditor_result%7D**%22)\n\n\nHold ctrl to manually run a stale cell.\n\n\nUse the repo and do some reading! This documentation is TODO.",
    "crumbs": [
      "marimo + quarto"
    ]
  },
  {
    "objectID": "tutorials/layout.html",
    "href": "tutorials/layout.html",
    "title": "Layout",
    "section": "",
    "text": "marimo provides functions to help you lay out your output, such as in rows and columns, accordions, tabs, and callouts.  ## Rows and columns\nArrange objects into rows and columns with mo.hstack and mo.vstack.\n\n    \n    \n    \n    mo.hstack(%0A%20%20%20%20%5Bmo.ui.text(label%3D%22hello%22)%2C%20mo.ui.slider(1%2C%2010%2C%20label%3D%22slider%22)%5D%2C%0A%20%20%20%20justify%3D%22start%22%2C%0A)\n\n\n    \n    \n    \n    mo.vstack(%5Bmo.ui.text(label%3D%22world%22)%2C%20mo.ui.number(1%2C%2010%2C%20label%3D%22number%22)%5D)\n\n\n            \n            Combine mo.hstack with mo.vstack to make grids:\n\nYou can pass anything to mo.hstack to mo.vstack (including\nplots!).\n            \n            grid%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.hstack(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text(label%3D%22hello%22)%2C%20mo.ui.slider(1%2C%2010%2C%20label%3D%22slider%22)%5D%2C%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20mo.hstack(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text(label%3D%22world%22)%2C%20mo.ui.number(1%2C%2010%2C%20label%3D%22number%22)%5D%2C%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%5D%2C%0A).center()%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20Combine%20%60mo.hstack%60%20with%20%60mo.vstack%60%20to%20make%20grids%3A%0A%0A%20%20%20%20%7Bgrid%7D%0A%0A%20%20%20%20You%20can%20pass%20anything%20to%20%60mo.hstack%60%20to%20%60mo.vstack%60%20(including%0A%20%20%20%20plots!).%0A%20%20%20%20%22%22%22%0A)\n        \nCustomization. The presentation of stacked elements can be customized with some arguments that are best understood by example.\n\n    \n    \n    \n    justify%20%3D%20mo.ui.dropdown(%0A%20%20%20%20%5B%22start%22%2C%20%22center%22%2C%20%22end%22%2C%20%22space-between%22%2C%20%22space-around%22%5D%2C%0A%20%20%20%20value%3D%22space-between%22%2C%0A%20%20%20%20label%3D%22justify%22%2C%0A)%0Aalign%20%3D%20mo.ui.dropdown(%0A%20%20%20%20%5B%22start%22%2C%20%22center%22%2C%20%22end%22%2C%20%22stretch%22%5D%2C%20value%3D%22center%22%2C%20label%3D%22align%22%0A)%0Agap%20%3D%20mo.ui.number(start%3D0%2C%20step%3D0.25%2C%20stop%3D2%2C%20value%3D0.5%2C%20label%3D%22gap%22)%0Awrap%20%3D%20mo.ui.checkbox(label%3D%22wrap%22)%0A%0Amo.hstack(%5Bjustify%2C%20align%2C%20gap%2C%20wrap%5D%2C%20justify%3D%22center%22)\n\n\n    \n    \n    \n    size%20%3D%20mo.ui.slider(label%3D%22box%20size%22%2C%20start%3D60%2C%20stop%3D500)%0Amo.hstack(%5Bsize%5D%2C%20justify%3D%22center%22)\n\n\n    \n    1234\n    \n    mo.hstack(%0A%20%20%20%20boxes%2C%0A%20%20%20%20align%3Dalign.value%2C%0A%20%20%20%20justify%3Djustify.value%2C%0A%20%20%20%20gap%3Dgap.value%2C%0A%20%20%20%20wrap%3Dwrap.value%2C%0A)\n\n\n    \n    1234\n    \n    mo.vstack(%0A%20%20%20%20boxes%2C%0A%20%20%20%20align%3Dalign.value%2C%0A%20%20%20%20gap%3Dgap.value%2C%0A)\n\n\n    \n    \n    def%20create_box(num%3D1)%3A%0A%20%20%20%20box_size%20%3D%20size.value%20%2B%20num%20*%2010%0A%20%20%20%20return%20mo.Html(%0A%20%20%20%20%20%20%20%20f%22%3Cdiv%20style%3D'min-width%3A%20%7Bbox_size%7Dpx%3B%20min-height%3A%20%7Bbox_size%7Dpx%3B%20background-color%3A%20orange%3B%20text-align%3A%20center%3B%20line-height%3A%20%7Bbox_size%7Dpx'%3E%7Bstr(num)%7D%3C%2Fdiv%3E%22%0A%20%20%20%20)%0A%0A%0Aboxes%20%3D%20%5Bcreate_box(i)%20for%20i%20in%20range(1%2C%205)%5D\n\n\n            \n            def hstack(items: Sequence[object], justify: Literal['start', 'center',\n  'end', 'space-between', 'space-around'] = 'space-between',\n  align: Optional[Literal['start', 'end', 'center', 'stretch']] = None,\n  wrap: bool = False, gap: float = 0.5, widths: Optional[Literal['equal'] |\n  Sequence[float]] = None) -&gt; Html: \n\nStack items horizontally, in a row.\nCombine with vstack to build a grid.\nExample.\n# Build a row of items\nmo.hstack([mo.md(\"...\"), mo.ui.text_area()])\n\n# Build a grid.\nmo.hstack(\n    [\n        mo.vstack([mo.md(\"...\"), mo.ui.text_area()]),\n        mo.vstack([mo.ui.checkbox(), mo.ui.text(), mo.ui.date()]),\n    ]\n)\n\nArgs.\n\nitems: A list of items.\njustify: Justify items horizontally: start, center, end,\n    space-between, or space-around.\nalign: Align items vertically: start, end, center, or stretch.\nwrap: Wrap items or not.\ngap: Gap between items as a float in rem. 1rem is 16px by default.\nwidths: \"equal\" to give items equal width; or a list of relative widths\n  with same length as items, eg, [1, 2] means the second item is twice as\n  wide as the first; or None for a sensible default\n\nReturns.\n\nAn Html object.\ndef vstack(items: Sequence[object], align: Optional[Literal['start',\n  'end', 'center', 'stretch']] = None, justify: Literal['start', 'center',\n  'end', 'space-between', 'space-around'] = 'start', gap: float = 0.5,\n  heights: Optional[Literal['equal'] | Sequence[float]] = None) -&gt; Html: \n\nStack items vertically, in a column.\nCombine with hstack to build a grid of items.\nExample.\n# Build a column of items\nmo.vstack([mo.md(\"...\"), mo.ui.text_area()])\n\n# Build a grid.\nmo.vstack(\n    [\n        mo.hstack([mo.md(\"...\"), mo.ui.text_area()]),\n        mo.hstack([mo.ui.checkbox(), mo.ui.text(), mo.ui.date()]),\n    ]\n)\n\nArgs.\n\nitems: A list of items.\nalign: Align items horizontally: start, end, center, or stretch.\njustify: Justify items vertically: start, center, end,\ngap: Gap between items as a float in rem. 1rem is 16px by default.\nheights: \"equal\" to give items equal height;\n    or a list of relative heights with same length as items,\n    eg, [1, 2] means the second item is twice as tall\n    as the first; or None for a sensible default\n\nReturns.\n\nAn Html object.\n\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60mo.hstack%60%22%3A%20mo.doc(mo.hstack)%2C%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60mo.vstack%60%22%3A%20mo.doc(mo.vstack)%2C%0A%20%20%20%20%7D%0A)\n        \nJustifying Html. While you can center or right-justify any object using mo.hstack, Html objects (returned by most marimo functions, and subclassed by most marimo classes) have a shortcut using via their center, right, and left methods.  This markdown is left-justified.\n\n    \n    This markdown is centered.\n    \n    mo.md(%22This%20markdown%20is%20centered.%22).center()\n\n\n    \n    This markdown is right-justified.\n    \n    mo.md(%22This%20markdown%20is%20right-justified.%22).right()\n\n\n            \n            def center(self) -&gt; Html: \n\nCenter an item.\nExample.\nmo.md(\"# Hello, world\").center()\n\nReturns.\nAn Html object.def right(self) -&gt; Html: \n\nRight-justify.\nExample.\nmo.md(\"# Hello, world\").right()\n\nReturns.\nAn Html object.def left(self) -&gt; Html: \n\nLeft-justify.\nExample.\nmo.md(\"# Hello, world\").left()\n\nReturns.\nAn Html object.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60Html.center%60%22%3A%20mo.doc(mo.Html.center)%2C%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60Html.right%60%22%3A%20mo.doc(mo.Html.right)%2C%0A%20%20%20%20%20%20%20%20%22Documentation%3A%20%60Html.left%60%22%3A%20mo.doc(mo.Html.left)%2C%0A%20%20%20%20%7D%0A)\n        \n\n\nCreate expandable shelves of content using mo.accordion:  An accordion can contain multiple items:\n\n            \n            By default, only one item can be open at a timeUse the keyword argument multiple=True to allow multiple items\nto be open at the same time\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Multiple%20items%22%3A%20%22By%20default%2C%20only%20one%20item%20can%20be%20open%20at%20a%20time%22%2C%0A%20%20%20%20%20%20%20%20%22Allow%20multiple%20items%20to%20be%20open%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Use%20the%20keyword%20argument%20%60multiple%3DTrue%60%20to%20allow%20multiple%20items%0A%20%20%20%20%20%20%20%20%20%20%20%20to%20be%20open%20at%20the%20same%20time%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n        \n\n\n\nUse mo.ui.tabs to display multiple objects in a single tabbed output:\n\n    \n    Edit UserEdit Organization\n    \n    _settings%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.md(%22**Edit%20User**%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22First%20Name%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22Last%20Name%22)%2C%0A%20%20%20%20%5D%0A)%0A%0A_organization%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.md(%22**Edit%20Organization**%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22Organization%20Name%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.number(label%3D%22Number%20of%20employees%22%2C%20start%3D0%2C%20stop%3D1000)%2C%0A%20%20%20%20%5D%0A)%0A%0Amo.ui.tabs(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22%F0%9F%A7%99%E2%80%8D%E2%99%80%20User%22%3A%20_settings%2C%0A%20%20%20%20%20%20%20%20%22%F0%9F%8F%A2%20Organization%22%3A%20_organization%2C%0A%20%20%20%20%7D%0A)\n\n\n            \n            class tabs(\n    tabs: dict[str, object],\n    value: Optional[str] = None,\n    lazy: bool = False,\n    label: str = \"\",\n    on_change: Optional[Callable[[str], None]] = None,\n)\n\nDisplay objects in a tabbed view.\nExamples.\nShow content in tabs:\ntab1 = mo.vstack([\n    \"slider\": mo.ui.slider(1, 10),\n    \"text\": mo.ui.text(),\n    \"date\": mo.ui.date()\n])\ntab2 = mo.md(\"You can show arbitrary content in a tab.\")\ntabs = mo.ui.tabs({\n    \"Heading 1\": tab1,\n    \"Heading 2\": tab2\n})\n\nControl which tab is selected:\ntabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": tab2}, value=\"Heading 2\"\n)\n\nTab content can be lazily loaded:\ntabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": expensive_component}, lazy=True\n)\n\nAttributes.\n\nvalue: A string, the name of the selected tab.\n\nInitialization Args.\n\ntabs: a dictionary of tab names to tab content; strings are interpreted\n          as markdown\nvalue: the name of the tab to open; defaults to the first tab\nlazy: a boolean, whether to lazily load the tab content.\n          This is a convenience that wraps each tab in a mo.lazy\n          component.\n\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.ui.tabs%60%22%3A%20mo.doc(mo.ui.tabs)%7D)\n        \n\n            \n            \nDisplay a nested structure of lists, dictionaries, and tuples with\nmo.tree:\n\n            \n            _t%20%3D%20%5B%0A%20%20%20%20mo.md(%22**Hello!**%22)%2C%0A%20%20%20%20mo.md(r%22%24f(x)%24%22)%2C%0A%20%20%20%20%7B%22c%22%3A%20mo.ui.slider(1%2C%2010)%2C%20%22d%22%3A%20(mo.ui.checkbox()%2C%20mo.ui.switch())%7D%2C%0A%5D%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%20Tree%0A%0A%20%20%20%20Display%20a%20nested%20structure%20of%20lists%2C%20dictionaries%2C%20and%20tuples%20with%0A%20%20%20%20%60mo.tree%60%3A%0A%0A%20%20%20%20%7Bmo.tree(_t)%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            def tree(items: list[Any] | tuple[Any] | dict[Any, Any],\n  label: Optional[str] = None) -&gt; Html: \n\nRender a nested structure of lists, tuples, or dicts as a tree.\nExample.\nmo.tree([\"entry\", \"another entry\", {\"key\": [0, 1, 2]}], label=\"A tree.\")\n\nArgs.\n\nitems: nested structure of lists, tuples, or dicts\nlabel: optional text label for the tree\n\nReturns.\nHtml object\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.tree%60%22%3A%20mo.doc(mo.tree)%7D)\n        \n\n\n\nTurn any markdown or HTML into an emphasized callout with the callout method:\n\n    \n    \n    callout_kind%20%3D%20mo.ui.dropdown(%0A%20%20%20%20%5B%22neutral%22%2C%20%22warn%22%2C%20%22success%22%2C%20%22info%22%2C%20%22danger%22%5D%2C%20value%3D%22neutral%22%0A)\n\n\n    \n    \n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20**This%20is%20a%20callout!**%0A%0A%20%20%20%20You%20can%20turn%20any%20HTML%20or%20markdown%20into%20an%20emphasized%20callout.%0A%20%20%20%20You%20can%20choose%20from%20a%20variety%20of%20different%20callout%20kind.%20This%20one%20is%3A%0A%20%20%20%20%7Bcallout_kind%7D%0A%20%20%20%20%22%22%22%0A).callout(kind%3Dcallout_kind.value)\n\n\n            \n            def callout(value: object, kind: Literal['neutral', 'warn', 'success',\n  'info', 'danger'] = 'neutral') -&gt; Html: \n\nBuild a callout output.\nArgs.\n\nvalue: A value to render in the callout\nkind: The kind of callout (affects styling).\n\nReturns.\n\nAn HTML object.\n\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.callout%60%22%3A%20mo.doc(mo.callout)%7D)\n        \n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Layout"
    ]
  },
  {
    "objectID": "tutorials/layout.html#accordion",
    "href": "tutorials/layout.html#accordion",
    "title": "Layout",
    "section": "",
    "text": "Create expandable shelves of content using mo.accordion:  An accordion can contain multiple items:\n\n            \n            By default, only one item can be open at a timeUse the keyword argument multiple=True to allow multiple items\nto be open at the same time\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Multiple%20items%22%3A%20%22By%20default%2C%20only%20one%20item%20can%20be%20open%20at%20a%20time%22%2C%0A%20%20%20%20%20%20%20%20%22Allow%20multiple%20items%20to%20be%20open%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Use%20the%20keyword%20argument%20%60multiple%3DTrue%60%20to%20allow%20multiple%20items%0A%20%20%20%20%20%20%20%20%20%20%20%20to%20be%20open%20at%20the%20same%20time%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)",
    "crumbs": [
      "Tutorials",
      "Layout"
    ]
  },
  {
    "objectID": "tutorials/layout.html#tabs",
    "href": "tutorials/layout.html#tabs",
    "title": "Layout",
    "section": "",
    "text": "Use mo.ui.tabs to display multiple objects in a single tabbed output:\n\n    \n    Edit UserEdit Organization\n    \n    _settings%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.md(%22**Edit%20User**%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22First%20Name%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22Last%20Name%22)%2C%0A%20%20%20%20%5D%0A)%0A%0A_organization%20%3D%20mo.vstack(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.md(%22**Edit%20Organization**%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.text(label%3D%22Organization%20Name%22)%2C%0A%20%20%20%20%20%20%20%20mo.ui.number(label%3D%22Number%20of%20employees%22%2C%20start%3D0%2C%20stop%3D1000)%2C%0A%20%20%20%20%5D%0A)%0A%0Amo.ui.tabs(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22%F0%9F%A7%99%E2%80%8D%E2%99%80%20User%22%3A%20_settings%2C%0A%20%20%20%20%20%20%20%20%22%F0%9F%8F%A2%20Organization%22%3A%20_organization%2C%0A%20%20%20%20%7D%0A)\n\n\n            \n            class tabs(\n    tabs: dict[str, object],\n    value: Optional[str] = None,\n    lazy: bool = False,\n    label: str = \"\",\n    on_change: Optional[Callable[[str], None]] = None,\n)\n\nDisplay objects in a tabbed view.\nExamples.\nShow content in tabs:\ntab1 = mo.vstack([\n    \"slider\": mo.ui.slider(1, 10),\n    \"text\": mo.ui.text(),\n    \"date\": mo.ui.date()\n])\ntab2 = mo.md(\"You can show arbitrary content in a tab.\")\ntabs = mo.ui.tabs({\n    \"Heading 1\": tab1,\n    \"Heading 2\": tab2\n})\n\nControl which tab is selected:\ntabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": tab2}, value=\"Heading 2\"\n)\n\nTab content can be lazily loaded:\ntabs = mo.ui.tabs(\n    {\"Heading 1\": tab1, \"Heading 2\": expensive_component}, lazy=True\n)\n\nAttributes.\n\nvalue: A string, the name of the selected tab.\n\nInitialization Args.\n\ntabs: a dictionary of tab names to tab content; strings are interpreted\n          as markdown\nvalue: the name of the tab to open; defaults to the first tab\nlazy: a boolean, whether to lazily load the tab content.\n          This is a convenience that wraps each tab in a mo.lazy\n          component.\n\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.ui.tabs%60%22%3A%20mo.doc(mo.ui.tabs)%7D)\n        \n\n            \n            \nDisplay a nested structure of lists, dictionaries, and tuples with\nmo.tree:\n\n            \n            _t%20%3D%20%5B%0A%20%20%20%20mo.md(%22**Hello!**%22)%2C%0A%20%20%20%20mo.md(r%22%24f(x)%24%22)%2C%0A%20%20%20%20%7B%22c%22%3A%20mo.ui.slider(1%2C%2010)%2C%20%22d%22%3A%20(mo.ui.checkbox()%2C%20mo.ui.switch())%7D%2C%0A%5D%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%23%23%20Tree%0A%0A%20%20%20%20Display%20a%20nested%20structure%20of%20lists%2C%20dictionaries%2C%20and%20tuples%20with%0A%20%20%20%20%60mo.tree%60%3A%0A%0A%20%20%20%20%7Bmo.tree(_t)%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            def tree(items: list[Any] | tuple[Any] | dict[Any, Any],\n  label: Optional[str] = None) -&gt; Html: \n\nRender a nested structure of lists, tuples, or dicts as a tree.\nExample.\nmo.tree([\"entry\", \"another entry\", {\"key\": [0, 1, 2]}], label=\"A tree.\")\n\nArgs.\n\nitems: nested structure of lists, tuples, or dicts\nlabel: optional text label for the tree\n\nReturns.\nHtml object\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.tree%60%22%3A%20mo.doc(mo.tree)%7D)",
    "crumbs": [
      "Tutorials",
      "Layout"
    ]
  },
  {
    "objectID": "tutorials/layout.html#callout",
    "href": "tutorials/layout.html#callout",
    "title": "Layout",
    "section": "",
    "text": "Turn any markdown or HTML into an emphasized callout with the callout method:\n\n    \n    \n    callout_kind%20%3D%20mo.ui.dropdown(%0A%20%20%20%20%5B%22neutral%22%2C%20%22warn%22%2C%20%22success%22%2C%20%22info%22%2C%20%22danger%22%5D%2C%20value%3D%22neutral%22%0A)\n\n\n    \n    \n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20**This%20is%20a%20callout!**%0A%0A%20%20%20%20You%20can%20turn%20any%20HTML%20or%20markdown%20into%20an%20emphasized%20callout.%0A%20%20%20%20You%20can%20choose%20from%20a%20variety%20of%20different%20callout%20kind.%20This%20one%20is%3A%0A%20%20%20%20%7Bcallout_kind%7D%0A%20%20%20%20%22%22%22%0A).callout(kind%3Dcallout_kind.value)\n\n\n            \n            def callout(value: object, kind: Literal['neutral', 'warn', 'success',\n  'info', 'danger'] = 'neutral') -&gt; Html: \n\nBuild a callout output.\nArgs.\n\nvalue: A value to render in the callout\nkind: The kind of callout (affects styling).\n\nReturns.\n\nAn HTML object.\n\n            \n            mo.accordion(%7B%22Documentation%3A%20%60mo.callout%60%22%3A%20mo.doc(mo.callout)%7D)\n        \n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Layout"
    ]
  },
  {
    "objectID": "tutorials/plots.html",
    "href": "tutorials/plots.html",
    "title": "Plots",
    "section": "",
    "text": "check_dependencies()\n\nmarimo supports several popular plotting libraries, including matplotlib, plotly, seaborn, and altair.\nThis tutorial gives examples using matplotlib; other libraries are used similarly.  ## Matplotlib  To show a plot, include it in the last expression of a cell (just like any other output).\n# create the plot in the last line of the cell\nimport matplotlib.pyplot as plt\nplt.plot([1, 2])\n\n    \n    \n    \n    plt.plot(%5B1%2C%202%5D)\n\n# create a plot\nplt.plot([1, 2])\n# ... do some work ...\n# make plt.gca() the last line of the cell\nplt.gca()\n\n    \n    \n    \n    plt.plot(%5B1%2C%202%5D)%0A%23%20...%20do%20some%20work%20...%0A%23%20make%20plt.gca()%20the%20last%20line%20of%20the%20cell%0Aplt.gca()\n\n\n            \n            You can use plt.show() or figure.show() to display\nplots in the console area of a cell. Keep in mind that console\noutputs are not shown in the app view.\n            \n            mo.accordion(plt_show_explainer)\n        \nA new figure every cell. Every cell starts with an empty figure for the imperative pyplot API.\n\n    \n    \n    x%20%3D%20np.linspace(start%3D-4%2C%20stop%3D4%2C%20num%3D100%2C%20dtype%3Dfloat)\n\n\n    \n    \n    \n    plt.plot(x%2C%20x)%0Aplt.plot(x%2C%20x**2)%0Aplt.gca()\n\n\n    \n    \n    \n    plt.plot(x%2C%20x**3)\n\nTo build a figure over multiple cells, use the object-oriented API and create your own axis:\n\n    \n    \n    \n    _%2C%20axis%20%3D%20plt.subplots()%0Aaxis.plot(x%2C%20x)%0Aaxis.plot(x%2C%20x**2)%0Aaxis\n\n\n    \n    \n    \n    axis.plot(x%2C%20x**3)%0Aaxis\n\n\n\nDraw plots interactively by parametrizing them with UI elements.\n\n            \n            Visualizing powers.\n\n            \n            exponent%20%3D%20mo.ui.slider(1%2C%205%2C%20value%3D1%2C%20step%3D1%2C%20label%3D'exponent')%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20**Visualizing%20powers.**%0A%0A%20%20%20%20%7Bexponent%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    ||[f(x) = x||]\n    \n    import%20functools%0A%0A%0A%40functools.cache%0Adef%20_plot(exponent)%3A%0A%20%20%20%20plt.plot(x%2C%20x**exponent)%0A%20%20%20%20return%20plt.gca()%0A%0A%0A_tex%20%3D%20(%0A%20%20%20%20f%22%24%24f(x)%20%3D%20x%5E%7Bexponent.value%7D%24%24%22%20if%20exponent.value%20%3E%201%20else%20%22%24%24f(x)%20%3D%20x%24%24%22%0A)%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%0A%20%20%20%20%7B_tex%7D%0A%0A%20%20%20%20%7Bmo.as_html(_plot(exponent.value))%7D%0A%20%20%20%20%22%22%22%0A)\n\n\n\n\n\nmarimo also supports these other plotting libraries:\n\nPlotly\nSeaborn\nAltair\n\nJust output their figure objects as the last expression of a cell, or embed them in markdown with mo.as_html.\nIf you would like another library to be integrated into marimo, please get in touch.\n\n    \n    \n    module_not_found_explainer%20%3D%20mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20%23%23%20Oops!%0A%0A%20%20%20%20It%20looks%20like%20you're%20missing%20a%20package%20that%20this%20tutorial%20%0A%20%20%20%20requires.%0A%0A%20%20%20%20Close%20marimo%2C%20install%20**%60numpy%60**%20and%20**%60matplotlib%60**%2C%20then%20%0A%20%20%20%20open%20this%20tutorial%20once%20more.%0A%0A%20%20%20%20If%20you%20use%20%60pip%60%2C%20run%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pip%20install%20numpy%20matplotlib%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20at%20your%20command%20line.%0A%20%20%20%20%22%22%22%0A).callout(kind%3D'warn')%0A%0Adef%20check_dependencies()%3A%0A%20%20%20%20if%20missing_packages%3A%0A%20%20%20%20%20%20%20%20return%20module_not_found_explainer\n\n\n    \n    \n    plt_show_explainer%20%3D%20%7B%0A%20%20%20%20%22Using%20%60plt.show()%60%22%3A%20%22%22%22%0A%20%20%20%20You%20can%20use%20%60plt.show()%60%20or%20%60figure.show()%60%20to%20display%0A%20%20%20%20plots%20in%20the%20console%20area%20of%20a%20cell.%20Keep%20in%20mind%20that%20console%0A%20%20%20%20outputs%20are%20not%20shown%20in%20the%20app%20view.%0A%20%20%20%20%22%22%22%0A%7D\n\n\n    \n    \n    try%3A%0A%20%20%20%20import%20matplotlib%0A%20%20%20%20import%20matplotlib.pyplot%20as%20plt%0A%20%20%20%20import%20numpy%20as%20np%0A%20%20%20%20missing_packages%20%3D%20False%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20missing_packages%20%3D%20True%0A%0Aif%20not%20missing_packages%3A%0A%20%20%20%20matplotlib.rcParams%5B'figure.figsize'%5D%20%3D%20(6%2C%202.4)\n\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Plots"
    ]
  },
  {
    "objectID": "tutorials/plots.html#other-libraries",
    "href": "tutorials/plots.html#other-libraries",
    "title": "Plots",
    "section": "",
    "text": "marimo also supports these other plotting libraries:\n\nPlotly\nSeaborn\nAltair\n\nJust output their figure objects as the last expression of a cell, or embed them in markdown with mo.as_html.\nIf you would like another library to be integrated into marimo, please get in touch.\n\n    \n    \n    module_not_found_explainer%20%3D%20mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20%23%23%20Oops!%0A%0A%20%20%20%20It%20looks%20like%20you're%20missing%20a%20package%20that%20this%20tutorial%20%0A%20%20%20%20requires.%0A%0A%20%20%20%20Close%20marimo%2C%20install%20**%60numpy%60**%20and%20**%60matplotlib%60**%2C%20then%20%0A%20%20%20%20open%20this%20tutorial%20once%20more.%0A%0A%20%20%20%20If%20you%20use%20%60pip%60%2C%20run%0A%0A%20%20%20%20%60%60%60%0A%20%20%20%20pip%20install%20numpy%20matplotlib%0A%20%20%20%20%60%60%60%0A%0A%20%20%20%20at%20your%20command%20line.%0A%20%20%20%20%22%22%22%0A).callout(kind%3D'warn')%0A%0Adef%20check_dependencies()%3A%0A%20%20%20%20if%20missing_packages%3A%0A%20%20%20%20%20%20%20%20return%20module_not_found_explainer\n\n\n    \n    \n    plt_show_explainer%20%3D%20%7B%0A%20%20%20%20%22Using%20%60plt.show()%60%22%3A%20%22%22%22%0A%20%20%20%20You%20can%20use%20%60plt.show()%60%20or%20%60figure.show()%60%20to%20display%0A%20%20%20%20plots%20in%20the%20console%20area%20of%20a%20cell.%20Keep%20in%20mind%20that%20console%0A%20%20%20%20outputs%20are%20not%20shown%20in%20the%20app%20view.%0A%20%20%20%20%22%22%22%0A%7D\n\n\n    \n    \n    try%3A%0A%20%20%20%20import%20matplotlib%0A%20%20%20%20import%20matplotlib.pyplot%20as%20plt%0A%20%20%20%20import%20numpy%20as%20np%0A%20%20%20%20missing_packages%20%3D%20False%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20missing_packages%20%3D%20True%0A%0Aif%20not%20missing_packages%3A%0A%20%20%20%20matplotlib.rcParams%5B'figure.figsize'%5D%20%3D%20(6%2C%202.4)\n\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Plots"
    ]
  },
  {
    "objectID": "tutorials/dataflow.html",
    "href": "tutorials/dataflow.html",
    "title": "Dataflow",
    "section": "",
    "text": "Reactive execution is based on a single rule: when a cell is run, all other cells that reference any of the global variables it defines run automatically.\nTo provide reactive execution, marimo creates a dataflow graph out of your cells.  ## References and definitions\nA marimo notebook is a directed acyclic graph in which nodes represent cells and edges represent data dependencies. marimo creates this graph by analyzing each cell (without running it) to determine its\n\nreferences (‚Äúrefs*), the global variables it reads but doesn‚Äôt define;\ndefinitions (‚Äúdefs‚Äù), the global variables it defines.\n\nThere is an edge from one cell to another if the latter cell references any global variables defined by the former cell.\nThe rule for reactive execution can be restated in terms of the graph: when a cell is run, its descendants are run automatically.  ### Example\nThe next four cells plot a sine wave with a given period and amplitude. Each cell is labeled with its refs and defs.\n\n            \n            Use mo.refs() and mo.defs() to inspect the refs and defs of any\ngiven cell. This can help with debugging complex notebooks.\nFor example, here are the refs and defs of this cell:\n\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20inspecting%20refs%20and%20defs%22%3A%20f%22%22%22%0A%20%20%20%20%20%20%20%20Use%20%60mo.refs()%60%20and%20%60mo.defs()%60%20to%20inspect%20the%20refs%20and%20defs%20of%20any%0A%20%20%20%20%20%20%20%20given%20cell.%20This%20can%20help%20with%20debugging%20complex%20notebooks.%0A%0A%20%20%20%20%20%20%20%20For%20example%2C%20here%20are%20the%20refs%20and%20defs%20of%20this%20cell%3A%0A%0A%20%20%20%20%20%20%20%20%7Bmo.as_html(%7B%22refs%22%3A%20mo.refs()%2C%20%22defs%22%3A%20mo.defs()%7D)%7D%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%7D%0A)\n        \n\n            \n            \n\nrefs: ('amplitude', 'mo', 'period', 'plot_wave')\ndefs: ()\n\n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20%7Bmo.as_html(plot_wave(amplitude%2C%20period))%7D%0A%0A%20%20%20%20-%20%60refs%3A%20%7Bmo.refs()%7D%60%0A%20%20%20%20-%20%60defs%3A%20%7Bmo.defs()%7D%60%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            \nrefs: ('mo',)\ndefs: ('period',)\n\n            \n            period%20%3D%202%20*%203.14159%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20-%20%60refs%3A%20%7Bmo.refs()%7D%60%0A%20%20%20%20-%20%60defs%3A%20%7Bmo.defs()%7D%60%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            \nrefs: ('mo',)\ndefs: ('amplitude',)\n\n            \n            amplitude%20%3D%201%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20-%20%60refs%3A%20%7Bmo.refs()%7D%60%0A%20%20%20%20-%20%60defs%3A%20%7Bmo.defs()%7D%60%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            \nrefs: ('matplotlib_installed', 'mo', 'np', 'numpy_installed', 'plt')\ndefs: ('plot_wave',)\n\n            \n            def%20plot_wave(amplitude%2C%20period)%3A%0A%20%20%20%20if%20not%20numpy_installed%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%3E%20Oops!%20It%20looks%20like%20you%20don't%20have%20%60numpy%60%20installed.%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20if%20not%20matplotlib_installed%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%3E%20Oops!%20It%20looks%20like%20you%20don't%20have%20%60matplotlib%60%20installed.%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20x%20%3D%20np.linspace(0%2C%202%20*%20np.pi%2C%20256)%0A%20%20%20%20plt.plot(x%2C%20amplitude%20*%20np.sin(2%20*%20np.pi%20%2F%20period%20*%20x))%0A%20%20%20%20plt.xlim(0%2C%202%20*%20np.pi)%0A%20%20%20%20plt.ylim(-2%2C%202)%0A%20%20%20%20plt.xticks(%0A%20%20%20%20%20%20%20%20%5B0%2C%20np.pi%20%2F%202%2C%20np.pi%2C%203%20*%20np.pi%20%2F%202%2C%202%20*%20np.pi%5D%2C%0A%20%20%20%20%20%20%20%20%5B0%2C%20r%22%24%5Cpi%2F2%24%22%2C%20r%22%24%5Cpi%24%22%2C%20r%22%243%5Cpi%2F2%24%22%2C%20r%22%242%5Cpi%24%22%5D%2C%0A%20%20%20%20)%0A%20%20%20%20plt.yticks(%5B-2%2C%20-1%2C%200%2C%201%2C%202%5D)%0A%20%20%20%20plt.gcf().set_size_inches(6.5%2C%202.4)%0A%20%20%20%20return%20plt.gca()%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20-%20%60refs%3A%20%7Bmo.refs()%7D%60%0A%20%20%20%20-%20%60defs%3A%20%7Bmo.defs()%7D%60%0A%20%20%20%20%22%22%22%0A)\n        \nüåä Try it! In the above cells, try changing the value period or ampltitude, then click the run button ( ‚ñ∑ ) to register your changes. See what happens to the sine wave.  Here is the dataflow graph for the cells that make the sine wave plot, plus the cells that import libraries. Each cell is labeled with its defs.\n                   +------+               +-----------+\n       +-----------| {mo} |-----------+   | {np, plt} |\n       |           +---+--+           |   +----+------+\n       |               |              |        |\n       |               |              |        |\n       v               v              v        v\n  +----------+   +-------------+   +--+----------+\n  | {period} |   | {amplitude} |   | {plot_wave} |\n  +---+------+   +-----+-------+   +------+------+\n      |                |                  |\n      |                v                  |\n      |              +----+               |\n      +------------&gt; | {} | &lt;-------------+\n                     +----+\nThe last cell, which doesn‚Äôt define anything, produces the plot.  ## Dataflow programming\nmarimo‚Äôs runtime rule has some important consequences that may seem surprising if you are not used to dataflow programming. We list these below.  ### Execution order is not cell order\nThe order in which cells are executed is determined entirely by the dataflow graph. This makes marimo notebooks more reproducible than traditional notebooks. It also lets you place boilerplate, like imports or long markdown strings, at the bottom of the editor.  ### Global variable names must be unique\nEvery global variable can be defined by only one cell. Without this constraint, there would be no way for marimo to know which order to execute cells in.\nIf you violate this constraint, marimo provides a helpful error message, like below:\n\n    \n    ({'name': 'planet', 'cells': ('Xref',), 'type': 'multiple-defs'},)\n    \n    planet%20%3D%20%22Mars%22%0Aplanet\n\n\n    \n    ({'name': 'planet', 'cells': ('PKri',), 'type': 'multiple-defs'},)\n    \n    planet%20%3D%20%22Earth%22%0Aplanet\n\nüåä Try it! In the previous cell, change the name planet to home, then run the cell.  Because defs must be unique, global variables cannot be modified with operators like += or -= in cells other than the one that created them; these operators count as redefinitions of a name.\nüåä Try it! Get rid of the following errors by merging the next two cells into a single cell.\n\n    \n    ({'name': 'count', 'cells': ('BYtC',), 'type': 'multiple-defs'},)\n    \n    count%20%3D%200\n\n\n    \n    ({'name': 'count', 'cells': ('SFPL',), 'type': 'multiple-defs'},)\n    \n    count%20%2B%3D%201\n\n\n\nGlobal variables prefixed with an underscore are ‚Äúprivate‚Äù to the cells that define them. This means that multiple cells can define the same underscore-prefixed name, and one cell‚Äôs private variables won‚Äôt be made available to other cells.\nExample.\n\n    \n    \n    \n    _private_variable%2C%20_%20%3D%201%2C%202%0A_private_variable%2C%20_\n\n\n    \n    \n    \n    _private_variable%2C%20_%20%3D%203%2C%204%0A_private_variable%2C%20_\n\n\n    \n    [{'msg': \"This cell raised an exception: NameError('name '_private_variable' is not defined')\", 'exception_type': 'NameError', 'raising_cell': None, 'type': 'exception'}]\n    \n    %23%20%60_private_variable%60%20and%20%60_%60%20are%20not%20defined%20in%20this%20cell%0A_private_variable%2C%20_\n\n\n\n\nDeleting a cell deletes its global variables and then runs all cells that reference them. This prevents severe bugs that can arise when state has been deleted from the editor but not from the program memory.\n\n            \n            üåä Try it!\nDelete this cell by clicking the trash bin icon.\n            \n            to_be_deleted%20%3D%20%22variable%20still%20exists%22%0A%0Amo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20%F0%9F%8C%8A%20**Try%20it!**%0A%0A%20%20%20%20Delete%20this%20cell%20by%20clicking%20the%20trash%20bin%20icon.%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    variable still exists\n    \n    to_be_deleted\n\n\n\n\nCycles among cells are not allowed. For example:\n\n    \n    ({'edges_with_vars': (('iLit', ['one'], 'ZHCJ'), ('ZHCJ', ['two'], 'iLit')), 'type': 'cycle'},)\n    \n    one%20%3D%20two%20-%201\n\n\n    \n    ({'edges_with_vars': (('iLit', ['one'], 'ZHCJ'), ('ZHCJ', ['two'], 'iLit')), 'type': 'cycle'},)\n    \n    two%20%3D%20one%20%2B%201\n\n\n\n\nmarimo only tracks global variables. Writing object attributes does not trigger reactive execution.\nüåä Example. Change the value of state.number in the next cell, then run the cell. Notice how the subsequent cell isn‚Äôt updated.\n\n    \n    \n    state.number%20%3D%201\n\n\n    \n    1\n    \n    state.number\n\n\n    \n    \n    class%20namespace%3A%0A%20%20%20%20pass%0A%0Astate%20%3D%20namespace()%0Astate.number%20%3D%200\n\n\n            \n            marimo can't reliably trace attributes\nto cells that define them. For example, attributes are routinely\ncreated or modified by library code.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Why%20not%20track%20attributes%3F%22%3A%20%22%22%22%0A%20%20%20%20%20%20%20%20marimo%20can't%20reliably%20trace%20attributes%0A%20%20%20%20%20%20%20%20to%20cells%20that%20define%20them.%20For%20example%2C%20attributes%20are%20routinely%0A%20%20%20%20%20%20%20%20created%20or%20modified%20by%20library%20code.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%7D%0A)\n        \n\n\n\nIn Python, it‚Äôs impossible to know whether code will mutate an object without running it. So: mutations (such as appending to a list) will not trigger reactive execution.\n\n            \n            You can use the fact that marimo does not track attributes or\nmutations to implement mutable state in marimo. An example of\nthis is shown in the ui tutorial.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%20(advanced)%3A%20mutable%20state%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20use%20the%20fact%20that%20marimo%20does%20not%20track%20attributes%20or%0A%20%20%20%20%20%20%20%20mutations%20to%20implement%20mutable%20state%20in%20marimo.%20An%20example%20of%0A%20%20%20%20%20%20%20%20this%20is%20shown%20in%20the%20%60ui%60%20tutorial.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \n\n\n\nThe constraints marimo puts on your notebooks are all natural consequences of the fact that marimo programs are directed acyclic graphs. As long as you keep this fact in mind, you‚Äôll quickly adapt to the marimo way of writing notebooks.\nUltimately, these constraints will enable you to create powerful notebooks and apps, and they‚Äôll encourage you to write clean, reproducible code.\nFollow these tips to stay on the marimo way:\n\n            \n            Keep the number of global variables in your program small to avoid\nname collisions across cells. Keep the number of global variables\ndefined by any one cell small to make sure that the units of\nreactive execution are small.Use descriptive variable names, especially for global variables.\nThis will help you minimize name clashes, and will also result in\nbetter code.Encapsulate logic into functions to avoid polluting the global\nnamespace with temporary or intermediate variables.We saw earlier that marimo cannot track object mutations. So try\nto only mutate an object in the cell that creates it, or create\nnew objects instead of mutating existing ones.\nFor example, don't do this:\n# a cell\nnumbers = [1, 2, 3]\n\n# another cell\nnumbers.append(4)\n\nInstead, prefer\n# a cell\nnumbers = [1, 2, 3]\nnumbers.append(4)\n\nor\n# a cell\nnumbers = [1, 2, 3]\n\n# another cell\nmore_numbers = numbers + [4]\nWrite cells whose outputs and behavior are the same when given\nthe same inputs (refs); such cells are called idempotent. This will\nhelp you avoid bugs, and let you cache expensive intermediate\ncomputations (see the next tip).Use Python's builtin functools library to cache expensive\nintermediate computations. You can do this if you abstract complex\nlogic into idempotent functions, following earlier tips.\nFor example:\nimport functools\n@functools.cache\ndef compute_prediction(problem_parameters):\n  ...\n\nWhenever compute_predictions is called with a value of\nproblem_parameters it has not seen, it will compute the predictions\nand store them in a cache. The next time it is called with the same\nparameters, instead of recomputing the predictions, it will just\nfetch the previously computed ones from the cache.\n            \n            mo.accordion(tips)\n        \n\n\n\nCheck out the tutorial on interactivity for a tour of UI elements:\nmarimo tutorial ui\n\n    \n    \n    matplotlib_installed%20%3D%20False%0Anumpy_installed%20%3D%20False%0A%0Atry%3A%0A%20%20%20%20import%20matplotlib.pyplot%20as%20plt%0A%0A%20%20%20%20matplotlib_installed%20%3D%20True%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20pass%0A%0Atry%3A%0A%20%20%20%20import%20numpy%20as%20np%0A%0A%20%20%20%20numpy_installed%20%3D%20True%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20pass\n\n\n    \n    \n    tips%20%3D%20%7B%0A%20%20%20%20%22Use%20global%20variables%20sparingly%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Keep%20the%20number%20of%20global%20variables%20in%20your%20program%20small%20to%20avoid%0A%20%20%20%20%20%20%20%20name%20collisions%20across%20cells.%20Keep%20the%20number%20of%20global%20variables%0A%20%20%20%20%20%20%20%20defined%20by%20any%20one%20cell%20small%20to%20make%20sure%20that%20the%20units%20of%0A%20%20%20%20%20%20%20%20reactive%20execution%20are%20small.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Use%20descriptive%20names%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Use%20descriptive%20variable%20names%2C%20especially%20for%20global%20variables.%0A%20%20%20%20%20%20%20%20This%20will%20help%20you%20minimize%20name%20clashes%2C%20and%20will%20also%20result%20in%0A%20%20%20%20%20%20%20%20better%20code.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Use%20functions%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Encapsulate%20logic%20into%20functions%20to%20avoid%20polluting%20the%20global%0A%20%20%20%20%20%20%20%20namespace%20with%20temporary%20or%20intermediate%20variables.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Minimize%20mutations%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20We%20saw%20earlier%20that%20marimo%20cannot%20track%20object%20mutations.%20So%20try%0A%20%20%20%20%20%20%20%20to%20only%20mutate%20an%20object%20in%20the%20cell%20that%20creates%20it%2C%20or%20create%0A%20%20%20%20%20%20%20%20new%20objects%20instead%20of%20mutating%20existing%20ones.%0A%0A%20%20%20%20%20%20%20%20For%20example%2C%20don't%20do%20this%3A%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20a%20cell%0A%20%20%20%20%20%20%20%20numbers%20%3D%20%5B1%2C%202%2C%203%5D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20another%20cell%0A%20%20%20%20%20%20%20%20numbers.append(4)%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20Instead%2C%20prefer%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20a%20cell%0A%20%20%20%20%20%20%20%20numbers%20%3D%20%5B1%2C%202%2C%203%5D%0A%20%20%20%20%20%20%20%20numbers.append(4)%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20or%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20a%20cell%0A%20%20%20%20%20%20%20%20numbers%20%3D%20%5B1%2C%202%2C%203%5D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20another%20cell%0A%20%20%20%20%20%20%20%20more_numbers%20%3D%20numbers%20%2B%20%5B4%5D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Write%20idempotent%20cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Write%20cells%20whose%20outputs%20and%20behavior%20are%20the%20same%20when%20given%0A%20%20%20%20%20%20%20%20the%20same%20inputs%20(refs)%3B%20such%20cells%20are%20called%20_idempotent_.%20This%20will%0A%20%20%20%20%20%20%20%20help%20you%20avoid%20bugs%2C%20and%20let%20you%20cache%20expensive%20intermediate%0A%20%20%20%20%20%20%20%20computations%20(see%20the%20next%20tip).%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Cache%20intermediate%20computations%20with%20%60%40functools.cache%60%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Use%20Python's%20builtin%20%60functools%60%20library%20to%20cache%20expensive%0A%20%20%20%20%20%20%20%20intermediate%20computations.%20You%20can%20do%20this%20if%20you%20abstract%20complex%0A%20%20%20%20%20%20%20%20logic%20into%20idempotent%20functions%2C%20following%20earlier%20tips.%0A%0A%20%20%20%20%20%20%20%20For%20example%3A%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20import%20functools%0A%0A%20%20%20%20%20%20%20%20%40functools.cache%0A%20%20%20%20%20%20%20%20def%20compute_prediction(problem_parameters)%3A%0A%20%20%20%20%20%20%20%20%20%20...%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20Whenever%20%60compute_predictions%60%20is%20called%20with%20a%20value%20of%0A%20%20%20%20%20%20%20%20%60problem_parameters%60%20it%20has%20not%20seen%2C%20it%20will%20compute%20the%20predictions%0A%20%20%20%20%20%20%20%20and%20store%20them%20in%20a%20cache.%20The%20next%20time%20it%20is%20called%20with%20the%20same%0A%20%20%20%20%20%20%20%20parameters%2C%20instead%20of%20recomputing%20the%20predictions%2C%20it%20will%20just%0A%20%20%20%20%20%20%20%20fetch%20the%20previously%20computed%20ones%20from%20the%20cache.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%7D\n\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Dataflow"
    ]
  },
  {
    "objectID": "tutorials/dataflow.html#best-practices",
    "href": "tutorials/dataflow.html#best-practices",
    "title": "Dataflow",
    "section": "",
    "text": "The constraints marimo puts on your notebooks are all natural consequences of the fact that marimo programs are directed acyclic graphs. As long as you keep this fact in mind, you‚Äôll quickly adapt to the marimo way of writing notebooks.\nUltimately, these constraints will enable you to create powerful notebooks and apps, and they‚Äôll encourage you to write clean, reproducible code.\nFollow these tips to stay on the marimo way:\n\n            \n            Keep the number of global variables in your program small to avoid\nname collisions across cells. Keep the number of global variables\ndefined by any one cell small to make sure that the units of\nreactive execution are small.Use descriptive variable names, especially for global variables.\nThis will help you minimize name clashes, and will also result in\nbetter code.Encapsulate logic into functions to avoid polluting the global\nnamespace with temporary or intermediate variables.We saw earlier that marimo cannot track object mutations. So try\nto only mutate an object in the cell that creates it, or create\nnew objects instead of mutating existing ones.\nFor example, don't do this:\n# a cell\nnumbers = [1, 2, 3]\n\n# another cell\nnumbers.append(4)\n\nInstead, prefer\n# a cell\nnumbers = [1, 2, 3]\nnumbers.append(4)\n\nor\n# a cell\nnumbers = [1, 2, 3]\n\n# another cell\nmore_numbers = numbers + [4]\nWrite cells whose outputs and behavior are the same when given\nthe same inputs (refs); such cells are called idempotent. This will\nhelp you avoid bugs, and let you cache expensive intermediate\ncomputations (see the next tip).Use Python's builtin functools library to cache expensive\nintermediate computations. You can do this if you abstract complex\nlogic into idempotent functions, following earlier tips.\nFor example:\nimport functools\n@functools.cache\ndef compute_prediction(problem_parameters):\n  ...\n\nWhenever compute_predictions is called with a value of\nproblem_parameters it has not seen, it will compute the predictions\nand store them in a cache. The next time it is called with the same\nparameters, instead of recomputing the predictions, it will just\nfetch the previously computed ones from the cache.\n            \n            mo.accordion(tips)",
    "crumbs": [
      "Tutorials",
      "Dataflow"
    ]
  },
  {
    "objectID": "tutorials/dataflow.html#whats-next",
    "href": "tutorials/dataflow.html#whats-next",
    "title": "Dataflow",
    "section": "",
    "text": "Check out the tutorial on interactivity for a tour of UI elements:\nmarimo tutorial ui\n\n    \n    \n    matplotlib_installed%20%3D%20False%0Anumpy_installed%20%3D%20False%0A%0Atry%3A%0A%20%20%20%20import%20matplotlib.pyplot%20as%20plt%0A%0A%20%20%20%20matplotlib_installed%20%3D%20True%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20pass%0A%0Atry%3A%0A%20%20%20%20import%20numpy%20as%20np%0A%0A%20%20%20%20numpy_installed%20%3D%20True%0Aexcept%20ModuleNotFoundError%3A%0A%20%20%20%20pass\n\n\n    \n    \n    tips%20%3D%20%7B%0A%20%20%20%20%22Use%20global%20variables%20sparingly%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Keep%20the%20number%20of%20global%20variables%20in%20your%20program%20small%20to%20avoid%0A%20%20%20%20%20%20%20%20name%20collisions%20across%20cells.%20Keep%20the%20number%20of%20global%20variables%0A%20%20%20%20%20%20%20%20defined%20by%20any%20one%20cell%20small%20to%20make%20sure%20that%20the%20units%20of%0A%20%20%20%20%20%20%20%20reactive%20execution%20are%20small.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Use%20descriptive%20names%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Use%20descriptive%20variable%20names%2C%20especially%20for%20global%20variables.%0A%20%20%20%20%20%20%20%20This%20will%20help%20you%20minimize%20name%20clashes%2C%20and%20will%20also%20result%20in%0A%20%20%20%20%20%20%20%20better%20code.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Use%20functions%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Encapsulate%20logic%20into%20functions%20to%20avoid%20polluting%20the%20global%0A%20%20%20%20%20%20%20%20namespace%20with%20temporary%20or%20intermediate%20variables.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Minimize%20mutations%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20We%20saw%20earlier%20that%20marimo%20cannot%20track%20object%20mutations.%20So%20try%0A%20%20%20%20%20%20%20%20to%20only%20mutate%20an%20object%20in%20the%20cell%20that%20creates%20it%2C%20or%20create%0A%20%20%20%20%20%20%20%20new%20objects%20instead%20of%20mutating%20existing%20ones.%0A%0A%20%20%20%20%20%20%20%20For%20example%2C%20don't%20do%20this%3A%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20a%20cell%0A%20%20%20%20%20%20%20%20numbers%20%3D%20%5B1%2C%202%2C%203%5D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20another%20cell%0A%20%20%20%20%20%20%20%20numbers.append(4)%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20Instead%2C%20prefer%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20a%20cell%0A%20%20%20%20%20%20%20%20numbers%20%3D%20%5B1%2C%202%2C%203%5D%0A%20%20%20%20%20%20%20%20numbers.append(4)%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20or%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20a%20cell%0A%20%20%20%20%20%20%20%20numbers%20%3D%20%5B1%2C%202%2C%203%5D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20%23%20another%20cell%0A%20%20%20%20%20%20%20%20more_numbers%20%3D%20numbers%20%2B%20%5B4%5D%0A%20%20%20%20%20%20%20%20%60%60%60%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Write%20idempotent%20cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Write%20cells%20whose%20outputs%20and%20behavior%20are%20the%20same%20when%20given%0A%20%20%20%20%20%20%20%20the%20same%20inputs%20(refs)%3B%20such%20cells%20are%20called%20_idempotent_.%20This%20will%0A%20%20%20%20%20%20%20%20help%20you%20avoid%20bugs%2C%20and%20let%20you%20cache%20expensive%20intermediate%0A%20%20%20%20%20%20%20%20computations%20(see%20the%20next%20tip).%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Cache%20intermediate%20computations%20with%20%60%40functools.cache%60%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Use%20Python's%20builtin%20%60functools%60%20library%20to%20cache%20expensive%0A%20%20%20%20%20%20%20%20intermediate%20computations.%20You%20can%20do%20this%20if%20you%20abstract%20complex%0A%20%20%20%20%20%20%20%20logic%20into%20idempotent%20functions%2C%20following%20earlier%20tips.%0A%0A%20%20%20%20%20%20%20%20For%20example%3A%0A%0A%20%20%20%20%20%20%20%20%60%60%60python3%0A%20%20%20%20%20%20%20%20import%20functools%0A%0A%20%20%20%20%20%20%20%20%40functools.cache%0A%20%20%20%20%20%20%20%20def%20compute_prediction(problem_parameters)%3A%0A%20%20%20%20%20%20%20%20%20%20...%0A%20%20%20%20%20%20%20%20%60%60%60%0A%0A%20%20%20%20%20%20%20%20Whenever%20%60compute_predictions%60%20is%20called%20with%20a%20value%20of%0A%20%20%20%20%20%20%20%20%60problem_parameters%60%20it%20has%20not%20seen%2C%20it%20will%20compute%20the%20predictions%0A%20%20%20%20%20%20%20%20and%20store%20them%20in%20a%20cache.%20The%20next%20time%20it%20is%20called%20with%20the%20same%0A%20%20%20%20%20%20%20%20parameters%2C%20instead%20of%20recomputing%20the%20predictions%2C%20it%20will%20just%0A%20%20%20%20%20%20%20%20fetch%20the%20previously%20computed%20ones%20from%20the%20cache.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%7D\n\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Dataflow"
    ]
  },
  {
    "objectID": "tutorials/ui.html",
    "href": "tutorials/ui.html",
    "title": "Ui",
    "section": "",
    "text": "One of marimo‚Äôs most powerful features is its first-class support for interactive user interface (UI) elements: interacting with a UI element will automatically run cells that reference it.  ## marimo.ui\n\n            \n            The marimo.ui module has a library of pre-built elements.\nFor example, here's a slider: \n            \n            slider%20%3D%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D1)%0Aslider%0A%0Amo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20%60marimo.ui%60%20module%20has%20a%20library%20of%20pre-built%20elements.%0A%0A%20%20%20%20For%20example%2C%20here's%20a%20%60slider%60%3A%20%7Bslider%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    and here's its value: 1.\n    \n    mo.md(f%22and%20here's%20its%20value%3A%20**%7Bslider.value%7D**.%22)\n\n\n\nWhenever you interact with a UI element, its value is sent back to Python. When this happens, all cells that reference the global variable bound to the UI element, but don‚Äôt define it, will run.\nThis simple rule lets you use UI elements to drive the execution of your program, letting you build interactive notebooks and tools for yourselves and others.\n\n            \n            Interacting with a displayed UI element will only\ntrigger reactive execution if the UI element is assigned\nto a global variable.Every UI element has a value attribute that you can access in\nPython.You can embed UI elements in markdown using f-strings.\nFor example, we can render the slider here: \n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20assign%20UI%20elements%20to%20global%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Interacting%20with%20a%20displayed%20UI%20element%20will%20only%0A%20%20%20%20%20%20%20%20%20%20%20%20trigger%20reactive%20execution%20if%20the%20UI%20element%20is%20assigned%0A%20%20%20%20%20%20%20%20%20%20%20%20to%20a%20global%20variable.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20accessing%20an%20element's%20value%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Every%20UI%20element%20has%20a%20value%20attribute%20that%20you%20can%20access%20in%0A%20%20%20%20%20%20%20%20%20%20%20%20Python.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20embed%20UI%20elements%20in%20markdown%22%3A%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20You%20can%20embed%20UI%20elements%20in%20markdown%20using%20f-strings.%0A%0A%20%20%20%20%20%20%20%20%20%20%20%20For%20example%2C%20we%20can%20render%20the%20slider%20here%3A%20%7Bslider%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n        \n\n\n\n\n    \n    marimo has a large library of simple UI elements: \n    \n    mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20marimo%20has%20a%20large%20library%20of%20simple%20UI%20elements%3A%20%7Bbasic_ui_elements%7D%0A%20%20%20%20%22%22%22%0A)\n\n\n    \n    \n    selected_element%20%3D%20construct_element(basic_ui_elements.value)%0Ashow_element(selected_element)\n\n\n    \n    \n    value(selected_element)\n\n\n    \n    \n    documentation(basic_ui_elements.value)\n\n\n            \n            \nComposite elements are advanced elements\nlet you build UI elements out of other UI elements.\nUse these powerful elements to logically group together related elements,\ncreate a dynamic set of UI elements, or reduce the number of global\nvariables in your program.\nSelect a composite element: \n            \n            mo.md(%0A%20%20%20%20f%22%22%22%23%23%23%20Composite%20elements%0A%0A%20%20%20%20Composite%20elements%20are%20advanced%20elements%0A%20%20%20%20let%20you%20build%20UI%20elements%20out%20of%20other%20UI%20elements.%0A%20%20%20%20Use%20these%20powerful%20elements%20to%20logically%20group%20together%20related%20elements%2C%0A%20%20%20%20create%20a%20dynamic%20set%20of%20UI%20elements%2C%20or%20reduce%20the%20number%20of%20global%0A%20%20%20%20variables%20in%20your%20program.%0A%0A%20%20%20%20Select%20a%20composite%20element%3A%20%7Bcomposite_elements%7D%0A%20%20%20%20%22%22%22%0A)\n        \n\n    \n    \n    composite_element%20%3D%20construct_element(composite_elements.value)%0Ashow_element(composite_element)\n\n\n    \n    \n    value(composite_element)\n\n\n    \n    \n    documentation(composite_elements.value)\n\n\n\n\n\n    \n    \n    \n    mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20**Heads%20up!**%0A%0A%20%20%20%20The%20rest%20of%20this%20tutorial%20covers%20state%2C%20an%20advanced%20topic.%20Feel%20free%0A%20%20%20%20to%20return%20here%20later%2C%20if%20or%20when%20you%20find%20yourself%0A%20%20%20%20limited%20in%20building%20interactive%20stateful%20apps.%0A%20%20%20%20%22%22%22%0A).callout(kind%3D%22warn%22)\n\nYou can build powerful interactive notebooks and apps using just mo.ui and reactivity.\nSometimes, however, you might want interactions to mutate state. Maybe you‚Äôre building a checklist, and you want to maintain a list of action items. Or maybe you want to tie two different UI elements, so that updating one updates the other.\nFor these and other cases, marimo provides the function mo.state, which creates state returns a getter function and a setter function. When you call the setter function in one cell, all other cells that reference the getter via a global variable are automatically run (similar to UI elements).\n\n            \n            def state(value: T, allow_self_loops: bool = False) -&gt; tuple[State[T],\n  Callable[[T], None]]: \n\nMutable reactive state\nThis function takes an initial value and returns:\n\na getter function that reads the state value\na setter function to set the state's value\n\nWhen you call the setter function and update the state value in one cell,\nall other cells that read any global variables assigned to the getter\nwill automatically run. By default, the cell that called the setter\nfunction won't be re-run, even if it references the getter; to allow a\nstate setter to possibly run the caller cell, use the keyword argument\nallow_self_loops=True.\nYou can use this function in conjunction with UIElement on_change\nhandlers to trigger side-effects when an element's value is updated. For\nexample, you can tie multiple UI elements to derive their values from\nshared state.\nBasic Usage.\nCreate state:\nget_count, set_count = mo.state(0)\n\nRead the value:\nget_count()\n\nUpdate the state:\nset_count(1)\n\nUpdate the state based on the current value:\nset_count(lambda value: value + 1)\n\nNote: Never mutate the state directly. You should only change its\nvalue through its setter.\nSynchronizing multiple UI elements.\nget_state, set_state = mo.state(0)\n\n# updating the state through the slider will recreate the number (below)\nslider = mo.ui.slider(0, 100, value=get_state(), on_change=set_state)\n\n# updating the state through the number will recreate the slider (above)\nnumber = mo.ui.number(0, 100, value=get_state(), on_change=set_state)\n\n# slider and number are synchronized to have the same value (try it!)\n[slider, number]\n\nWarning. Do not store marimo.ui elements in state; doing so can\nlead to hard-to-diagnose bugs.\nArgs:\n\nvalue: initial value of the state\nallow_self_loops: if True, if a cell calls a state setter\n  and also references its getter, the caller cell will be re-run;\n  defaults to False.\n\nReturns:\n\ngetter function that retrieves the state value\nsetter function that takes a new value, or a function taking the current\n  value as its argument and returning a new value\n\n            \n            mo.accordion(%7B%22Documentation%20on%20%60mo.state%60%22%3A%20mo.doc(mo.state)%7D)\n        \n\n\nmo.state takes an initial state value as its argument, and returns\n\na function that returns the state value;\na function that updates the state value.\n\nFor exaxmple,\nget_counter, set_counter = mo.state(0)\n\n    \n    \n    get_counter%2C%20set_counter%20%3D%20mo.state(0)\n\n\n            \n            Calling a state's setter function will only\ntrigger reactive execution if the corresponding getter is\nassigned to and referenced via a global variable.You can get far using just mo.ui, without state. That said,\njudiciously using state can simplify the implementation of highly\ninteractive notebooks/apps, and also enables new use cases.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20assign%20state%20getters%20to%20global%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Calling%20a%20state's%20setter%20function%20will%20only%0A%20%20%20%20%20%20%20%20%20%20%20%20trigger%20reactive%20execution%20if%20the%20corresponding%20getter%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20assigned%20to%20and%20referenced%20via%20a%20global%20variable.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20use%20state%20sparingly%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20You%20can%20get%20far%20using%20just%20%60mo.ui%60%2C%20without%20state.%20That%20said%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20judiciously%20using%20state%20can%20simplify%20the%20implementation%20of%20highly%0A%20%20%20%20%20%20%20%20%20%20%20%20interactive%20notebooks%2Fapps%2C%20and%20also%20enables%20new%20use%20cases.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n        \n\n            \n            Access the value of the state via its getter: get_counter()\nreturned 0\n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20Access%20the%20value%20of%20the%20state%20via%20its%20getter%3A%20%60get_counter()%60%0A%20%20%20%20returned%20**%7Bget_counter()%7D**%0A%20%20%20%20%22%22%22%0A)\n        \n\n\n\nSet an element‚Äôs state by calling its setter function.\n\nCall it with a new value: set_counter(1)\nCall it with a function that takes the current value and returns a new one: set_counter(lambda count: count + 1)\n\nState updates are reactive. When you call a state‚Äôs setter in one cell, all other cells that reference the state getter via a global variable are automatically run with the new state value. This is similar to how interacting with a UI element automatically runs all cells that use the element.  The on_change callback. Every UI element takes an optional on_change callback, a function that takes the new value of the element and does anything with it. You can use the setter function in an on_change callback to mutate state.\nüåä Try it! Click the button below and watch what happens.\n\n    \n    \n    \n    increment%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22increment%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20set_counter(lambda%20v%3A%20v%20%2B%201)%2C%0A)%0A%0Adecrement%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22decrement%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20set_counter(lambda%20v%3A%20v%20-%201)%2C%0A)%0A%0Amo.hstack(%5Bincrement%2C%20decrement%5D%2C%20justify%3D%22center%22)\n\n\n            \n            The counter's current value is 0!\nThis cell runs automatically on button click, even though it\ndoesn't reference either button.\n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20counter's%20current%20value%20is%20**%7Bget_counter()%7D**!%0A%0A%20%20%20%20This%20cell%20runs%20automatically%20on%20button%20click%2C%20even%20though%20it%0A%20%20%20%20doesn't%20reference%20either%20button.%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            Calling a state's setter in one cell won't ever cause that same\ncell to re-execute, even if it reads that state getter. This\nprevents accidental infinite loops and makes some things, like\ntying elements, easier.\"\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20no%20self-loops%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Calling%20a%20state's%20setter%20in%20one%20cell%20won't%20ever%20cause%20that%20same%0A%20%20%20%20%20%20%20%20%20%20%20%20cell%20to%20re-execute%2C%20even%20if%20it%20reads%20that%20state%20getter.%20This%0A%20%20%20%20%20%20%20%20%20%20%20%20prevents%20accidental%20infinite%20loops%20and%20makes%20some%20things%2C%20like%0A%20%20%20%20%20%20%20%20%20%20%20%20tying%20elements%2C%20easier.%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \n\n\n\n\nUse state to tie two UI elements to the same value.\n\n    \n    \n    get_shared_state%2C%20set_shared_state%20%3D%20mo.state(0)\n\n\n    \n    \n    x%20%3D%20mo.ui.slider(%0A%20%20%20%200%2C%0A%20%20%20%2010%2C%0A%20%20%20%20value%3Dget_shared_state()%2C%0A%20%20%20%20on_change%3Dset_shared_state%2C%0A%20%20%20%20label%3D%22%24x%24%3A%22%2C%0A)\n\n\n    \n    \n    x_plus_one%20%3D%20mo.ui.number(%0A%20%20%20%201%2C%0A%20%20%20%2011%2C%0A%20%20%20%20value%3Dget_shared_state()%20%2B%201%2C%0A%20%20%20%20on_change%3Dlambda%20v%3A%20set_shared_state(v%20-%201)%2C%0A%20%20%20%20label%3D%22%24x%20%2B%201%24%3A%22%2C%0A)\n\n\n    \n    \n    \n    %5Bx%2C%20x_plus_one%5D\n\n\n            \n            To tie elements, you must mo.state, and the tied elements\nmust be created in different cells (since self-loops with state\nare not allowed).\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20tying%20elements%20and%20cycles%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20To%20tie%20elements%2C%20you%20must%20%60mo.state%60%2C%20and%20the%20tied%20elements%0A%20%20%20%20%20%20%20%20%20%20%20%20must%20be%20created%20in%20different%20cells%20(since%20self-loops%20with%20state%0A%20%20%20%20%20%20%20%20%20%20%20%20are%20not%20allowed).%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \n\n\n\n\n    \n    \n    %40dataclass%0Aclass%20Task%3A%0A%20%20%20%20name%3A%20str%0A%20%20%20%20done%3A%20bool%20%3D%20False%0A%0Aget_tasks%2C%20set_tasks%20%3D%20mo.state(%5B%5D)%0Atask_list_mutated%2C%20set_task_list_mutated%20%3D%20mo.state(False)\n\n\n    \n    \n    task_list_mutated%0A%0Atask_entry_box%20%3D%20mo.ui.text(placeholder%3D%22a%20task%20...%22)\n\n\n    \n    \n    def%20add_task()%3A%0A%20%20%20%20if%20task_entry_box.value%3A%0A%20%20%20%20%20%20%20%20set_tasks(lambda%20v%3A%20v%20%2B%20%5BTask(task_entry_box.value)%5D)%0A%20%20%20%20%20%20%20%20set_task_list_mutated(True)%0A%0Adef%20clear_tasks()%3A%0A%20%20%20%20set_tasks(lambda%20v%3A%20%5Btask%20for%20task%20in%20v%20if%20not%20task.done%5D)%0A%20%20%20%20set_task_list_mutated(True)%0A%0Aadd_task_button%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22add%20task%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20add_task()%2C%0A)%0A%0Aclear_tasks_button%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22clear%20completed%20tasks%22%2C%20on_change%3Dlambda%20_%3A%20clear_tasks()%0A)\n\n\n    \n    \n    task_list%20%3D%20mo.ui.array(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.ui.checkbox(value%3Dtask.done%2C%20label%3Dtask.name)%0A%20%20%20%20%20%20%20%20for%20task%20in%20get_tasks()%0A%20%20%20%20%5D%2C%0A%20%20%20%20label%3D%22tasks%22%2C%0A%20%20%20%20on_change%3Dlambda%20v%3A%20set_tasks(%0A%20%20%20%20%20%20%20%20lambda%20tasks%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20Task(task.name%2C%20done%3Dv%5Bi%5D)%20for%20i%2C%20task%20in%20enumerate(tasks)%0A%20%20%20%20%20%20%20%20%5D%0A%20%20%20%20)%2C%0A)\n\n\n    \n    \n    \n    mo.hstack(%0A%20%20%20%20%5Btask_entry_box%2C%20add_task_button%2C%20clear_tasks_button%5D%2C%20justify%3D%22start%22%0A)\n\n\n    \n    No tasks! üéâ\n    \n    mo.as_html(task_list)%20if%20task_list.value%20else%20mo.md(%22No%20tasks!%20%F0%9F%8E%89%22)\n\n\n\n\n\nThe remaining cells are helper data structures and functions. You can look at their code if you‚Äôre curious how certain parts of this tutorial were implemented.\n\n    \n    \n    composite_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22batch%22%3A%20mo.ui.batch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dictionary%22%3A%20mo.ui.dictionary%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22form%22%3A%20mo.ui.form%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n\n\n    \n    \n    basic_ui_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22button%22%3A%20mo.ui.button%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22checkbox%22%3A%20mo.ui.checkbox%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22date%22%3A%20mo.ui.date%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dropdown%22%3A%20mo.ui.dropdown%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22file%22%3A%20mo.ui.file%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22multiselect%22%3A%20mo.ui.multiselect%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22number%22%3A%20mo.ui.number%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22radio%22%3A%20mo.ui.radio%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22range_slider%22%3A%20mo.ui.range_slider%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22switch%22%3A%20mo.ui.switch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22tabs%22%3A%20mo.ui.tabs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22table%22%3A%20mo.ui.table%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text_area%22%3A%20mo.ui.text_area%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n\n\n    \n    \n    def%20construct_element(value)%3A%0A%20%20%20%20if%20value%20%3D%3D%20mo.ui.array%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text()%2C%20mo.ui.slider(1%2C%2010)%2C%20mo.ui.date()%5D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.batch%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Name%3A%20%7Bname%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Date%3A%20%7Bdate%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20).batch(name%3Dmo.ui.text()%2C%20date%3Dmo.ui.date())%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.button%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.button(%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3D0%2C%20label%3D%22click%20me%22%2C%20on_click%3Dlambda%20value%3A%20value%20%2B%201%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.checkbox%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.checkbox(label%3D%22check%20me%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.date%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.date()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dictionary%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dictionary(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider(1%2C%2010)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text(%22type%20something!%22)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mo.ui.button(value%3D0%2C%20on_click%3Dlambda%20v%3A%20v%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20_%20in%20range(3)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22buttons%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dropdown%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dropdown(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.file%3A%0A%20%20%20%20%20%20%20%20return%20%5Bmo.ui.file(kind%3D%22button%22)%2C%20mo.ui.file(kind%3D%22area%22)%5D%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.form%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area(placeholder%3D%22...%22).form()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.multiselect%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.multiselect(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.number%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.number(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.radio%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.radio(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D%2C%20value%3D%22a%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.range_slider%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.range_slider(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.slider%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.switch%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.switch()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.tabs%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.tabs(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%231%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Michael%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Scott%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%232%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Dwight%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Schrute%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.table%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.table(%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3D%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Michael%22%2C%20%22last_name%22%3A%20%22Scott%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Dwight%22%2C%20%22last_name%22%3A%20%22Schrute%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22Employees%22%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text_area%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area()%0A%20%20%20%20return%20None\n\n\n    \n    \n    def%20show_element(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.hstack(%5Belement%5D%2C%20%22center%22)\n\n\n    \n    \n    def%20value(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20v%20%3D%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20element.value%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20not%20isinstance(element%2C%20mo.ui.file)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%20element.name()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20element's%20current%20value%20is%20%7Bmo.as_html(element.value)%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)\n\n\n    \n    \n    def%20documentation(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.accordion(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20f%22Documentation%20on%20%60mo.ui.%7Belement.__name__%7D%60%22%3A%20mo.doc(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)\n\n\n    \n    \n    from%20dataclasses%20import%20dataclass\n\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Ui"
    ]
  },
  {
    "objectID": "tutorials/ui.html#state",
    "href": "tutorials/ui.html#state",
    "title": "Ui",
    "section": "",
    "text": "mo.md(%0A%20%20%20%20%22%22%22%0A%20%20%20%20**Heads%20up!**%0A%0A%20%20%20%20The%20rest%20of%20this%20tutorial%20covers%20state%2C%20an%20advanced%20topic.%20Feel%20free%0A%20%20%20%20to%20return%20here%20later%2C%20if%20or%20when%20you%20find%20yourself%0A%20%20%20%20limited%20in%20building%20interactive%20stateful%20apps.%0A%20%20%20%20%22%22%22%0A).callout(kind%3D%22warn%22)\n\nYou can build powerful interactive notebooks and apps using just mo.ui and reactivity.\nSometimes, however, you might want interactions to mutate state. Maybe you‚Äôre building a checklist, and you want to maintain a list of action items. Or maybe you want to tie two different UI elements, so that updating one updates the other.\nFor these and other cases, marimo provides the function mo.state, which creates state returns a getter function and a setter function. When you call the setter function in one cell, all other cells that reference the getter via a global variable are automatically run (similar to UI elements).\n\n            \n            def state(value: T, allow_self_loops: bool = False) -&gt; tuple[State[T],\n  Callable[[T], None]]: \n\nMutable reactive state\nThis function takes an initial value and returns:\n\na getter function that reads the state value\na setter function to set the state's value\n\nWhen you call the setter function and update the state value in one cell,\nall other cells that read any global variables assigned to the getter\nwill automatically run. By default, the cell that called the setter\nfunction won't be re-run, even if it references the getter; to allow a\nstate setter to possibly run the caller cell, use the keyword argument\nallow_self_loops=True.\nYou can use this function in conjunction with UIElement on_change\nhandlers to trigger side-effects when an element's value is updated. For\nexample, you can tie multiple UI elements to derive their values from\nshared state.\nBasic Usage.\nCreate state:\nget_count, set_count = mo.state(0)\n\nRead the value:\nget_count()\n\nUpdate the state:\nset_count(1)\n\nUpdate the state based on the current value:\nset_count(lambda value: value + 1)\n\nNote: Never mutate the state directly. You should only change its\nvalue through its setter.\nSynchronizing multiple UI elements.\nget_state, set_state = mo.state(0)\n\n# updating the state through the slider will recreate the number (below)\nslider = mo.ui.slider(0, 100, value=get_state(), on_change=set_state)\n\n# updating the state through the number will recreate the slider (above)\nnumber = mo.ui.number(0, 100, value=get_state(), on_change=set_state)\n\n# slider and number are synchronized to have the same value (try it!)\n[slider, number]\n\nWarning. Do not store marimo.ui elements in state; doing so can\nlead to hard-to-diagnose bugs.\nArgs:\n\nvalue: initial value of the state\nallow_self_loops: if True, if a cell calls a state setter\n  and also references its getter, the caller cell will be re-run;\n  defaults to False.\n\nReturns:\n\ngetter function that retrieves the state value\nsetter function that takes a new value, or a function taking the current\n  value as its argument and returning a new value\n\n            \n            mo.accordion(%7B%22Documentation%20on%20%60mo.state%60%22%3A%20mo.doc(mo.state)%7D)\n        \n\n\nmo.state takes an initial state value as its argument, and returns\n\na function that returns the state value;\na function that updates the state value.\n\nFor exaxmple,\nget_counter, set_counter = mo.state(0)\n\n    \n    \n    get_counter%2C%20set_counter%20%3D%20mo.state(0)\n\n\n            \n            Calling a state's setter function will only\ntrigger reactive execution if the corresponding getter is\nassigned to and referenced via a global variable.You can get far using just mo.ui, without state. That said,\njudiciously using state can simplify the implementation of highly\ninteractive notebooks/apps, and also enables new use cases.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20assign%20state%20getters%20to%20global%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Calling%20a%20state's%20setter%20function%20will%20only%0A%20%20%20%20%20%20%20%20%20%20%20%20trigger%20reactive%20execution%20if%20the%20corresponding%20getter%20is%0A%20%20%20%20%20%20%20%20%20%20%20%20assigned%20to%20and%20referenced%20via%20a%20global%20variable.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%22Tip%3A%20use%20state%20sparingly%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20You%20can%20get%20far%20using%20just%20%60mo.ui%60%2C%20without%20state.%20That%20said%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20judiciously%20using%20state%20can%20simplify%20the%20implementation%20of%20highly%0A%20%20%20%20%20%20%20%20%20%20%20%20interactive%20notebooks%2Fapps%2C%20and%20also%20enables%20new%20use%20cases.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%7D%0A)\n        \n\n            \n            Access the value of the state via its getter: get_counter()\nreturned 0\n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20Access%20the%20value%20of%20the%20state%20via%20its%20getter%3A%20%60get_counter()%60%0A%20%20%20%20returned%20**%7Bget_counter()%7D**%0A%20%20%20%20%22%22%22%0A)\n        \n\n\n\nSet an element‚Äôs state by calling its setter function.\n\nCall it with a new value: set_counter(1)\nCall it with a function that takes the current value and returns a new one: set_counter(lambda count: count + 1)\n\nState updates are reactive. When you call a state‚Äôs setter in one cell, all other cells that reference the state getter via a global variable are automatically run with the new state value. This is similar to how interacting with a UI element automatically runs all cells that use the element.  The on_change callback. Every UI element takes an optional on_change callback, a function that takes the new value of the element and does anything with it. You can use the setter function in an on_change callback to mutate state.\nüåä Try it! Click the button below and watch what happens.\n\n    \n    \n    \n    increment%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22increment%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20set_counter(lambda%20v%3A%20v%20%2B%201)%2C%0A)%0A%0Adecrement%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22decrement%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20set_counter(lambda%20v%3A%20v%20-%201)%2C%0A)%0A%0Amo.hstack(%5Bincrement%2C%20decrement%5D%2C%20justify%3D%22center%22)\n\n\n            \n            The counter's current value is 0!\nThis cell runs automatically on button click, even though it\ndoesn't reference either button.\n            \n            mo.md(%0A%20%20%20%20f%22%22%22%0A%20%20%20%20The%20counter's%20current%20value%20is%20**%7Bget_counter()%7D**!%0A%0A%20%20%20%20This%20cell%20runs%20automatically%20on%20button%20click%2C%20even%20though%20it%0A%20%20%20%20doesn't%20reference%20either%20button.%0A%20%20%20%20%22%22%22%0A)\n        \n\n            \n            Calling a state's setter in one cell won't ever cause that same\ncell to re-execute, even if it reads that state getter. This\nprevents accidental infinite loops and makes some things, like\ntying elements, easier.\"\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20no%20self-loops%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Calling%20a%20state's%20setter%20in%20one%20cell%20won't%20ever%20cause%20that%20same%0A%20%20%20%20%20%20%20%20%20%20%20%20cell%20to%20re-execute%2C%20even%20if%20it%20reads%20that%20state%20getter.%20This%0A%20%20%20%20%20%20%20%20%20%20%20%20prevents%20accidental%20infinite%20loops%20and%20makes%20some%20things%2C%20like%0A%20%20%20%20%20%20%20%20%20%20%20%20tying%20elements%2C%20easier.%22%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \n\n\n\n\nUse state to tie two UI elements to the same value.\n\n    \n    \n    get_shared_state%2C%20set_shared_state%20%3D%20mo.state(0)\n\n\n    \n    \n    x%20%3D%20mo.ui.slider(%0A%20%20%20%200%2C%0A%20%20%20%2010%2C%0A%20%20%20%20value%3Dget_shared_state()%2C%0A%20%20%20%20on_change%3Dset_shared_state%2C%0A%20%20%20%20label%3D%22%24x%24%3A%22%2C%0A)\n\n\n    \n    \n    x_plus_one%20%3D%20mo.ui.number(%0A%20%20%20%201%2C%0A%20%20%20%2011%2C%0A%20%20%20%20value%3Dget_shared_state()%20%2B%201%2C%0A%20%20%20%20on_change%3Dlambda%20v%3A%20set_shared_state(v%20-%201)%2C%0A%20%20%20%20label%3D%22%24x%20%2B%201%24%3A%22%2C%0A)\n\n\n    \n    \n    \n    %5Bx%2C%20x_plus_one%5D\n\n\n            \n            To tie elements, you must mo.state, and the tied elements\nmust be created in different cells (since self-loops with state\nare not allowed).\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20tying%20elements%20and%20cycles%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20To%20tie%20elements%2C%20you%20must%20%60mo.state%60%2C%20and%20the%20tied%20elements%0A%20%20%20%20%20%20%20%20%20%20%20%20must%20be%20created%20in%20different%20cells%20(since%20self-loops%20with%20state%0A%20%20%20%20%20%20%20%20%20%20%20%20are%20not%20allowed).%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \n\n\n\n\n    \n    \n    %40dataclass%0Aclass%20Task%3A%0A%20%20%20%20name%3A%20str%0A%20%20%20%20done%3A%20bool%20%3D%20False%0A%0Aget_tasks%2C%20set_tasks%20%3D%20mo.state(%5B%5D)%0Atask_list_mutated%2C%20set_task_list_mutated%20%3D%20mo.state(False)\n\n\n    \n    \n    task_list_mutated%0A%0Atask_entry_box%20%3D%20mo.ui.text(placeholder%3D%22a%20task%20...%22)\n\n\n    \n    \n    def%20add_task()%3A%0A%20%20%20%20if%20task_entry_box.value%3A%0A%20%20%20%20%20%20%20%20set_tasks(lambda%20v%3A%20v%20%2B%20%5BTask(task_entry_box.value)%5D)%0A%20%20%20%20%20%20%20%20set_task_list_mutated(True)%0A%0Adef%20clear_tasks()%3A%0A%20%20%20%20set_tasks(lambda%20v%3A%20%5Btask%20for%20task%20in%20v%20if%20not%20task.done%5D)%0A%20%20%20%20set_task_list_mutated(True)%0A%0Aadd_task_button%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22add%20task%22%2C%0A%20%20%20%20on_change%3Dlambda%20_%3A%20add_task()%2C%0A)%0A%0Aclear_tasks_button%20%3D%20mo.ui.button(%0A%20%20%20%20label%3D%22clear%20completed%20tasks%22%2C%20on_change%3Dlambda%20_%3A%20clear_tasks()%0A)\n\n\n    \n    \n    task_list%20%3D%20mo.ui.array(%0A%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20mo.ui.checkbox(value%3Dtask.done%2C%20label%3Dtask.name)%0A%20%20%20%20%20%20%20%20for%20task%20in%20get_tasks()%0A%20%20%20%20%5D%2C%0A%20%20%20%20label%3D%22tasks%22%2C%0A%20%20%20%20on_change%3Dlambda%20v%3A%20set_tasks(%0A%20%20%20%20%20%20%20%20lambda%20tasks%3A%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20Task(task.name%2C%20done%3Dv%5Bi%5D)%20for%20i%2C%20task%20in%20enumerate(tasks)%0A%20%20%20%20%20%20%20%20%5D%0A%20%20%20%20)%2C%0A)\n\n\n    \n    \n    \n    mo.hstack(%0A%20%20%20%20%5Btask_entry_box%2C%20add_task_button%2C%20clear_tasks_button%5D%2C%20justify%3D%22start%22%0A)\n\n\n    \n    No tasks! üéâ\n    \n    mo.as_html(task_list)%20if%20task_list.value%20else%20mo.md(%22No%20tasks!%20%F0%9F%8E%89%22)",
    "crumbs": [
      "Tutorials",
      "Ui"
    ]
  },
  {
    "objectID": "tutorials/ui.html#appendix",
    "href": "tutorials/ui.html#appendix",
    "title": "Ui",
    "section": "",
    "text": "The remaining cells are helper data structures and functions. You can look at their code if you‚Äôre curious how certain parts of this tutorial were implemented.\n\n    \n    \n    composite_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22batch%22%3A%20mo.ui.batch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dictionary%22%3A%20mo.ui.dictionary%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22form%22%3A%20mo.ui.form%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n\n\n    \n    \n    basic_ui_elements%20%3D%20mo.ui.dropdown(%0A%20%20%20%20options%3Ddict(%0A%20%20%20%20%20%20%20%20sorted(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22button%22%3A%20mo.ui.button%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22checkbox%22%3A%20mo.ui.checkbox%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22date%22%3A%20mo.ui.date%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22dropdown%22%3A%20mo.ui.dropdown%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22file%22%3A%20mo.ui.file%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22multiselect%22%3A%20mo.ui.multiselect%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22number%22%3A%20mo.ui.number%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22radio%22%3A%20mo.ui.radio%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22range_slider%22%3A%20mo.ui.range_slider%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22switch%22%3A%20mo.ui.switch%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22tabs%22%3A%20mo.ui.tabs%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22table%22%3A%20mo.ui.table%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text_area%22%3A%20mo.ui.text_area%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D.items()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20)%2C%0A)\n\n\n    \n    \n    def%20construct_element(value)%3A%0A%20%20%20%20if%20value%20%3D%3D%20mo.ui.array%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%5Bmo.ui.text()%2C%20mo.ui.slider(1%2C%2010)%2C%20mo.ui.date()%5D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.batch%3A%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Name%3A%20%7Bname%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20-%20Date%3A%20%7Bdate%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20).batch(name%3Dmo.ui.text()%2C%20date%3Dmo.ui.date())%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.button%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.button(%0A%20%20%20%20%20%20%20%20%20%20%20%20value%3D0%2C%20label%3D%22click%20me%22%2C%20on_click%3Dlambda%20value%3A%20value%20%2B%201%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.checkbox%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.checkbox(label%3D%22check%20me%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.date%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.date()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dictionary%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dictionary(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22slider%22%3A%20mo.ui.slider(1%2C%2010)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22text%22%3A%20mo.ui.text(%22type%20something!%22)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22array%22%3A%20mo.ui.array(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20mo.ui.button(value%3D0%2C%20on_click%3Dlambda%20v%3A%20v%20%2B%201)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20for%20_%20in%20range(3)%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22buttons%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.dropdown%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.dropdown(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.file%3A%0A%20%20%20%20%20%20%20%20return%20%5Bmo.ui.file(kind%3D%22button%22)%2C%20mo.ui.file(kind%3D%22area%22)%5D%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.form%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area(placeholder%3D%22...%22).form()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.multiselect%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.multiselect(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.number%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.number(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.radio%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.radio(%5B%22a%22%2C%20%22b%22%2C%20%22c%22%5D%2C%20value%3D%22a%22)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.range_slider%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.range_slider(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.slider%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.slider(start%3D1%2C%20stop%3D10%2C%20step%3D0.5)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.switch%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.switch()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.tabs%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.tabs(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%231%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Michael%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Scott%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22Employee%20%232%22%3A%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22first_name%22%3A%20%22Dwight%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%22last_name%22%3A%20%22Schrute%22%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.table%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.table(%0A%20%20%20%20%20%20%20%20%20%20%20%20data%3D%5B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Michael%22%2C%20%22last_name%22%3A%20%22Scott%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%7B%22first_name%22%3A%20%22Dwight%22%2C%20%22last_name%22%3A%20%22Schrute%22%7D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20%5D%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20label%3D%22Employees%22%2C%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text()%0A%20%20%20%20elif%20value%20%3D%3D%20mo.ui.text_area%3A%0A%20%20%20%20%20%20%20%20return%20mo.ui.text_area()%0A%20%20%20%20return%20None\n\n\n    \n    \n    def%20show_element(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.hstack(%5Belement%5D%2C%20%22center%22)\n\n\n    \n    \n    def%20value(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20v%20%3D%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20element.value%0A%20%20%20%20%20%20%20%20%20%20%20%20if%20not%20isinstance(element%2C%20mo.ui.file)%0A%20%20%20%20%20%20%20%20%20%20%20%20else%20element.name()%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20return%20mo.md(%0A%20%20%20%20%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20element's%20current%20value%20is%20%7Bmo.as_html(element.value)%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)\n\n\n    \n    \n    def%20documentation(element)%3A%0A%20%20%20%20if%20element%20is%20not%20None%3A%0A%20%20%20%20%20%20%20%20return%20mo.accordion(%0A%20%20%20%20%20%20%20%20%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20f%22Documentation%20on%20%60mo.ui.%7Belement.__name__%7D%60%22%3A%20mo.doc(%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20element%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20)%0A%20%20%20%20%20%20%20%20%20%20%20%20%7D%0A%20%20%20%20%20%20%20%20)\n\n\n    \n    \n    from%20dataclasses%20import%20dataclass\n\n\n    \n    \n    import%20marimo%20as%20mo",
    "crumbs": [
      "Tutorials",
      "Ui"
    ]
  },
  {
    "objectID": "tutorials/intro.html",
    "href": "tutorials/intro.html",
    "title": "Intro",
    "section": "",
    "text": "import%20marimo%20as%20mo%0A%0Amo.md(%22%23%20Welcome%20to%20marimo!%20%F0%9F%8C%8A%F0%9F%8D%83%22)",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/intro.html#reactive-execution",
    "href": "tutorials/intro.html#reactive-execution",
    "title": "Intro",
    "section": "1. Reactive execution",
    "text": "1. Reactive execution\nA marimo notebook is made up of small blocks of Python code called cells.\nmarimo reads your cells and models the dependencies among them: whenever a cell that defines a global variable is run, marimo automatically runs all cells that reference that variable.\nReactivity keeps your program state and outputs in sync with your code, making for a dynamic programming environment that prevents bugs before they happen.\n\n            \n            üåä See it in action. In the next cell, change the value of the\nvariable  changed to True, then click the run button.\n            \n            (%0A%20%20%20%20mo.md(%0A%20%20%20%20%20%20%20%20f%22%22%22%0A%20%20%20%20%20%20%20%20**%E2%9C%A8%20Nice!**%20The%20value%20of%20%60changed%60%20is%20now%20%7Bchanged%7D.%0A%0A%20%20%20%20%20%20%20%20When%20you%20updated%20the%20value%20of%20the%20variable%20%60changed%60%2C%20marimo%0A%20%20%20%20%20%20%20%20**reacted**%20by%20running%20this%20cell%20automatically%2C%20because%20this%20cell%0A%20%20%20%20%20%20%20%20references%20the%20global%20variable%20%60changed%60.%0A%0A%20%20%20%20%20%20%20%20Reactivity%20ensures%20that%20your%20notebook%20state%20is%20always%0A%20%20%20%20%20%20%20%20consistent%2C%20which%20is%20crucial%20for%20doing%20good%20science%3B%20it's%20also%20what%0A%20%20%20%20%20%20%20%20enables%20marimo%20notebooks%20to%20double%20as%20tools%20and%20%20apps.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%0A%20%20%20%20if%20changed%0A%20%20%20%20else%20mo.md(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20**%F0%9F%8C%8A%20See%20it%20in%20action.**%20In%20the%20next%20cell%2C%20change%20the%20value%20of%20the%0A%20%20%20%20%20%20%20%20variable%20%20%60changed%60%20to%20%60True%60%2C%20then%20click%20the%20run%20button.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%0A)\n        \n\n    \n    \n    changed%20%3D%20False\n\n\n            \n            The order of cells on the page has no bearing on\nthe order in which cells are executed: marimo knows that a cell\nreading a variable must run after the cell that  defines it. This\nfrees you to organize your code in the way that makes the most\nsense for you.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20execution%20order%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20The%20order%20of%20cells%20on%20the%20page%20has%20no%20bearing%20on%0A%20%20%20%20%20%20%20%20%20%20%20%20the%20order%20in%20which%20cells%20are%20executed%3A%20marimo%20knows%20that%20a%20cell%0A%20%20%20%20%20%20%20%20%20%20%20%20reading%20a%20variable%20must%20run%20after%20the%20cell%20that%20%20defines%20it.%20This%0A%20%20%20%20%20%20%20%20%20%20%20%20frees%20you%20to%20organize%20your%20code%20in%20the%20way%20that%20makes%20the%20most%0A%20%20%20%20%20%20%20%20%20%20%20%20sense%20for%20you.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \nGlobal names must be unique. To enable reactivity, marimo imposes a constraint on how names appear in cells: no two cells may define the same variable.\n\n            \n            By encapsulating logic in functions, classes, or Python modules,\nyou can minimize the number of global variables in your notebook.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20encapsulation%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20By%20encapsulating%20logic%20in%20functions%2C%20classes%2C%20or%20Python%20modules%2C%0A%20%20%20%20%20%20%20%20%20%20%20%20you%20can%20minimize%20the%20number%20of%20global%20variables%20in%20your%20notebook.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)\n        \n\n            \n            Variables prefixed with an underscore are \"private\" to a cell, so\nthey can be defined by multiple cells.\n            \n            mo.accordion(%0A%20%20%20%20%7B%0A%20%20%20%20%20%20%20%20%22Tip%3A%20private%20variables%22%3A%20(%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20%20%20%20%20Variables%20prefixed%20with%20an%20underscore%20are%20%22private%22%20to%20a%20cell%2C%20so%0A%20%20%20%20%20%20%20%20%20%20%20%20they%20can%20be%20defined%20by%20multiple%20cells.%0A%20%20%20%20%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20)%0A%20%20%20%20%7D%0A)",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/intro.html#ui-elements",
    "href": "tutorials/intro.html#ui-elements",
    "title": "Intro",
    "section": "2. UI elements",
    "text": "2. UI elements\nCells can output interactive UI elements. Interacting with a UI element automatically triggers notebook execution: when you interact with a UI element, its value is sent back to Python, and every cell that references that element is re-run.\nmarimo provides a library of UI elements to choose from under marimo.ui.  üåä Some UI elements. Try interacting with the below elements.\n\n    \n    \n    icon%20%3D%20mo.ui.dropdown(%5B%22%F0%9F%8D%83%22%2C%20%22%F0%9F%8C%8A%22%2C%20%22%E2%9C%A8%22%5D%2C%20value%3D%22%F0%9F%8D%83%22)\n\n\n    \n    \n    repetitions%20%3D%20mo.ui.slider(1%2C%2016%2C%20label%3Df%22number%20of%20%7Bicon.value%7D%3A%20%22)\n\n\n    \n    \n    \n    icon%2C%20repetitions\n\n\n    \n    üçÉ\n    \n    mo.md(%22%23%20%22%20%2B%20icon.value%20*%20repetitions.value)",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/intro.html#marimo-is-just-python",
    "href": "tutorials/intro.html#marimo-is-just-python",
    "title": "Intro",
    "section": "3. marimo is just Python",
    "text": "3. marimo is just Python\nmarimo cells parse Python (and only Python), and marimo notebooks are stored as pure Python files ‚Äî outputs are not included. There‚Äôs no magical syntax.\nThe Python files generated by marimo are:\n\neasily versioned with git, yielding minimal diffs\nlegible for both humans and machines\nformattable using your tool of choice,\nusable as Python scripts, with UI elements taking their default values, and\nimportable by other modules (more on that in the future).  ## 4. Running notebooks as apps\n\nmarimo notebooks can double as apps. Click the app window icon in the bottom-left to see this notebook in ‚Äúapp view.‚Äù\nServe a notebook as an app with marimo run at the command-line. Of course, you can use marimo just to level-up your notebooking, without ever making apps.  ## 5. The marimo command-line tool\nCreating and editing notebooks. Use\nmarimo edit\nin a terminal to start the marimo notebook server. From here you can create a new notebook or edit existing ones.\nRunning as apps. Use\nmarimo run notebook.py\nto start a webserver that serves your notebook as an app in read-only mode, with code cells hidden.\nConvert a Jupyter notebook. Convert a Jupyter notebook to a marimo notebook using marimo convert:\nmarimo convert your_notebook.ipynb &gt; your_app.py\nTutorials. marimo comes packaged with tutorials:\n\ndataflow: more on marimo‚Äôs automatic execution\nui: how to use UI elements\nmarkdown: how to write markdown, with interpolated values and LaTeX\nplots: how plotting works in marimo\nfileformat: how marimo‚Äôs file format works\n\nStart a tutorial with marimo tutorial; for example,\nmarimo tutorial dataflow\nIn addition to tutorials, we have examples in our our GitHub repo.  ## 6. The marimo editor\nHere are some tips to help you get started with the marimo editor.\n\n            \n            Saving\n\n\nName your app using the box at the top of the screen, or\n  with Ctrl/Cmd+s. You can also create a named app at the\n  command line, e.g., marimo edit app_name.py.\n\n\nSave by clicking the save icon on the bottom left, or by\n  inputting Ctrl/Cmd+s. By default marimo is configured\n  to autosave.\n\n\n\nRun a cell by clicking the play ( ‚ñ∑ ) button on the bottom\nright of a cell, or by inputting Ctrl/Cmd+Enter.\n\n\nRun a stale cell  by clicking the yellow run button to the\nright of the cell, or by inputting Ctrl/Cmd+Enter. A cell is\nstale when its code has been modified but not run.\n\n\nRun all stale cells by clicking the play ( ‚ñ∑ ) button on\nthe bottom right of the screen, or input Ctrl/Cmd+Shift+r.\n\nConsole output (e.g., print() statements) is shown below a\ncell.\n\nCreate a new cell above or below a given one by clicking\n    the plus button to the left of the cell, which appears on\n    mouse hover.\n\n\nMove a cell up or down by dragging on the handle to the \n    right of the cell, which appears on mouse hover.\n\n\nDelete a cell by clicking the trash bin icon. Bring it\n    back by clicking the undo button on the bottom right of the\n    screen, or with Ctrl/Cmd+Shift+z.\n\nYou can disable a cell via the cell context menu (open it\nby clicking the icon to the right of a cell). marimo will\nnever run a disabled cell or any cells that depend on it. This\ncan help prevent accidental execution of expensive computations\nwhen editing a notebook.You can collapse or fold the code in a cell by clicking the arrow\nicons in the line number column to the left, or by using keyboard\nshortcuts.\nUse the command palette (Ctrl/Cmd+k) or a keyboard shortcut to\nquickly fold or unfold all cells.If you have black installed, you can format a cell with\nthe keyboard shortcut Ctrl/Cmd+b.Use Ctrl/Cmd+k to open the command palette.Click the keyboard button on the bottom left of the screen (or\ninput Ctrl/Cmd+Shift+h) to view a list of all keyboard\nshortcuts.Configure the editor by clicking the gears icon near the top-right\nof the screen.\n            \n            mo.accordion(tips)",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  },
  {
    "objectID": "tutorials/intro.html#finally-a-fun-fact",
    "href": "tutorials/intro.html#finally-a-fun-fact",
    "title": "Intro",
    "section": "Finally, a fun fact",
    "text": "Finally, a fun fact\n\nThe name ‚Äúmarimo‚Äù is a reference to a type of algae that, under the right conditions, clumps together to form a small sphere called a ‚Äúmarimo moss ball‚Äù. Made of just strands of algae, these beloved assemblages are greater than the sum of their parts.\n\n    \n    \n    tips%20%3D%20%7B%0A%20%20%20%20%22Saving%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20**Saving**%0A%0A%20%20%20%20%20%20%20%20-%20_Name_%20your%20app%20using%20the%20box%20at%20the%20top%20of%20the%20screen%2C%20or%0A%20%20%20%20%20%20%20%20%20%20with%20%60Ctrl%2FCmd%2Bs%60.%20You%20can%20also%20create%20a%20named%20app%20at%20the%0A%20%20%20%20%20%20%20%20%20%20command%20line%2C%20e.g.%2C%20%60marimo%20edit%20app_name.py%60.%0A%0A%20%20%20%20%20%20%20%20-%20_Save_%20by%20clicking%20the%20save%20icon%20on%20the%20bottom%20left%2C%20or%20by%0A%20%20%20%20%20%20%20%20%20%20inputting%20%60Ctrl%2FCmd%2Bs%60.%20By%20default%20marimo%20is%20configured%0A%20%20%20%20%20%20%20%20%20%20to%20autosave.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Running%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%201.%20_Run%20a%20cell_%20by%20clicking%20the%20play%20(%20%E2%96%B7%20)%20button%20on%20the%20bottom%0A%20%20%20%20%20%20%20%20right%20of%20a%20cell%2C%20or%20by%20inputting%20%60Ctrl%2FCmd%2BEnter%60.%0A%0A%20%20%20%20%20%20%20%202.%20_Run%20a%20stale%20cell_%20%20by%20clicking%20the%20yellow%20run%20button%20to%20the%0A%20%20%20%20%20%20%20%20right%20of%20the%20cell%2C%20or%20by%20inputting%20%60Ctrl%2FCmd%2BEnter%60.%20A%20cell%20is%0A%20%20%20%20%20%20%20%20stale%20when%20its%20code%20has%20been%20modified%20but%20not%20run.%0A%0A%20%20%20%20%20%20%20%203.%20_Run%20all%20stale%20cells_%20by%20clicking%20the%20play%20(%20%E2%96%B7%20)%20button%20on%0A%20%20%20%20%20%20%20%20the%20bottom%20right%20of%20the%20screen%2C%20or%20input%20%60Ctrl%2FCmd%2BShift%2Br%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Console%20Output%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Console%20output%20(e.g.%2C%20%60print()%60%20statements)%20is%20shown%20below%20a%0A%20%20%20%20%20%20%20%20cell.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Creating%2C%20Moving%2C%20and%20Deleting%20Cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%201.%20_Create_%20a%20new%20cell%20above%20or%20below%20a%20given%20one%20by%20clicking%0A%20%20%20%20%20%20%20%20%20%20%20%20the%20plus%20button%20to%20the%20left%20of%20the%20cell%2C%20which%20appears%20on%0A%20%20%20%20%20%20%20%20%20%20%20%20mouse%20hover.%0A%0A%20%20%20%20%20%20%20%202.%20_Move_%20a%20cell%20up%20or%20down%20by%20dragging%20on%20the%20handle%20to%20the%20%0A%20%20%20%20%20%20%20%20%20%20%20%20right%20of%20the%20cell%2C%20which%20appears%20on%20mouse%20hover.%0A%0A%20%20%20%20%20%20%20%203.%20_Delete_%20a%20cell%20by%20clicking%20the%20trash%20bin%20icon.%20Bring%20it%0A%20%20%20%20%20%20%20%20%20%20%20%20back%20by%20clicking%20the%20undo%20button%20on%20the%20bottom%20right%20of%20the%0A%20%20%20%20%20%20%20%20%20%20%20%20screen%2C%20or%20with%20%60Ctrl%2FCmd%2BShift%2Bz%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Disabling%20Cells%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20disable%20a%20cell%20via%20the%20cell%20context%20menu%20(open%20it%0A%20%20%20%20%20%20%20%20by%20clicking%20the%20icon%20to%20the%20right%20of%20a%20cell).%20marimo%20will%0A%20%20%20%20%20%20%20%20never%20run%20a%20disabled%20cell%20or%20any%20cells%20that%20depend%20on%20it.%20This%0A%20%20%20%20%20%20%20%20can%20help%20prevent%20accidental%20execution%20of%20expensive%20computations%0A%20%20%20%20%20%20%20%20when%20editing%20a%20notebook.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Code%20Folding%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20You%20can%20collapse%20or%20fold%20the%20code%20in%20a%20cell%20by%20clicking%20the%20arrow%0A%20%20%20%20%20%20%20%20icons%20in%20the%20line%20number%20column%20to%20the%20left%2C%20or%20by%20using%20keyboard%0A%20%20%20%20%20%20%20%20shortcuts.%0A%0A%20%20%20%20%20%20%20%20Use%20the%20command%20palette%20(%60Ctrl%2FCmd%2Bk%60)%20or%20a%20keyboard%20shortcut%20to%0A%20%20%20%20%20%20%20%20quickly%20fold%20or%20unfold%20all%20cells.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Code%20Formatting%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20If%20you%20have%20%5Bblack%5D(https%3A%2F%2Fgithub.com%2Fpsf%2Fblack)%20installed%2C%20you%20can%20format%20a%20cell%20with%0A%20%20%20%20%20%20%20%20the%20keyboard%20shortcut%20%60Ctrl%2FCmd%2Bb%60.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Command%20Palette%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Use%20%60Ctrl%2FCmd%2Bk%60%20to%20open%20the%20command%20palette.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Keyboard%20Shortcuts%22%3A%20(%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20%20Click%20the%20keyboard%20button%20on%20the%20bottom%20left%20of%20the%20screen%20(or%0A%20%20%20%20%20%20%20%20input%20%60Ctrl%2FCmd%2BShift%2Bh%60)%20to%20view%20a%20list%20of%20all%20keyboard%0A%20%20%20%20%20%20%20%20shortcuts.%0A%20%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%20%20%20%20%22Configuration%22%3A%20(%0A%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20%20%20%20Configure%20the%20editor%20by%20clicking%20the%20gears%20icon%20near%20the%20top-right%0A%20%20%20%20%20%20%20of%20the%20screen.%0A%20%20%20%20%20%20%20%22%22%22%0A%20%20%20%20)%2C%0A%7D",
    "crumbs": [
      "Tutorials",
      "Intro"
    ]
  }
]